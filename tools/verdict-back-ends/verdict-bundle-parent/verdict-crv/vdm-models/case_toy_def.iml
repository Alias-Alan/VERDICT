package CASE_Toy;

import iml.utils.*;
import iml.verdict.*;

model: Model := some (m: Model) {
  m.name = "CASE_Toy" &&
  m.type_declarations.length = 8 &&
  m.type_declarations.element[0] = some (td: TypeDeclaration) {
    td.name = "Position" &&
    td.definition = mk_none<DataType>
  } &&
  m.type_declarations.element[1] = some (td: TypeDeclaration) {
    td.name = "SatelliteConstellation" &&
    td.definition = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.Enum &&
      dt.enum_type.length = 2 &&
      dt.enum_type.element[0] = "GPS" &&
      dt.enum_type.element[1] = "Galileo"
    })
  } &&
  m.type_declarations.element[2] = some (td: TypeDeclaration) {
    td.name = "SatelliteSignals" &&
    td.definition = mk_none<DataType>
  } &&
  m.type_declarations.element[3] = some (td: TypeDeclaration) {
    td.name = "Status" &&
    td.definition = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.Enum &&
      dt.enum_type.length = 2 &&
      dt.enum_type.element[0] = "Confirmed" &&
      dt.enum_type.element[1] = "Unconfirmed"
    })
  } &&
  m.type_declarations.element[4] = some (td: TypeDeclaration) {
    td.name = "MAC" &&
    td.definition = mk_none<DataType>
  } &&
  m.type_declarations.element[5] = some (td: TypeDeclaration) {
    td.name = "Position.impl" &&
    td.definition = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.Record &&
      dt.record_type.length = 2 &&
      dt.record_type.element[0] = some (rf: RecordField) {
        rf.name = "latitude" &&
        rf.dtype = RealType
      } &&
      dt.record_type.element[1] = some (rf: RecordField) {
        rf.name = "longitude" &&
        rf.dtype = RealType
      }
    })
  } &&
  m.type_declarations.element[6] = some (td: TypeDeclaration) {
    td.name = "SatelliteSignals.impl" &&
    td.definition = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.Record &&
      dt.record_type.length = 2 &&
      dt.record_type.element[0] = some (rf: RecordField) {
        rf.name = "gps_sig" &&
        rf.dtype = some (dt: DataType) {
          dt.kind = DataTypeKind.UserDefined &&
          dt.user_defined_type = m.type_declarations.element[5]
      }
    } &&
    dt.record_type.element[1] = some (rf: RecordField) {
      rf.name = "galileo_sig" &&
      rf.dtype = some (dt: DataType) {
        dt.kind = DataTypeKind.UserDefined &&
        dt.user_defined_type = m.type_declarations.element[5]
    }
  }
})} &&
m.type_declarations.element[7] = some (td: TypeDeclaration) {
  td.name = "MAC.impl" &&
  td.definition = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.Record &&
    dt.record_type.length = 2 &&
    dt.record_type.element[0] = some (rf: RecordField) {
      rf.name = "x" &&
      rf.dtype = RealType
    } &&
    dt.record_type.element[1] = some (rf: RecordField) {
      rf.name = "y" &&
      rf.dtype = RealType
    }
  })} &&m.component_types.length = 8 &&
m.component_types.element[0] = some (ct: ComponentType) {
  ct.name = "DeliveryManager" &&
  ct.ports.length = 9 &&
  ct.ports.element[0] = some(p: Port) {
    p.name = "constellation" &&
    p.mode = PortMode.In &&
    p.is_event = false &&
    p.probe = false &&
    p.ptype = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[1]
  })} &&
ct.ports.element[1] = some(p: Port) {
  p.name = "satellite_sig" &&
  p.mode = PortMode.In &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[2]})} &&
ct.ports.element[2] = some(p: Port) {
  p.name = "imu_ref" &&
  p.mode = PortMode.In &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[5]})} &&
ct.ports.element[3] = some(p: Port) {
  p.name = "delivery_location_in" &&
  p.mode = PortMode.In &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[5]})} &&
ct.ports.element[4] = some(p: Port) {
  p.name = "init" &&
  p.mode = PortMode.In &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(BoolType)} &&
ct.ports.element[5] = some(p: Port) {
  p.name = "mac" &&
  p.mode = PortMode.In &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[7]})} &&
ct.ports.element[6] = some(p: Port) {
  p.name = "imu_out" &&
  p.mode = PortMode.Out &&
  p.is_event = true &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[5]})} &&
ct.ports.element[7] = some(p: Port) {
  p.name = "gps_out" &&
  p.mode = PortMode.Out &&
  p.is_event = true &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[5]})} &&
ct.ports.element[8] = some(p: Port) {
  p.name = "delivery_location_out" &&
  p.mode = PortMode.Out &&
  p.is_event = true &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[5]})} &&
ct.compCateg = mk_some<String>("system") &&
ct.contract = mk_none<ContractSpec> &&ct.cyber_relations.length = 0  &&
ct.safety_relations.length = 0  &&ct.safety_events.length = 0 } &&
m.component_types.element[1] = some (ct: ComponentType) {
  ct.name = "DeliveryDriver" &&
  ct.ports.length = 4 &&
  ct.ports.element[0] = some(p: Port) {
    p.name = "delivery_location_in" &&
    p.mode = PortMode.In &&
    p.is_event = false &&
    p.probe = false &&
    p.ptype = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[5]
  })} &&
ct.ports.element[1] = some(p: Port) {
  p.name = "init" &&
  p.mode = PortMode.In &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(BoolType)} &&
ct.ports.element[2] = some(p: Port) {
  p.name = "mac" &&
  p.mode = PortMode.In &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[7]})} &&
ct.ports.element[3] = some(p: Port) {
  p.name = "delivery_location_out" &&
  p.mode = PortMode.Out &&
  p.is_event = true &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[5]})} &&
ct.compCateg = mk_some<String>("system") &&
ct.contract = mk_some<ContractSpec>(some (csp: ContractSpec) {
  csp.constant_declarations.length = 0 &&
  csp.variable_declarations.length = 0 &&
  csp.assumes.length = 0 &&
  csp.guarantees.length = 2 &&
  csp.guarantees.element[0] = some (ci: ContractItem) {
    ci.name = mk_some<Identifier>("delivery_location_out value") &&
    ci.expression = some (e: Expression) {
      e.kind = ExpressionKind.Equal &&
      e.equal = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Call &&
          e.call = some (cll: NodeCall) {
            cll.node = "FirstTimeHolds" &&
            cll.arguments.length = 1 &&
            cll.arguments.element[0] = some (e: Expression) {
              e.kind = ExpressionKind.And &&
              e.and = some (bo: BinaryOperation) {
                bo.lhs_operand = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "init"
                } &&
                bo.rhs_operand = some (e: Expression) {
                  e.kind = ExpressionKind.Equal &&
                  e.equal = some (bo: BinaryOperation) {
                    bo.lhs_operand = some (e: Expression) {
                      e.kind = ExpressionKind.Id &&
                      e.identifier = "mac"
                    } &&
                    bo.rhs_operand = some (e: Expression) {
                      e.kind = ExpressionKind.Call &&
                      e.call = some (cll: NodeCall) {
                        cll.node = "ComputeMAC" &&
                        cll.arguments.length = 1 &&
                        cll.arguments.element[0] = some (e: Expression) {
                          e.kind = ExpressionKind.Id &&
                          e.identifier = "delivery_location_in"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Event &&
          e.event = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "delivery_location_out"
          }
        }
      }
    }
  } &&
  csp.guarantees.element[1] = some (ci: ContractItem) {
    ci.name = mk_some<Identifier>("delivery_location_out presence") &&
    ci.expression = some (e: Expression) {
      e.kind = ExpressionKind.Implies &&
      e.implies = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Event &&
          e.event = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "delivery_location_out"
          }
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Equal &&
          e.equal = some (bo: BinaryOperation) {
            bo.lhs_operand = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "delivery_location_out"
            } &&
            bo.rhs_operand = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "delivery_location_in"
            }
          }
        }
      }
    }
  } &&
  csp.modes.length = 0 &&
  csp.imports.length = 0}) &&ct.cyber_relations.length = 0  &&
ct.safety_relations.length = 0  &&ct.safety_events.length = 0 } &&
m.component_types.element[2] = some (ct: ComponentType) {
  ct.name = "IMU" &&
  ct.ports.length = 3 &&
  ct.ports.element[0] = some(p: Port) {
    p.name = "imu_ref" &&
    p.mode = PortMode.In &&
    p.is_event = false &&
    p.probe = false &&
    p.ptype = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[5]
  })} &&
ct.ports.element[1] = some(p: Port) {
  p.name = "init" &&
  p.mode = PortMode.In &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(BoolType)} &&
ct.ports.element[2] = some(p: Port) {
  p.name = "imu_out" &&
  p.mode = PortMode.Out &&
  p.is_event = true &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[5]})} &&
ct.compCateg = mk_some<String>("system") &&
ct.contract = mk_none<ContractSpec> &&ct.cyber_relations.length = 0  &&
ct.safety_relations.length = 0  &&ct.safety_events.length = 0 } &&
m.component_types.element[3] = some (ct: ComponentType) {
  ct.name = "GPS" &&
  ct.ports.length = 4 &&
  ct.ports.element[0] = some(p: Port) {
    p.name = "constellation" &&
    p.mode = PortMode.In &&
    p.is_event = false &&
    p.probe = false &&
    p.ptype = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[1]
  })} &&
ct.ports.element[1] = some(p: Port) {
  p.name = "satellite_sig" &&
  p.mode = PortMode.In &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[2]})} &&
ct.ports.element[2] = some(p: Port) {
  p.name = "init" &&
  p.mode = PortMode.In &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(BoolType)} &&
ct.ports.element[3] = some(p: Port) {
  p.name = "gps_out" &&
  p.mode = PortMode.Out &&
  p.is_event = true &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[5]})} &&
ct.compCateg = mk_some<String>("system") &&
ct.contract = mk_none<ContractSpec> &&ct.cyber_relations.length = 0  &&
ct.safety_relations.length = 0  &&ct.safety_events.length = 0 } &&
m.component_types.element[4] = some (ct: ComponentType) {
  ct.name = "SystemBus" &&
  ct.ports.length = 6 &&
  ct.ports.element[0] = some(p: Port) {
    p.name = "imu_in" &&
    p.mode = PortMode.In &&
    p.is_event = true &&
    p.probe = false &&
    p.ptype = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[5]
  })} &&
ct.ports.element[1] = some(p: Port) {
  p.name = "gps_in" &&
  p.mode = PortMode.In &&
  p.is_event = true &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[5]})} &&
ct.ports.element[2] = some(p: Port) {
  p.name = "delivery_location_in" &&
  p.mode = PortMode.In &&
  p.is_event = true &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[5]})} &&
ct.ports.element[3] = some(p: Port) {
  p.name = "imu_out" &&
  p.mode = PortMode.Out &&
  p.is_event = true &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[5]})} &&
ct.ports.element[4] = some(p: Port) {
  p.name = "gps_out" &&
  p.mode = PortMode.Out &&
  p.is_event = true &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[5]})} &&
ct.ports.element[5] = some(p: Port) {
  p.name = "delivery_location_out" &&
  p.mode = PortMode.Out &&
  p.is_event = true &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[5]})} &&
ct.compCateg = mk_some<String>("system") &&
ct.contract = mk_some<ContractSpec>(some (csp: ContractSpec) {
  csp.constant_declarations.length = 0 &&
  csp.variable_declarations.length = 0 &&
  csp.assumes.length = 0 &&
  csp.guarantees.length = 6 &&
  csp.guarantees.element[0] = some (ci: ContractItem) {
    ci.name = mk_some<Identifier>("imu_out presence") &&
    ci.expression = some (e: Expression) {
      e.kind = ExpressionKind.Equal &&
      e.equal = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Event &&
          e.event = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "imu_out"
          }
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Event &&
          e.event = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "imu_in"
          }
        }
      }
    }
  } &&
  csp.guarantees.element[1] = some (ci: ContractItem) {
    ci.name = mk_some<Identifier>("imu_out value") &&
    ci.expression = some (e: Expression) {
      e.kind = ExpressionKind.Implies &&
      e.implies = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Event &&
          e.event = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "imu_out"
          }
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Equal &&
          e.equal = some (bo: BinaryOperation) {
            bo.lhs_operand = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "imu_out"
            } &&
            bo.rhs_operand = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "imu_in"
            }
          }
        }
      }
    }
  } &&
  csp.guarantees.element[2] = some (ci: ContractItem) {
    ci.name = mk_some<Identifier>("gps_out presence") &&
    ci.expression = some (e: Expression) {
      e.kind = ExpressionKind.Equal &&
      e.equal = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Event &&
          e.event = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "gps_out"
          }
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Event &&
          e.event = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "gps_in"
          }
        }
      }
    }
  } &&
  csp.guarantees.element[3] = some (ci: ContractItem) {
    ci.name = mk_some<Identifier>("gps_out value") &&
    ci.expression = some (e: Expression) {
      e.kind = ExpressionKind.Implies &&
      e.implies = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Event &&
          e.event = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "gps_out"
          }
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Equal &&
          e.equal = some (bo: BinaryOperation) {
            bo.lhs_operand = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "gps_out"
            } &&
            bo.rhs_operand = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "gps_in"
            }
          }
        }
      }
    }
  } &&
  csp.guarantees.element[4] = some (ci: ContractItem) {
    ci.name = mk_some<Identifier>("delivery_location_out presence") &&
    ci.expression = some (e: Expression) {
      e.kind = ExpressionKind.Equal &&
      e.equal = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Event &&
          e.event = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "delivery_location_out"
          }
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Event &&
          e.event = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "delivery_location_in"
          }
        }
      }
    }
  } &&
  csp.guarantees.element[5] = some (ci: ContractItem) {
    ci.name = mk_some<Identifier>("delivery_location_out value") &&
    ci.expression = some (e: Expression) {
      e.kind = ExpressionKind.Implies &&
      e.implies = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Event &&
          e.event = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "delivery_location_out"
          }
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Equal &&
          e.equal = some (bo: BinaryOperation) {
            bo.lhs_operand = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "delivery_location_out"
            } &&
            bo.rhs_operand = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "delivery_location_in"
            }
          }
        }
      }
    }
  } &&
  csp.modes.length = 0 &&
  csp.imports.length = 0}) &&ct.cyber_relations.length = 0  &&
ct.safety_relations.length = 0  &&ct.safety_events.length = 0 } &&
m.component_types.element[5] = some (ct: ComponentType) {
  ct.name = "Controller" &&
  ct.ports.length = 6 &&
  ct.ports.element[0] = some(p: Port) {
    p.name = "imu_in" &&
    p.mode = PortMode.In &&
    p.is_event = true &&
    p.probe = false &&
    p.ptype = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[5]
  })} &&
ct.ports.element[1] = some(p: Port) {
  p.name = "gps_in" &&
  p.mode = PortMode.In &&
  p.is_event = true &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[5]})} &&
ct.ports.element[2] = some(p: Port) {
  p.name = "delivery_location_in" &&
  p.mode = PortMode.In &&
  p.is_event = true &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[5]})} &&
ct.ports.element[3] = some(p: Port) {
  p.name = "warning_flag" &&
  p.mode = PortMode.In &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(BoolType)} &&
ct.ports.element[4] = some(p: Port) {
  p.name = "status" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[3]})} &&
ct.ports.element[5] = some(p: Port) {
  p.name = "delivery_location_out" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[5]})} &&
ct.compCateg = mk_some<String>("system") &&
ct.contract = mk_some<ContractSpec>(some (csp: ContractSpec) {
  csp.constant_declarations.length = 0 &&
  csp.variable_declarations.length = 1 &&
  csp.variable_declarations.element[0] = some (sd: SymbolDefinition) {
    sd.name = "valid_delivery_location_event" &&
    sd.dtype = BoolType &&
    sd.definition = some (e: Expression) {
      e.kind = ExpressionKind.And &&
      e.and = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Event &&
          e.event = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "delivery_location_in"
          }
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Not &&
          e.not = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "warning_flag"
          }
        }
      }
    }
  } &&
  csp.assumes.length = 0 &&
  csp.guarantees.length = 3 &&
  csp.guarantees.element[0] = some (ci: ContractItem) {
    ci.name = mk_some<Identifier>("status value") &&
    ci.expression = some (e: Expression) {
      e.kind = ExpressionKind.Equal &&
      e.equal = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Equal &&
          e.equal = some (bo: BinaryOperation) {
            bo.lhs_operand = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "status"
            } &&
            bo.rhs_operand = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "Confirmed"
            }
          }
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Call &&
          e.call = some (cll: NodeCall) {
            cll.node = "HasHappened" &&
            cll.arguments.length = 1 &&
            cll.arguments.element[0] = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "valid_delivery_location_event"
            }
          }
        }
      }
    }
  } &&
  csp.guarantees.element[1] = some (ci: ContractItem) {
    ci.name = mk_some<Identifier>("delivery_location_out value (update)") &&
    ci.expression = some (e: Expression) {
      e.kind = ExpressionKind.Implies &&
      e.implies = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Call &&
          e.call = some (cll: NodeCall) {
            cll.node = "FirstTimeHolds" &&
            cll.arguments.length = 1 &&
            cll.arguments.element[0] = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "valid_delivery_location_event"
            }
          }
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Equal &&
          e.equal = some (bo: BinaryOperation) {
            bo.lhs_operand = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "delivery_location_out"
            } &&
            bo.rhs_operand = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "delivery_location_in"
            }
          }
        }
      }
    }
  } &&
  csp.guarantees.element[2] = some (ci: ContractItem) {
    ci.name = mk_some<Identifier>("delivery_location_out value (fixed point)") &&
    ci.expression = some (e: Expression) {
      e.kind = ExpressionKind.Arrow &&
      e.arrow = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.BoolLiteral &&
          e.bool_literal = true
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Implies &&
          e.implies = some (bo: BinaryOperation) {
            bo.lhs_operand = some (e: Expression) {
              e.kind = ExpressionKind.Call &&
              e.call = some (cll: NodeCall) {
                cll.node = "HasHappened" &&
                cll.arguments.length = 1 &&
                cll.arguments.element[0] = some (e: Expression) {
                  e.kind = ExpressionKind.Arrow &&
                  e.arrow = some (bo: BinaryOperation) {
                    bo.lhs_operand = some (e: Expression) {
                      e.kind = ExpressionKind.BoolLiteral &&
                      e.bool_literal = false
                    } &&
                    bo.rhs_operand = some (e: Expression) {
                      e.kind = ExpressionKind.Pre &&
                      e.pre = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "valid_delivery_location_event"
                      }
                    }
                  }
                }
              }
            } &&
            bo.rhs_operand = some (e: Expression) {
              e.kind = ExpressionKind.Equal &&
              e.equal = some (bo: BinaryOperation) {
                bo.lhs_operand = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "delivery_location_out"
                } &&
                bo.rhs_operand = some (e: Expression) {
                  e.kind = ExpressionKind.Pre &&
                  e.pre = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "delivery_location_out"
                  }
                }
              }
            }
          }
        }
      }
    }
  } &&
  csp.modes.length = 0 &&
  csp.imports.length = 0}) &&ct.cyber_relations.length = 0  &&
ct.safety_relations.length = 0  &&ct.safety_events.length = 0 } &&
m.component_types.element[6] = some (ct: ComponentType) {
  ct.name = "PositionRuntimeMonitor" &&
  ct.ports.length = 2 &&
  ct.ports.element[0] = some(p: Port) {
    p.name = "loc" &&
    p.mode = PortMode.In &&
    p.is_event = true &&
    p.probe = false &&
    p.ptype = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[5]
  })} &&
ct.ports.element[1] = some(p: Port) {
  p.name = "warning_flag" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(BoolType)} &&
ct.compCateg = mk_some<String>("system") &&
ct.contract = mk_some<ContractSpec>(some (csp: ContractSpec) {
  csp.constant_declarations.length = 0 &&
  csp.variable_declarations.length = 0 &&
  csp.assumes.length = 0 &&
  csp.guarantees.length = 1 &&
  csp.guarantees.element[0] = some (ci: ContractItem) {
    ci.name = mk_some<Identifier>("warning_flag value") &&
    ci.expression = some (e: Expression) {
      e.kind = ExpressionKind.Equal &&
      e.equal = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "warning_flag"
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.And &&
          e.and = some (bo: BinaryOperation) {
            bo.lhs_operand = some (e: Expression) {
              e.kind = ExpressionKind.Event &&
              e.event = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "loc"
              }
            } &&
            bo.rhs_operand = some (e: Expression) {
              e.kind = ExpressionKind.Call &&
              e.call = some (cll: NodeCall) {
                cll.node = "IsBadLocation" &&
                cll.arguments.length = 1 &&
                cll.arguments.element[0] = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "loc"
                }
              }
            }
          }
        }
      }
    }
  } &&
  csp.modes.length = 0 &&
  csp.imports.length = 0}) &&ct.cyber_relations.length = 0  &&
ct.safety_relations.length = 0  &&ct.safety_events.length = 0 } &&
m.component_types.element[7] = some (ct: ComponentType) {
  ct.name = "UAVToySystem" &&
  ct.ports.length = 8 &&
  ct.ports.element[0] = some(p: Port) {
    p.name = "constellation" &&
    p.mode = PortMode.In &&
    p.is_event = false &&
    p.probe = false &&
    p.ptype = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[1]
  })} &&
ct.ports.element[1] = some(p: Port) {
  p.name = "satellite_sig" &&
  p.mode = PortMode.In &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[2]})} &&
ct.ports.element[2] = some(p: Port) {
  p.name = "imu_ref" &&
  p.mode = PortMode.In &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[5]})} &&
ct.ports.element[3] = some(p: Port) {
  p.name = "delivery_location_in" &&
  p.mode = PortMode.In &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[5]})} &&
ct.ports.element[4] = some(p: Port) {
  p.name = "init" &&
  p.mode = PortMode.In &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(BoolType)} &&
ct.ports.element[5] = some(p: Port) {
  p.name = "mac" &&
  p.mode = PortMode.In &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[7]})} &&
ct.ports.element[6] = some(p: Port) {
  p.name = "status" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = true &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[3]})} &&
ct.ports.element[7] = some(p: Port) {
  p.name = "delivery_location_out" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = true &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[5]})} &&
ct.compCateg = mk_some<String>("system") &&
ct.contract = mk_some<ContractSpec>(some (csp: ContractSpec) {
  csp.constant_declarations.length = 0 &&
  csp.variable_declarations.length = 1 &&
  csp.variable_declarations.element[0] = some (sd: SymbolDefinition) {
    sd.name = "init_delivery_location" &&
    sd.dtype = some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[5]
  } &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.ConditionalExpr &&
    e.conditional_expr = some (ite: IfThenElse) {
      ite.condition = some (e: Expression) {
        e.kind = ExpressionKind.Call &&
        e.call = some (cll: NodeCall) {
          cll.node = "FirstTimeHolds" &&
          cll.arguments.length = 1 &&
          cll.arguments.element[0] = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "init"
          }
        }
      } &&
      ite.thenBranch = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "delivery_location_in"
      } &&
      ite.elseBranch = some (e: Expression) {
        e.kind = ExpressionKind.Arrow &&
        e.arrow = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "delivery_location_in"
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Pre &&
            e.pre = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "init_delivery_location"
            }
          }
        }
      }
    }
  }} &&csp.assumes.length = 3 &&
csp.assumes.element[0] = some (ci: ContractItem) {
  ci.name = mk_some<Identifier>("delivery location is not a bad location") &&
  ci.expression = some (e: Expression) {
    e.kind = ExpressionKind.Implies &&
    e.implies = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "init"
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Not &&
        e.not = some (e: Expression) {
          e.kind = ExpressionKind.Call &&
          e.call = some (cll: NodeCall) {
            cll.node = "IsBadLocation" &&
            cll.arguments.length = 1 &&
            cll.arguments.element[0] = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "delivery_location_in"
            }
          }
        }
      }
    }
  }} &&
csp.assumes.element[1] = some (ci: ContractItem) {
  ci.name = mk_some<Identifier>("initialization only happens once") &&
  ci.expression = some (e: Expression) {
    e.kind = ExpressionKind.Arrow &&
    e.arrow = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.BoolLiteral &&
        e.bool_literal = true
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Implies &&
        e.implies = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Pre &&
            e.pre = some (e: Expression) {
              e.kind = ExpressionKind.Call &&
              e.call = some (cll: NodeCall) {
                cll.node = "HasHappened" &&
                cll.arguments.length = 1 &&
                cll.arguments.element[0] = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "init"
                }
              }
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Not &&
            e.not = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "init"
            }
          }
        }
      }
    }
  }} &&
csp.assumes.element[2] = some (ci: ContractItem) {
  ci.name = mk_some<Identifier>("mac value") &&
  ci.expression = some (e: Expression) {
    e.kind = ExpressionKind.Equal &&
    e.equal = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "mac"
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Call &&
        e.call = some (cll: NodeCall) {
          cll.node = "ComputeMAC" &&
          cll.arguments.length = 1 &&
          cll.arguments.element[0] = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "delivery_location_in"
          }
        }
      }
    }
  }} &&csp.guarantees.length = 2 &&
csp.guarantees.element[0] = some (ci: ContractItem) {
  ci.name = mk_some<Identifier>("P1: UAV system delivers only if delivery location is the one provided in the initialization") &&
  ci.expression = some (e: Expression) {
    e.kind = ExpressionKind.Implies &&
    e.implies = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Equal &&
        e.equal = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "status"
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "Confirmed"
          }
        }
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Equal &&
        e.equal = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "delivery_location_out"
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "init_delivery_location"
          }
        }
      }
    }
  }} &&
csp.guarantees.element[1] = some (ci: ContractItem) {
  ci.name = mk_some<Identifier>("P2: UAV system does not deliver in a bad location") &&
  ci.expression = some (e: Expression) {
    e.kind = ExpressionKind.Not &&
    e.not = some (e: Expression) {
      e.kind = ExpressionKind.And &&
      e.and = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Equal &&
          e.equal = some (bo: BinaryOperation) {
            bo.lhs_operand = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "status"
            } &&
            bo.rhs_operand = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "Confirmed"
            }
          }
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Call &&
          e.call = some (cll: NodeCall) {
            cll.node = "IsBadLocation" &&
            cll.arguments.length = 1 &&
            cll.arguments.element[0] = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "delivery_location_out"
            }
          }
        }
      }
    }
  }} &&csp.modes.length = 0 &&csp.imports.length = 0}) &&
ct.cyber_relations.length = 0  &&ct.safety_relations.length = 0  &&
ct.safety_events.length = 0 } &&
m.dataflow_code = mk_some<LustreProgram>(some (dfm: LustreProgram) {
  dfm.type_declarations.length = 0 &&
  dfm.constant_declarations.length = 0 &&
  dfm.contract_declarations.length = 0 &&
  dfm.node_declarations.length = 4 &&
  dfm.node_declarations.element[0] = some (nd: Node) {
    nd.name = "HasHappened" &&
    nd.is_function = false &&
    nd.is_main = false &&
    nd.input_parameters.length = 1 &&
    nd.input_parameters.element[0] = some (ip: InputParameter) {
      ip.name = "x" &&
      ip.dtype = BoolType &&
      ip.is_constant = false
    } &&
    nd.output_parameters.length = 1 &&
    nd.output_parameters.element[0] = some (op: OutputParameter) {
      op.name = "y" &&
      op.dtype = BoolType
    } &&
    nd.contract = mk_none<ContractSpec> &&
    nd.body = mk_some<NodeBody>(some (nb: NodeBody) {
      nb.constant_declarations.length = 0 &&
      nb.variable_declarations.length = 0 &&
      nb.assertions.length = 0 &&
      nb.equations.length = 1 &&
      nb.equations.element[0] = some (eq: NodeEquation) {
        eq.lhs.length = 1 &&
        eq.lhs.element[0] = "y" &&
        eq.rhs = some (e: Expression) {
          e.kind = ExpressionKind.Or &&
          e.or = some (bo: BinaryOperation) {
            bo.lhs_operand = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "x"
            } &&
            bo.rhs_operand = some (e: Expression) {
              e.kind = ExpressionKind.Arrow &&
              e.arrow = some (bo: BinaryOperation) {
                bo.lhs_operand = some (e: Expression) {
                  e.kind = ExpressionKind.BoolLiteral &&
                  e.bool_literal = false
                } &&
                bo.rhs_operand = some (e: Expression) {
                  e.kind = ExpressionKind.Pre &&
                  e.pre = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "y"
                  }
                }
              }
            }
          }
        }
      } &&
      nb.properties.length = 0
    })
  } &&
  dfm.node_declarations.element[1] = some (nd: Node) {
    nd.name = "IsBadLocation" &&
    nd.is_function = false &&
    nd.is_main = false &&
    nd.input_parameters.length = 1 &&
    nd.input_parameters.element[0] = some (ip: InputParameter) {
      ip.name = "p" &&
      ip.dtype = some (dt: DataType) {
        dt.kind = DataTypeKind.UserDefined &&
        dt.user_defined_type = m.type_declarations.element[5]
    } &&
    ip.is_constant = false
  } &&
  nd.output_parameters.length = 1 &&
  nd.output_parameters.element[0] = some (op: OutputParameter) {
    op.name = "f" &&
    op.dtype = BoolType
  } &&
  nd.contract = mk_none<ContractSpec> &&
  nd.body = mk_some<NodeBody>(some (nb: NodeBody) {
    nb.constant_declarations.length = 0 &&
    nb.variable_declarations.length = 0 &&
    nb.assertions.length = 0 &&
    nb.equations.length = 1 &&
    nb.equations.element[0] = some (eq: NodeEquation) {
      eq.lhs.length = 1 &&
      eq.lhs.element[0] = "f" &&
      eq.rhs = some (e: Expression) {
        e.kind = ExpressionKind.And &&
        e.and = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.And &&
            e.and = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.LessThanOrEqualTo &&
                e.less_than_or_equal_to = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.RealLiteral &&
                    e.real_literal = 25.0
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.RecordProjection &&
                    e.record_projection = some (rp: RecordProjection) {
                      rp.record_reference = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "p"
                      } &&
                      rp.field_id = "latitude"
                    }
                  }
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.LessThanOrEqualTo &&
                e.less_than_or_equal_to = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.RecordProjection &&
                    e.record_projection = some (rp: RecordProjection) {
                      rp.record_reference = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "p"
                      } &&
                      rp.field_id = "latitude"
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.RealLiteral &&
                    e.real_literal = 50.0
                  }
                }
              }
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.And &&
            e.and = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.LessThanOrEqualTo &&
                e.less_than_or_equal_to = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Negative &&
                    e.negative = some (e: Expression) {
                      e.kind = ExpressionKind.RealLiteral &&
                      e.real_literal = 130.0
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.RecordProjection &&
                    e.record_projection = some (rp: RecordProjection) {
                      rp.record_reference = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "p"
                      } &&
                      rp.field_id = "longitude"
                    }
                  }
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.LessThanOrEqualTo &&
                e.less_than_or_equal_to = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.RecordProjection &&
                    e.record_projection = some (rp: RecordProjection) {
                      rp.record_reference = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "p"
                      } &&
                      rp.field_id = "longitude"
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Negative &&
                    e.negative = some (e: Expression) {
                      e.kind = ExpressionKind.RealLiteral &&
                      e.real_literal = 60.0
                    }
                  }
                }
              }
            }
          }
        }
      }
    } &&
    nb.properties.length = 0
  })} &&
dfm.node_declarations.element[2] = some (nd: Node) {
  nd.name = "ComputeMAC" &&
  nd.is_function = false &&
  nd.is_main = false &&
  nd.input_parameters.length = 1 &&
  nd.input_parameters.element[0] = some (ip: InputParameter) {
    ip.name = "p" &&
    ip.dtype = some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[5]
  } &&
  ip.is_constant = false} &&nd.output_parameters.length = 1 &&
nd.output_parameters.element[0] = some (op: OutputParameter) {
  op.name = "mac" &&
  op.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[7]}} &&
nd.contract = mk_none<ContractSpec> &&
nd.body = mk_some<NodeBody>(some (nb: NodeBody) {
  nb.constant_declarations.length = 0 &&
  nb.variable_declarations.length = 0 &&
  nb.assertions.length = 0 &&
  nb.equations.length = 1 &&
  nb.equations.element[0] = some (eq: NodeEquation) {
    eq.lhs.length = 1 &&
    eq.lhs.element[0] = "mac" &&
    eq.rhs = some (e: Expression) {
      e.kind = ExpressionKind.RecordLiteral &&
      e.record_literal = some (rl: RecordLiteral) {
        rl.record_type = "MAC.impl" &&
        rl.field_definitions.length = 2 &&
        rl.field_definitions.element[0] = some (fd: FieldDefinition) {
          fd.field_id = "x" &&
          fd.field_value = some (e: Expression) {
            e.kind = ExpressionKind.Div &&
            e.div = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.RecordProjection &&
                e.record_projection = some (rp: RecordProjection) {
                  rp.record_reference = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "p"
                  } &&
                  rp.field_id = "latitude"
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.RealLiteral &&
                e.real_literal = 2.0
              }
            }
          }
        } &&
        rl.field_definitions.element[1] = some (fd: FieldDefinition) {
          fd.field_id = "y" &&
          fd.field_value = some (e: Expression) {
            e.kind = ExpressionKind.Div &&
            e.div = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.RecordProjection &&
                e.record_projection = some (rp: RecordProjection) {
                  rp.record_reference = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "p"
                  } &&
                  rp.field_id = "longitude"
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.RealLiteral &&
                e.real_literal = 2.0
              }
            }
          }
        }
      }
    }
  } &&
  nb.properties.length = 0})} &&
dfm.node_declarations.element[3] = some (nd: Node) {
  nd.name = "FirstTimeHolds" &&
  nd.is_function = false &&
  nd.is_main = false &&
  nd.input_parameters.length = 1 &&
  nd.input_parameters.element[0] = some (ip: InputParameter) {
    ip.name = "x" &&
    ip.dtype = BoolType &&
    ip.is_constant = false
  } &&
  nd.output_parameters.length = 1 &&
  nd.output_parameters.element[0] = some (op: OutputParameter) {
    op.name = "r" &&
    op.dtype = BoolType
  } &&
  nd.contract = mk_none<ContractSpec> &&
  nd.body = mk_some<NodeBody>(some (nb: NodeBody) {
    nb.constant_declarations.length = 0 &&
    nb.variable_declarations.length = 0 &&
    nb.assertions.length = 0 &&
    nb.equations.length = 1 &&
    nb.equations.element[0] = some (eq: NodeEquation) {
      eq.lhs.length = 1 &&
      eq.lhs.element[0] = "r" &&
      eq.rhs = some (e: Expression) {
        e.kind = ExpressionKind.Arrow &&
        e.arrow = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "x"
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.And &&
            e.and = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Not &&
                e.not = some (e: Expression) {
                  e.kind = ExpressionKind.Pre &&
                  e.pre = some (e: Expression) {
                    e.kind = ExpressionKind.Call &&
                    e.call = some (cll: NodeCall) {
                      cll.node = "HasHappened" &&
                      cll.arguments.length = 1 &&
                      cll.arguments.element[0] = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "x"
                      }
                    }
                  }
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "x"
              }
            }
          }
        }
      }
    } &&
    nb.properties.length = 0
  })}}) &&m.component_impl.length = 2 &&
m.component_impl.element[0] = some (ci: ComponentImpl) {
  ci.name = "DeliveryManager.Impl" &&
  ci.ctype = m.component_types.element[0] &&
  ci.kind = ComponentImplKind.Block_Impl &&
  ci.block_impl = some (imp: BlockImpl) {
    imp.subcomponents.length = 3 &&
    imp.subcomponents.element[0] = some (ci: ComponentInstance) {
      ci.name = "dd" &&
      ci.kind = ComponentInstanceKind.Specification &&
      ci.specification = m.component_types.element[1] &&
      ci.attributes.length = 42 &&
       ci.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "zeroize" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "userAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "tamperProtection" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "systemAccessControl" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[4] = some (ga: GenericAttribute) {
         ga.name = "supplyChainSecurity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[5] = some (ga: GenericAttribute) {
         ga.name = "Supply_Chain_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[6] = some (ga: GenericAttribute) {
         ga.name = "strongCryptoAlgorithms" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[7] = some (ga: GenericAttribute) {
         ga.name = "staticCodeAnalysis" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[8] = some (ga: GenericAttribute) {
         ga.name = "Sniffing_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[9] = some (ga: GenericAttribute) {
         ga.name = "secureBoot" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[10] = some (ga: GenericAttribute) {
         ga.name = "resourceIsolation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[11] = some (ga: GenericAttribute) {
         ga.name = "resourceAvailability" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[12] = some (ga: GenericAttribute) {
         ga.name = "removeIdentifyingInformation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[13] = some (ga: GenericAttribute) {
         ga.name = "remoteAttestation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[14] = some (ga: GenericAttribute) {
         ga.name = "physicalAccessControl" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[15] = some (ga: GenericAttribute) {
         ga.name = "Physical_Theft_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[16] = some (ga: GenericAttribute) {
         ga.name = "pedigree" &&
         ga.atype = String &&
         ga.value = "COTS"
         
      } &&
       ci.attributes.element[17] = some (ga: GenericAttribute) {
         ga.name = "memoryProtection" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[18] = some (ga: GenericAttribute) {
         ga.name = "logging" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[19] = some (ga: GenericAttribute) {
         ga.name = "Interception_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[20] = some (ga: GenericAttribute) {
         ga.name = "insideTrustedBoundary" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[21] = some (ga: GenericAttribute) {
         ga.name = "inputValidation" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[22] = some (ga: GenericAttribute) {
         ga.name = "Identity_Spoofing_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[23] = some (ga: GenericAttribute) {
         ga.name = "heterogeneity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[24] = some (ga: GenericAttribute) {
         ga.name = "hasSensitiveInfo" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[25] = some (ga: GenericAttribute) {
         ga.name = "Hardware_Integrity_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[26] = some (ga: GenericAttribute) {
         ga.name = "Flooding_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[27] = some (ga: GenericAttribute) {
         ga.name = "Fault_Injection_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[28] = some (ga: GenericAttribute) {
         ga.name = "failSafe" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[29] = some (ga: GenericAttribute) {
         ga.name = "Excessive_Allocation_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[30] = some (ga: GenericAttribute) {
         ga.name = "encryptedStorage" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[31] = some (ga: GenericAttribute) {
         ga.name = "dosProtection" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[32] = some (ga: GenericAttribute) {
         ga.name = "Configuration_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[33] = some (ga: GenericAttribute) {
         ga.name = "componentType" &&
         ga.atype = String &&
         ga.value = "SwHwHybrid"
         
      } &&
       ci.attributes.element[34] = some (ga: GenericAttribute) {
         ga.name = "category" &&
         ga.atype = String &&
         ga.value = "Unknown"
         
      } &&
       ci.attributes.element[35] = some (ga: GenericAttribute) {
         ga.name = "canReceiveSWUpdate" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[36] = some (ga: GenericAttribute) {
         ga.name = "canReceiveConfigUpdate" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[37] = some (ga: GenericAttribute) {
         ga.name = "Buffer_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[38] = some (ga: GenericAttribute) {
         ga.name = "Brute_Force_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[39] = some (ga: GenericAttribute) {
         ga.name = "auditMessageResponses" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[40] = some (ga: GenericAttribute) {
         ga.name = "antiJamming" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[41] = some (ga: GenericAttribute) {
         ga.name = "adversariallyTestedForTrojanOrLogicBomb" &&
         ga.atype = Int &&
         ga.value = "7"
         
      }
    } &&
    imp.subcomponents.element[1] = some (ci: ComponentInstance) {
      ci.name = "imu" &&
      ci.kind = ComponentInstanceKind.Specification &&
      ci.specification = m.component_types.element[2] &&
      ci.attributes.length = 42 &&
       ci.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "zeroize" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "userAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "tamperProtection" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "systemAccessControl" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[4] = some (ga: GenericAttribute) {
         ga.name = "supplyChainSecurity" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[5] = some (ga: GenericAttribute) {
         ga.name = "Supply_Chain_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[6] = some (ga: GenericAttribute) {
         ga.name = "strongCryptoAlgorithms" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[7] = some (ga: GenericAttribute) {
         ga.name = "staticCodeAnalysis" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[8] = some (ga: GenericAttribute) {
         ga.name = "Sniffing_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[9] = some (ga: GenericAttribute) {
         ga.name = "secureBoot" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[10] = some (ga: GenericAttribute) {
         ga.name = "resourceIsolation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[11] = some (ga: GenericAttribute) {
         ga.name = "resourceAvailability" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[12] = some (ga: GenericAttribute) {
         ga.name = "removeIdentifyingInformation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[13] = some (ga: GenericAttribute) {
         ga.name = "remoteAttestation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[14] = some (ga: GenericAttribute) {
         ga.name = "physicalAccessControl" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[15] = some (ga: GenericAttribute) {
         ga.name = "Physical_Theft_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[16] = some (ga: GenericAttribute) {
         ga.name = "pedigree" &&
         ga.atype = String &&
         ga.value = "Sourced"
         
      } &&
       ci.attributes.element[17] = some (ga: GenericAttribute) {
         ga.name = "memoryProtection" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[18] = some (ga: GenericAttribute) {
         ga.name = "logging" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[19] = some (ga: GenericAttribute) {
         ga.name = "Interception_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[20] = some (ga: GenericAttribute) {
         ga.name = "insideTrustedBoundary" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[21] = some (ga: GenericAttribute) {
         ga.name = "inputValidation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[22] = some (ga: GenericAttribute) {
         ga.name = "Identity_Spoofing_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[23] = some (ga: GenericAttribute) {
         ga.name = "heterogeneity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[24] = some (ga: GenericAttribute) {
         ga.name = "hasSensitiveInfo" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[25] = some (ga: GenericAttribute) {
         ga.name = "Hardware_Integrity_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[26] = some (ga: GenericAttribute) {
         ga.name = "Flooding_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[27] = some (ga: GenericAttribute) {
         ga.name = "Fault_Injection_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[28] = some (ga: GenericAttribute) {
         ga.name = "failSafe" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[29] = some (ga: GenericAttribute) {
         ga.name = "Excessive_Allocation_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[30] = some (ga: GenericAttribute) {
         ga.name = "encryptedStorage" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[31] = some (ga: GenericAttribute) {
         ga.name = "dosProtection" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[32] = some (ga: GenericAttribute) {
         ga.name = "Configuration_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[33] = some (ga: GenericAttribute) {
         ga.name = "componentType" &&
         ga.atype = String &&
         ga.value = "SwHwHybrid"
         
      } &&
       ci.attributes.element[34] = some (ga: GenericAttribute) {
         ga.name = "category" &&
         ga.atype = String &&
         ga.value = "IMU"
         
      } &&
       ci.attributes.element[35] = some (ga: GenericAttribute) {
         ga.name = "canReceiveSWUpdate" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[36] = some (ga: GenericAttribute) {
         ga.name = "canReceiveConfigUpdate" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[37] = some (ga: GenericAttribute) {
         ga.name = "Buffer_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[38] = some (ga: GenericAttribute) {
         ga.name = "Brute_Force_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[39] = some (ga: GenericAttribute) {
         ga.name = "auditMessageResponses" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[40] = some (ga: GenericAttribute) {
         ga.name = "antiJamming" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[41] = some (ga: GenericAttribute) {
         ga.name = "adversariallyTestedForTrojanOrLogicBomb" &&
         ga.atype = Int &&
         ga.value = "0"
         
      }
    } &&
    imp.subcomponents.element[2] = some (ci: ComponentInstance) {
      ci.name = "gps" &&
      ci.kind = ComponentInstanceKind.Specification &&
      ci.specification = m.component_types.element[3] &&
      ci.attributes.length = 42 &&
       ci.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "zeroize" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "userAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "tamperProtection" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "systemAccessControl" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[4] = some (ga: GenericAttribute) {
         ga.name = "supplyChainSecurity" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[5] = some (ga: GenericAttribute) {
         ga.name = "Supply_Chain_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[6] = some (ga: GenericAttribute) {
         ga.name = "strongCryptoAlgorithms" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[7] = some (ga: GenericAttribute) {
         ga.name = "staticCodeAnalysis" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[8] = some (ga: GenericAttribute) {
         ga.name = "Sniffing_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[9] = some (ga: GenericAttribute) {
         ga.name = "secureBoot" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[10] = some (ga: GenericAttribute) {
         ga.name = "resourceIsolation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[11] = some (ga: GenericAttribute) {
         ga.name = "resourceAvailability" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[12] = some (ga: GenericAttribute) {
         ga.name = "removeIdentifyingInformation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[13] = some (ga: GenericAttribute) {
         ga.name = "remoteAttestation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[14] = some (ga: GenericAttribute) {
         ga.name = "physicalAccessControl" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[15] = some (ga: GenericAttribute) {
         ga.name = "Physical_Theft_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[16] = some (ga: GenericAttribute) {
         ga.name = "pedigree" &&
         ga.atype = String &&
         ga.value = "Sourced"
         
      } &&
       ci.attributes.element[17] = some (ga: GenericAttribute) {
         ga.name = "memoryProtection" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[18] = some (ga: GenericAttribute) {
         ga.name = "logging" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[19] = some (ga: GenericAttribute) {
         ga.name = "Interception_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[20] = some (ga: GenericAttribute) {
         ga.name = "insideTrustedBoundary" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[21] = some (ga: GenericAttribute) {
         ga.name = "inputValidation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[22] = some (ga: GenericAttribute) {
         ga.name = "Identity_Spoofing_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[23] = some (ga: GenericAttribute) {
         ga.name = "heterogeneity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[24] = some (ga: GenericAttribute) {
         ga.name = "hasSensitiveInfo" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[25] = some (ga: GenericAttribute) {
         ga.name = "Hardware_Integrity_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[26] = some (ga: GenericAttribute) {
         ga.name = "Flooding_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[27] = some (ga: GenericAttribute) {
         ga.name = "Fault_Injection_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[28] = some (ga: GenericAttribute) {
         ga.name = "failSafe" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[29] = some (ga: GenericAttribute) {
         ga.name = "Excessive_Allocation_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[30] = some (ga: GenericAttribute) {
         ga.name = "encryptedStorage" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[31] = some (ga: GenericAttribute) {
         ga.name = "dosProtection" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[32] = some (ga: GenericAttribute) {
         ga.name = "Configuration_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[33] = some (ga: GenericAttribute) {
         ga.name = "componentType" &&
         ga.atype = String &&
         ga.value = "SwHwHybrid"
         
      } &&
       ci.attributes.element[34] = some (ga: GenericAttribute) {
         ga.name = "category" &&
         ga.atype = String &&
         ga.value = "GPS"
         
      } &&
       ci.attributes.element[35] = some (ga: GenericAttribute) {
         ga.name = "canReceiveSWUpdate" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[36] = some (ga: GenericAttribute) {
         ga.name = "canReceiveConfigUpdate" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[37] = some (ga: GenericAttribute) {
         ga.name = "Buffer_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[38] = some (ga: GenericAttribute) {
         ga.name = "Brute_Force_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[39] = some (ga: GenericAttribute) {
         ga.name = "auditMessageResponses" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[40] = some (ga: GenericAttribute) {
         ga.name = "antiJamming" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[41] = some (ga: GenericAttribute) {
         ga.name = "adversariallyTestedForTrojanOrLogicBomb" &&
         ga.atype = Int &&
         ga.value = "0"
         
      }
    } &&
    imp.connections.length = 11 &&
    imp.connections.element[0] = some (c: Connection) {
      c.name = "i1" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Untrusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.ComponentCE &&
        src.component_port = m.component_types.element[0].ports.element[3]
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[0] &&
          sp.port = m.component_types.element[1].ports.element[0]
        }
      }
    } &&
    imp.connections.element[1] = some (c: Connection) {
      c.name = "i2" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Untrusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.ComponentCE &&
        src.component_port = m.component_types.element[0].ports.element[4]
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[0] &&
          sp.port = m.component_types.element[1].ports.element[1]
        }
      }
    } &&
    imp.connections.element[2] = some (c: Connection) {
      c.name = "i3" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Untrusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.ComponentCE &&
        src.component_port = m.component_types.element[0].ports.element[2]
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[1] &&
          sp.port = m.component_types.element[2].ports.element[0]
        }
      }
    } &&
    imp.connections.element[3] = some (c: Connection) {
      c.name = "i4" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Untrusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.ComponentCE &&
        src.component_port = m.component_types.element[0].ports.element[4]
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[1] &&
          sp.port = m.component_types.element[2].ports.element[1]
        }
      }
    } &&
    imp.connections.element[4] = some (c: Connection) {
      c.name = "i5" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Untrusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.ComponentCE &&
        src.component_port = m.component_types.element[0].ports.element[0]
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[2] &&
          sp.port = m.component_types.element[3].ports.element[0]
        }
      }
    } &&
    imp.connections.element[5] = some (c: Connection) {
      c.name = "i6" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Untrusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.ComponentCE &&
        src.component_port = m.component_types.element[0].ports.element[1]
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[2] &&
          sp.port = m.component_types.element[3].ports.element[1]
        }
      }
    } &&
    imp.connections.element[6] = some (c: Connection) {
      c.name = "i7" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Untrusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.ComponentCE &&
        src.component_port = m.component_types.element[0].ports.element[4]
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[2] &&
          sp.port = m.component_types.element[3].ports.element[2]
        }
      }
    } &&
    imp.connections.element[7] = some (c: Connection) {
      c.name = "i8" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Untrusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.ComponentCE &&
        src.component_port = m.component_types.element[0].ports.element[5]
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[0] &&
          sp.port = m.component_types.element[1].ports.element[2]
        }
      }
    } &&
    imp.connections.element[8] = some (c: Connection) {
      c.name = "o1" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[0] &&
          sp.port = m.component_types.element[1].ports.element[3]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.ComponentCE &&
        dst.component_port = m.component_types.element[0].ports.element[8]
      }
    } &&
    imp.connections.element[9] = some (c: Connection) {
      c.name = "o2" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[1] &&
          sp.port = m.component_types.element[2].ports.element[2]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.ComponentCE &&
        dst.component_port = m.component_types.element[0].ports.element[6]
      }
    } &&
    imp.connections.element[10] = some (c: Connection) {
      c.name = "o3" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[2] &&
          sp.port = m.component_types.element[3].ports.element[3]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.ComponentCE &&
        dst.component_port = m.component_types.element[0].ports.element[7]
      }
    }
  }} &&
m.component_impl.element[1] = some (ci: ComponentImpl) {
  ci.name = "UAVToySystem.Impl" &&
  ci.ctype = m.component_types.element[7] &&
  ci.kind = ComponentImplKind.Block_Impl &&
  ci.block_impl = some (imp: BlockImpl) {
    imp.subcomponents.length = 4 &&
    imp.subcomponents.element[0] = some (ci: ComponentInstance) {
      ci.name = "dm" &&
      ci.kind = ComponentInstanceKind.Implementation &&
      ci.implementation = m.component_impl.element[0] &&
      ci.attributes.length = 42 &&
       ci.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "zeroize" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "userAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "tamperProtection" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "systemAccessControl" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[4] = some (ga: GenericAttribute) {
         ga.name = "supplyChainSecurity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[5] = some (ga: GenericAttribute) {
         ga.name = "Supply_Chain_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[6] = some (ga: GenericAttribute) {
         ga.name = "strongCryptoAlgorithms" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[7] = some (ga: GenericAttribute) {
         ga.name = "staticCodeAnalysis" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[8] = some (ga: GenericAttribute) {
         ga.name = "Sniffing_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[9] = some (ga: GenericAttribute) {
         ga.name = "secureBoot" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[10] = some (ga: GenericAttribute) {
         ga.name = "resourceIsolation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[11] = some (ga: GenericAttribute) {
         ga.name = "resourceAvailability" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[12] = some (ga: GenericAttribute) {
         ga.name = "removeIdentifyingInformation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[13] = some (ga: GenericAttribute) {
         ga.name = "remoteAttestation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[14] = some (ga: GenericAttribute) {
         ga.name = "physicalAccessControl" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[15] = some (ga: GenericAttribute) {
         ga.name = "Physical_Theft_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[16] = some (ga: GenericAttribute) {
         ga.name = "pedigree" &&
         ga.atype = String &&
         ga.value = "COTS"
         
      } &&
       ci.attributes.element[17] = some (ga: GenericAttribute) {
         ga.name = "memoryProtection" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[18] = some (ga: GenericAttribute) {
         ga.name = "logging" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[19] = some (ga: GenericAttribute) {
         ga.name = "Interception_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[20] = some (ga: GenericAttribute) {
         ga.name = "insideTrustedBoundary" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[21] = some (ga: GenericAttribute) {
         ga.name = "inputValidation" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[22] = some (ga: GenericAttribute) {
         ga.name = "Identity_Spoofing_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[23] = some (ga: GenericAttribute) {
         ga.name = "heterogeneity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[24] = some (ga: GenericAttribute) {
         ga.name = "hasSensitiveInfo" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[25] = some (ga: GenericAttribute) {
         ga.name = "Hardware_Integrity_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[26] = some (ga: GenericAttribute) {
         ga.name = "Flooding_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[27] = some (ga: GenericAttribute) {
         ga.name = "Fault_Injection_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[28] = some (ga: GenericAttribute) {
         ga.name = "failSafe" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[29] = some (ga: GenericAttribute) {
         ga.name = "Excessive_Allocation_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[30] = some (ga: GenericAttribute) {
         ga.name = "encryptedStorage" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[31] = some (ga: GenericAttribute) {
         ga.name = "dosProtection" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[32] = some (ga: GenericAttribute) {
         ga.name = "Configuration_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[33] = some (ga: GenericAttribute) {
         ga.name = "componentType" &&
         ga.atype = String &&
         ga.value = "SwHwHybrid"
         
      } &&
       ci.attributes.element[34] = some (ga: GenericAttribute) {
         ga.name = "category" &&
         ga.atype = String &&
         ga.value = "Unknown"
         
      } &&
       ci.attributes.element[35] = some (ga: GenericAttribute) {
         ga.name = "canReceiveSWUpdate" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[36] = some (ga: GenericAttribute) {
         ga.name = "canReceiveConfigUpdate" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[37] = some (ga: GenericAttribute) {
         ga.name = "Buffer_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[38] = some (ga: GenericAttribute) {
         ga.name = "Brute_Force_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[39] = some (ga: GenericAttribute) {
         ga.name = "auditMessageResponses" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[40] = some (ga: GenericAttribute) {
         ga.name = "antiJamming" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[41] = some (ga: GenericAttribute) {
         ga.name = "adversariallyTestedForTrojanOrLogicBomb" &&
         ga.atype = Int &&
         ga.value = "7"
         
      }
    } &&
    imp.subcomponents.element[1] = some (ci: ComponentInstance) {
      ci.name = "sbus" &&
      ci.kind = ComponentInstanceKind.Specification &&
      ci.specification = m.component_types.element[4] &&
      ci.attributes.length = 42 &&
       ci.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "zeroize" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "userAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "tamperProtection" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "systemAccessControl" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[4] = some (ga: GenericAttribute) {
         ga.name = "supplyChainSecurity" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[5] = some (ga: GenericAttribute) {
         ga.name = "Supply_Chain_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[6] = some (ga: GenericAttribute) {
         ga.name = "strongCryptoAlgorithms" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[7] = some (ga: GenericAttribute) {
         ga.name = "staticCodeAnalysis" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[8] = some (ga: GenericAttribute) {
         ga.name = "Sniffing_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[9] = some (ga: GenericAttribute) {
         ga.name = "secureBoot" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[10] = some (ga: GenericAttribute) {
         ga.name = "resourceIsolation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[11] = some (ga: GenericAttribute) {
         ga.name = "resourceAvailability" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[12] = some (ga: GenericAttribute) {
         ga.name = "removeIdentifyingInformation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[13] = some (ga: GenericAttribute) {
         ga.name = "remoteAttestation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[14] = some (ga: GenericAttribute) {
         ga.name = "physicalAccessControl" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[15] = some (ga: GenericAttribute) {
         ga.name = "Physical_Theft_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[16] = some (ga: GenericAttribute) {
         ga.name = "pedigree" &&
         ga.atype = String &&
         ga.value = "Sourced"
         
      } &&
       ci.attributes.element[17] = some (ga: GenericAttribute) {
         ga.name = "memoryProtection" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[18] = some (ga: GenericAttribute) {
         ga.name = "logging" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[19] = some (ga: GenericAttribute) {
         ga.name = "Interception_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[20] = some (ga: GenericAttribute) {
         ga.name = "insideTrustedBoundary" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[21] = some (ga: GenericAttribute) {
         ga.name = "inputValidation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[22] = some (ga: GenericAttribute) {
         ga.name = "Identity_Spoofing_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[23] = some (ga: GenericAttribute) {
         ga.name = "heterogeneity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[24] = some (ga: GenericAttribute) {
         ga.name = "hasSensitiveInfo" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[25] = some (ga: GenericAttribute) {
         ga.name = "Hardware_Integrity_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[26] = some (ga: GenericAttribute) {
         ga.name = "Flooding_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[27] = some (ga: GenericAttribute) {
         ga.name = "Fault_Injection_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[28] = some (ga: GenericAttribute) {
         ga.name = "failSafe" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[29] = some (ga: GenericAttribute) {
         ga.name = "Excessive_Allocation_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[30] = some (ga: GenericAttribute) {
         ga.name = "encryptedStorage" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[31] = some (ga: GenericAttribute) {
         ga.name = "dosProtection" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[32] = some (ga: GenericAttribute) {
         ga.name = "Configuration_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[33] = some (ga: GenericAttribute) {
         ga.name = "componentType" &&
         ga.atype = String &&
         ga.value = "SwHwHybrid"
         
      } &&
       ci.attributes.element[34] = some (ga: GenericAttribute) {
         ga.name = "category" &&
         ga.atype = String &&
         ga.value = "Unknown"
         
      } &&
       ci.attributes.element[35] = some (ga: GenericAttribute) {
         ga.name = "canReceiveSWUpdate" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[36] = some (ga: GenericAttribute) {
         ga.name = "canReceiveConfigUpdate" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[37] = some (ga: GenericAttribute) {
         ga.name = "Buffer_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[38] = some (ga: GenericAttribute) {
         ga.name = "Brute_Force_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[39] = some (ga: GenericAttribute) {
         ga.name = "auditMessageResponses" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[40] = some (ga: GenericAttribute) {
         ga.name = "antiJamming" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[41] = some (ga: GenericAttribute) {
         ga.name = "adversariallyTestedForTrojanOrLogicBomb" &&
         ga.atype = Int &&
         ga.value = "0"
         
      }
    } &&
    imp.subcomponents.element[2] = some (ci: ComponentInstance) {
      ci.name = "contr" &&
      ci.kind = ComponentInstanceKind.Specification &&
      ci.specification = m.component_types.element[5] &&
      ci.attributes.length = 42 &&
       ci.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "zeroize" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "userAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "tamperProtection" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "systemAccessControl" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[4] = some (ga: GenericAttribute) {
         ga.name = "supplyChainSecurity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[5] = some (ga: GenericAttribute) {
         ga.name = "Supply_Chain_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[6] = some (ga: GenericAttribute) {
         ga.name = "strongCryptoAlgorithms" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[7] = some (ga: GenericAttribute) {
         ga.name = "staticCodeAnalysis" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[8] = some (ga: GenericAttribute) {
         ga.name = "Sniffing_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[9] = some (ga: GenericAttribute) {
         ga.name = "secureBoot" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[10] = some (ga: GenericAttribute) {
         ga.name = "resourceIsolation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[11] = some (ga: GenericAttribute) {
         ga.name = "resourceAvailability" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[12] = some (ga: GenericAttribute) {
         ga.name = "removeIdentifyingInformation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[13] = some (ga: GenericAttribute) {
         ga.name = "remoteAttestation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[14] = some (ga: GenericAttribute) {
         ga.name = "physicalAccessControl" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[15] = some (ga: GenericAttribute) {
         ga.name = "Physical_Theft_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[16] = some (ga: GenericAttribute) {
         ga.name = "pedigree" &&
         ga.atype = String &&
         ga.value = "InternallyDeveloped"
         
      } &&
       ci.attributes.element[17] = some (ga: GenericAttribute) {
         ga.name = "memoryProtection" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[18] = some (ga: GenericAttribute) {
         ga.name = "logging" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[19] = some (ga: GenericAttribute) {
         ga.name = "Interception_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[20] = some (ga: GenericAttribute) {
         ga.name = "insideTrustedBoundary" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[21] = some (ga: GenericAttribute) {
         ga.name = "inputValidation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[22] = some (ga: GenericAttribute) {
         ga.name = "Identity_Spoofing_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[23] = some (ga: GenericAttribute) {
         ga.name = "heterogeneity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[24] = some (ga: GenericAttribute) {
         ga.name = "hasSensitiveInfo" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[25] = some (ga: GenericAttribute) {
         ga.name = "Hardware_Integrity_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[26] = some (ga: GenericAttribute) {
         ga.name = "Flooding_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[27] = some (ga: GenericAttribute) {
         ga.name = "Fault_Injection_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[28] = some (ga: GenericAttribute) {
         ga.name = "failSafe" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[29] = some (ga: GenericAttribute) {
         ga.name = "Excessive_Allocation_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[30] = some (ga: GenericAttribute) {
         ga.name = "encryptedStorage" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[31] = some (ga: GenericAttribute) {
         ga.name = "dosProtection" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[32] = some (ga: GenericAttribute) {
         ga.name = "Configuration_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[33] = some (ga: GenericAttribute) {
         ga.name = "componentType" &&
         ga.atype = String &&
         ga.value = "SwHwHybrid"
         
      } &&
       ci.attributes.element[34] = some (ga: GenericAttribute) {
         ga.name = "category" &&
         ga.atype = String &&
         ga.value = "Unknown"
         
      } &&
       ci.attributes.element[35] = some (ga: GenericAttribute) {
         ga.name = "canReceiveSWUpdate" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[36] = some (ga: GenericAttribute) {
         ga.name = "canReceiveConfigUpdate" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[37] = some (ga: GenericAttribute) {
         ga.name = "Buffer_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[38] = some (ga: GenericAttribute) {
         ga.name = "Brute_Force_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[39] = some (ga: GenericAttribute) {
         ga.name = "auditMessageResponses" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[40] = some (ga: GenericAttribute) {
         ga.name = "antiJamming" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[41] = some (ga: GenericAttribute) {
         ga.name = "adversariallyTestedForTrojanOrLogicBomb" &&
         ga.atype = Int &&
         ga.value = "0"
         
      }
    } &&
    imp.subcomponents.element[3] = some (ci: ComponentInstance) {
      ci.name = "rm" &&
      ci.kind = ComponentInstanceKind.Specification &&
      ci.specification = m.component_types.element[6] &&
      ci.attributes.length = 42 &&
       ci.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "zeroize" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "userAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "tamperProtection" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "systemAccessControl" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[4] = some (ga: GenericAttribute) {
         ga.name = "supplyChainSecurity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[5] = some (ga: GenericAttribute) {
         ga.name = "Supply_Chain_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[6] = some (ga: GenericAttribute) {
         ga.name = "strongCryptoAlgorithms" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[7] = some (ga: GenericAttribute) {
         ga.name = "staticCodeAnalysis" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[8] = some (ga: GenericAttribute) {
         ga.name = "Sniffing_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[9] = some (ga: GenericAttribute) {
         ga.name = "secureBoot" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[10] = some (ga: GenericAttribute) {
         ga.name = "resourceIsolation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[11] = some (ga: GenericAttribute) {
         ga.name = "resourceAvailability" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[12] = some (ga: GenericAttribute) {
         ga.name = "removeIdentifyingInformation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[13] = some (ga: GenericAttribute) {
         ga.name = "remoteAttestation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[14] = some (ga: GenericAttribute) {
         ga.name = "physicalAccessControl" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[15] = some (ga: GenericAttribute) {
         ga.name = "Physical_Theft_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[16] = some (ga: GenericAttribute) {
         ga.name = "pedigree" &&
         ga.atype = String &&
         ga.value = "InternallyDeveloped"
         
      } &&
       ci.attributes.element[17] = some (ga: GenericAttribute) {
         ga.name = "memoryProtection" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[18] = some (ga: GenericAttribute) {
         ga.name = "logging" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[19] = some (ga: GenericAttribute) {
         ga.name = "Interception_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[20] = some (ga: GenericAttribute) {
         ga.name = "insideTrustedBoundary" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[21] = some (ga: GenericAttribute) {
         ga.name = "inputValidation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[22] = some (ga: GenericAttribute) {
         ga.name = "Identity_Spoofing_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[23] = some (ga: GenericAttribute) {
         ga.name = "heterogeneity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[24] = some (ga: GenericAttribute) {
         ga.name = "hasSensitiveInfo" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[25] = some (ga: GenericAttribute) {
         ga.name = "Hardware_Integrity_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[26] = some (ga: GenericAttribute) {
         ga.name = "Flooding_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[27] = some (ga: GenericAttribute) {
         ga.name = "Fault_Injection_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[28] = some (ga: GenericAttribute) {
         ga.name = "failSafe" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[29] = some (ga: GenericAttribute) {
         ga.name = "Excessive_Allocation_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[30] = some (ga: GenericAttribute) {
         ga.name = "encryptedStorage" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[31] = some (ga: GenericAttribute) {
         ga.name = "dosProtection" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[32] = some (ga: GenericAttribute) {
         ga.name = "Configuration_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[33] = some (ga: GenericAttribute) {
         ga.name = "componentType" &&
         ga.atype = String &&
         ga.value = "SwHwHybrid"
         
      } &&
       ci.attributes.element[34] = some (ga: GenericAttribute) {
         ga.name = "category" &&
         ga.atype = String &&
         ga.value = "Unknown"
         
      } &&
       ci.attributes.element[35] = some (ga: GenericAttribute) {
         ga.name = "canReceiveSWUpdate" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[36] = some (ga: GenericAttribute) {
         ga.name = "canReceiveConfigUpdate" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[37] = some (ga: GenericAttribute) {
         ga.name = "Buffer_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[38] = some (ga: GenericAttribute) {
         ga.name = "Brute_Force_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[39] = some (ga: GenericAttribute) {
         ga.name = "auditMessageResponses" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[40] = some (ga: GenericAttribute) {
         ga.name = "antiJamming" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[41] = some (ga: GenericAttribute) {
         ga.name = "adversariallyTestedForTrojanOrLogicBomb" &&
         ga.atype = Int &&
         ga.value = "0"
         
      }
    } &&
    imp.connections.length = 16 &&
    imp.connections.element[0] = some (c: Connection) {
      c.name = "i1" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Untrusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.ComponentCE &&
        src.component_port = m.component_types.element[7].ports.element[0]
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[0] &&
          sp.port = m.component_types.element[0].ports.element[0]
        }
      }
    } &&
    imp.connections.element[1] = some (c: Connection) {
      c.name = "i2" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Untrusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.ComponentCE &&
        src.component_port = m.component_types.element[7].ports.element[1]
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[0] &&
          sp.port = m.component_types.element[0].ports.element[1]
        }
      }
    } &&
    imp.connections.element[2] = some (c: Connection) {
      c.name = "i3" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Untrusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.ComponentCE &&
        src.component_port = m.component_types.element[7].ports.element[2]
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[0] &&
          sp.port = m.component_types.element[0].ports.element[2]
        }
      }
    } &&
    imp.connections.element[3] = some (c: Connection) {
      c.name = "i4" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Untrusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.ComponentCE &&
        src.component_port = m.component_types.element[7].ports.element[3]
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[0] &&
          sp.port = m.component_types.element[0].ports.element[3]
        }
      }
    } &&
    imp.connections.element[4] = some (c: Connection) {
      c.name = "i5" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Untrusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.ComponentCE &&
        src.component_port = m.component_types.element[7].ports.element[4]
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[0] &&
          sp.port = m.component_types.element[0].ports.element[4]
        }
      }
    } &&
    imp.connections.element[5] = some (c: Connection) {
      c.name = "i6" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Untrusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.ComponentCE &&
        src.component_port = m.component_types.element[7].ports.element[5]
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[0] &&
          sp.port = m.component_types.element[0].ports.element[5]
        }
      }
    } &&
    imp.connections.element[6] = some (c: Connection) {
      c.name = "c1" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[0] &&
          sp.port = m.component_types.element[0].ports.element[6]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[1] &&
          sp.port = m.component_types.element[4].ports.element[0]
        }
      }
    } &&
    imp.connections.element[7] = some (c: Connection) {
      c.name = "c2" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[0] &&
          sp.port = m.component_types.element[0].ports.element[7]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[1] &&
          sp.port = m.component_types.element[4].ports.element[1]
        }
      }
    } &&
    imp.connections.element[8] = some (c: Connection) {
      c.name = "c3" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[0] &&
          sp.port = m.component_types.element[0].ports.element[8]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[1] &&
          sp.port = m.component_types.element[4].ports.element[2]
        }
      }
    } &&
    imp.connections.element[9] = some (c: Connection) {
      c.name = "c4" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[1] &&
          sp.port = m.component_types.element[4].ports.element[3]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[2] &&
          sp.port = m.component_types.element[5].ports.element[0]
        }
      }
    } &&
    imp.connections.element[10] = some (c: Connection) {
      c.name = "c5" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[1] &&
          sp.port = m.component_types.element[4].ports.element[4]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[2] &&
          sp.port = m.component_types.element[5].ports.element[1]
        }
      }
    } &&
    imp.connections.element[11] = some (c: Connection) {
      c.name = "c6" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[1] &&
          sp.port = m.component_types.element[4].ports.element[5]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[2] &&
          sp.port = m.component_types.element[5].ports.element[2]
        }
      }
    } &&
    imp.connections.element[12] = some (c: Connection) {
      c.name = "c7" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[1] &&
          sp.port = m.component_types.element[4].ports.element[5]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[3] &&
          sp.port = m.component_types.element[6].ports.element[0]
        }
      }
    } &&
    imp.connections.element[13] = some (c: Connection) {
      c.name = "c8" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[3] &&
          sp.port = m.component_types.element[6].ports.element[1]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[2] &&
          sp.port = m.component_types.element[5].ports.element[3]
        }
      }
    } &&
    imp.connections.element[14] = some (c: Connection) {
      c.name = "p1" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Untrusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[2] &&
          sp.port = m.component_types.element[5].ports.element[4]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.ComponentCE &&
        dst.component_port = m.component_types.element[7].ports.element[6]
      }
    } &&
    imp.connections.element[15] = some (c: Connection) {
      c.name = "p2" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Untrusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[2] &&
          sp.port = m.component_types.element[5].ports.element[5]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.ComponentCE &&
        dst.component_port = m.component_types.element[7].ports.element[7]
      }
    }
  }} && m.cyber_requirements.length = 0  && m.safety_requirements.length = 0 
 && m.missions.length = 0 
};
