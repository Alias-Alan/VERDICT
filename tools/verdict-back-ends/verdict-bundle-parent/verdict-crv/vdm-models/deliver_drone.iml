package DeliveryDrone;

import iml.utils.*;
import iml.verdict.*;

model: Model := some (m: Model) {
  m.name = "DeliveryDrone" &&
  m.type_declarations.length = 14 &&
  m.type_declarations.element[0] = some (td: TypeDeclaration) {
    td.name = "Position" &&
    td.definition = mk_none<DataType>
  } &&
  m.type_declarations.element[1] = some (td: TypeDeclaration) {
    td.name = "DeliveryOrder" &&
    td.definition = mk_none<DataType>
  } &&
  m.type_declarations.element[2] = some (td: TypeDeclaration) {
    td.name = "DeliveryStatus" &&
    td.definition = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.Enum &&
      dt.enum_type.length = 4 &&
      dt.enum_type.element[0] = "NOT_STARTED" &&
      dt.enum_type.element[1] = "IN_PROGRESS" &&
      dt.enum_type.element[2] = "COMPLETED" &&
      dt.enum_type.element[3] = "FAILED"
    })
  } &&
  m.type_declarations.element[3] = some (td: TypeDeclaration) {
    td.name = "Constellation" &&
    td.definition = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.Enum &&
      dt.enum_type.length = 2 &&
      dt.enum_type.element[0] = "Satellite0" &&
      dt.enum_type.element[1] = "Satellite1"
    })
  } &&
  m.type_declarations.element[4] = some (td: TypeDeclaration) {
    td.name = "InputBus" &&
    td.definition = mk_none<DataType>
  } &&
  m.type_declarations.element[5] = some (td: TypeDeclaration) {
    td.name = "RadioResponse" &&
    td.definition = mk_none<DataType>
  } &&
  m.type_declarations.element[6] = some (td: TypeDeclaration) {
    td.name = "ProbeSafeLanding" &&
    td.definition = mk_none<DataType>
  } &&
  m.type_declarations.element[7] = some (td: TypeDeclaration) {
    td.name = "DeliveryPlannerState" &&
    td.definition = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.Enum &&
      dt.enum_type.length = 8 &&
      dt.enum_type.element[0] = "OFF" &&
      dt.enum_type.element[1] = "INIT" &&
      dt.enum_type.element[2] = "READY" &&
      dt.enum_type.element[3] = "LAUNCH" &&
      dt.enum_type.element[4] = "ABORT" &&
      dt.enum_type.element[5] = "FLYING_TO_DEST" &&
      dt.enum_type.element[6] = "MAKING_DELIVERY" &&
      dt.enum_type.element[7] = "RETURN_TO_TRUCK"
    })
  } &&
  m.type_declarations.element[8] = some (td: TypeDeclaration) {
    td.name = "PackageDeliveryCommand" &&
    td.definition = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.Enum &&
      dt.enum_type.length = 3 &&
      dt.enum_type.element[0] = "NO_OPERATION" &&
      dt.enum_type.element[1] = "RELEASE_PACKAGE" &&
      dt.enum_type.element[2] = "ABORT_DELIVERY"
    })
  } &&
  m.type_declarations.element[9] = some (td: TypeDeclaration) {
    td.name = "Position.impl" &&
    td.definition = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.Record &&
      dt.record_type.length = 2 &&
      dt.record_type.element[0] = some (rf: RecordField) {
        rf.name = "x" &&
        rf.dtype = RealType
      } &&
      dt.record_type.element[1] = some (rf: RecordField) {
        rf.name = "y" &&
        rf.dtype = RealType
      }
    })
  } &&
  m.type_declarations.element[10] = some (td: TypeDeclaration) {
    td.name = "DeliveryOrder.impl" &&
    td.definition = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.Record &&
      dt.record_type.length = 3 &&
      dt.record_type.element[0] = some (rf: RecordField) {
        rf.name = "target_position" &&
        rf.dtype = some (dt: DataType) {
          dt.kind = DataTypeKind.UserDefined &&
          dt.user_defined_type = m.type_declarations.element[9]
      }
    } &&
    dt.record_type.element[1] = some (rf: RecordField) {
      rf.name = "target_picture" &&
      rf.dtype = IntegerType
    } &&
    dt.record_type.element[2] = some (rf: RecordField) {
      rf.name = "item_value" &&
      rf.dtype = RealType
    }
  })
} &&
m.type_declarations.element[11] = some (td: TypeDeclaration) {
  td.name = "InputBus.impl" &&
  td.definition = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.Record &&
    dt.record_type.length = 9 &&
    dt.record_type.element[0] = some (rf: RecordField) {
      rf.name = "connected" &&
      rf.dtype = BoolType
    } &&
    dt.record_type.element[1] = some (rf: RecordField) {
      rf.name = "update_order" &&
      rf.dtype = BoolType
    } &&
    dt.record_type.element[2] = some (rf: RecordField) {
      rf.name = "order" &&
      rf.dtype = some (dt: DataType) {
        dt.kind = DataTypeKind.UserDefined &&
        dt.user_defined_type = m.type_declarations.element[10]
    }
  } &&
  dt.record_type.element[3] = some (rf: RecordField) {
    rf.name = "on_off" &&
    rf.dtype = BoolType
  } &&
  dt.record_type.element[4] = some (rf: RecordField) {
    rf.name = "abort_cmd" &&
    rf.dtype = BoolType
  } &&
  dt.record_type.element[5] = some (rf: RecordField) {
    rf.name = "constellation" &&
    rf.dtype = some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[3]
  }
} &&
dt.record_type.element[6] = some (rf: RecordField) {
  rf.name = "launch_pos" &&
  rf.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[9]
}} &&
dt.record_type.element[7] = some (rf: RecordField) {
  rf.name = "init_criteria_satisfied" &&
  rf.dtype = BoolType} &&
dt.record_type.element[8] = some (rf: RecordField) {
  rf.name = "mission_store_release_sequence" &&
  rf.dtype = BoolType}})} &&
m.type_declarations.element[12] = some (td: TypeDeclaration) {
  td.name = "RadioResponse.impl" &&
  td.definition = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.Record &&
    dt.record_type.length = 2 &&
    dt.record_type.element[0] = some (rf: RecordField) {
      rf.name = "data_available" &&
      rf.dtype = BoolType
    } &&
    dt.record_type.element[1] = some (rf: RecordField) {
      rf.name = "target_confirmed" &&
      rf.dtype = BoolType
    }
  })} &&
m.type_declarations.element[13] = some (td: TypeDeclaration) {
  td.name = "ProbeSafeLanding.impl" &&
  td.definition = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.Record &&
    dt.record_type.length = 2 &&
    dt.record_type.element[0] = some (rf: RecordField) {
      rf.name = "is_target_clear" &&
      rf.dtype = BoolType
    } &&
    dt.record_type.element[1] = some (rf: RecordField) {
      rf.name = "has_valid_marker" &&
      rf.dtype = BoolType
    }
  })} &&m.component_types.length = 13 &&
m.component_types.element[0] = some (ct: ComponentType) {
  ct.name = "GPS" &&
  ct.ports.length = 6 &&
  ct.ports.element[0] = some(p: Port) {
    p.name = "constellation" &&
    p.mode = PortMode.In &&
    p.is_event = false &&
    p.probe = false &&
    p.ptype = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[3]
  })} &&
ct.ports.element[1] = some(p: Port) {
  p.name = "satellite0_pos" &&
  p.mode = PortMode.In &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[9]})} &&
ct.ports.element[2] = some(p: Port) {
  p.name = "satellite1_pos" &&
  p.mode = PortMode.In &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[9]})} &&
ct.ports.element[3] = some(p: Port) {
  p.name = "gps_pos" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[9]})} &&
ct.ports.element[4] = some(p: Port) {
  p.name = "health_status" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(BoolType)} &&
ct.ports.element[5] = some(p: Port) {
  p.name = "probe_constellation" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = true &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[3]})} &&
ct.compCateg = mk_some<String>("system") &&
ct.contract = mk_some<ContractSpec>(some (csp: ContractSpec) {
  csp.constant_declarations.length = 0 &&
  csp.variable_declarations.length = 2 &&
  csp.variable_declarations.element[0] = some (sd: SymbolDefinition) {
    sd.name = "satellite0_selected" &&
    sd.dtype = BoolType &&
    sd.definition = some (e: Expression) {
      e.kind = ExpressionKind.Equal &&
      e.equal = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "constellation"
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "Satellite0"
        }
      }
    }
  } &&
  csp.variable_declarations.element[1] = some (sd: SymbolDefinition) {
    sd.name = "selected_satellite_pos" &&
    sd.dtype = some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[9]
  } &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.ConditionalExpr &&
    e.conditional_expr = some (ite: IfThenElse) {
      ite.condition = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "satellite0_selected"
      } &&
      ite.thenBranch = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "satellite0_pos"
      } &&
      ite.elseBranch = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "satellite1_pos"
      }
    }
  }} &&csp.assumes.length = 0 &&csp.guarantees.length = 2 &&
csp.guarantees.element[0] = some (ci: ContractItem) {
  ci.name = mk_some<Identifier>("Output: gps_pos") &&
  ci.expression = some (e: Expression) {
    e.kind = ExpressionKind.Call &&
    e.call = some (cll: NodeCall) {
      cll.node = "close_locations" &&
      cll.arguments.length = 2 &&
      cll.arguments.element[0] = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "gps_pos"
      } &&
      cll.arguments.element[1] = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "selected_satellite_pos"
      }
    }
  }} &&
csp.guarantees.element[1] = some (ci: ContractItem) {
  ci.name = mk_some<Identifier>("Output: probe_constellation") &&
  ci.expression = some (e: Expression) {
    e.kind = ExpressionKind.Equal &&
    e.equal = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "probe_constellation"
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "constellation"
      }
    }
  }} &&csp.modes.length = 0 &&csp.imports.length = 0}) &&
ct.cyber_relations.length = 2 &&
ct.cyber_relations.element[0] = some (rel: CyberRel) {
  rel.id = "gps_out_A" &&
  rel.output = some (port: CIAPort) {
    port.name = "gps_pos" &&
    port.cia = CIA.Availability
    } &&
  rel.comment = "" &&
  rel.description = "" &&
  rel.phases = "" &&
  rel.extern = ""
  } &&
ct.cyber_relations.element[1] = some (rel: CyberRel) {
  rel.id = "gps_out_I" &&
  rel.output = some (port: CIAPort) {
    port.name = "gps_pos" &&
    port.cia = CIA.Integrity
    } &&
  rel.comment = "" &&
  rel.description = "" &&
  rel.phases = "" &&
  rel.extern = ""
  } &&ct.safety_relations.length = 2 &&
ct.safety_relations.element[0] = some (rel: SafetyRel) {
  rel.id = "gps_out_UED" &&
  rel.output = some (port: IAPort) {
    port.name = "gps_pos" &&
    port.ia = IA.Integrity
    } &&
  rel.faultSrc = some (expr: SafetyExpr) {
    expr.kind = SafetyExprKind.Fault &&
    expr.fault = "ued_event"
    }
     &&
  rel.comment = "" &&
  rel.description = ""
  } &&
ct.safety_relations.element[1] = some (rel: SafetyRel) {
  rel.id = "gps_out_LOA" &&
  rel.output = some (port: IAPort) {
    port.name = "gps_pos" &&
    port.ia = IA.Availability
    } &&
  rel.faultSrc = some (expr: SafetyExpr) {
    expr.kind = SafetyExprKind.Fault &&
    expr.fault = "loa_event"
    }
     &&
  rel.comment = "" &&
  rel.description = ""
  } &&ct.safety_events.length = 2 &&
ct.safety_events.element[0] = some (ev: SafetyEvent) {
  ev.id = "ued_event" &&
  ev.probability = "1.0e-8" &&
  ev.comment = "undetected erroneous data of the GPS" &&
  ev.description = "UED"
  } &&
ct.safety_events.element[1] = some (ev: SafetyEvent) {
  ev.id = "loa_event" &&
  ev.probability = "1.0e-9" &&
  ev.comment = "loss of availability of the GPS" &&
  ev.description = "LOA"
  }} &&
m.component_types.element[1] = some (ct: ComponentType) {
  ct.name = "IMU" &&
  ct.ports.length = 4 &&
  ct.ports.element[0] = some(p: Port) {
    p.name = "launch_pos" &&
    p.mode = PortMode.In &&
    p.is_event = false &&
    p.probe = false &&
    p.ptype = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[9]
  })} &&
ct.ports.element[1] = some(p: Port) {
  p.name = "imu_pos" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[9]})} &&
ct.ports.element[2] = some(p: Port) {
  p.name = "health_status" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(BoolType)} &&
ct.ports.element[3] = some(p: Port) {
  p.name = "probe_launch_pos" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = true &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[9]})} &&
ct.compCateg = mk_some<String>("system") &&
ct.contract = mk_some<ContractSpec>(some (csp: ContractSpec) {
  csp.constant_declarations.length = 0 &&
  csp.variable_declarations.length = 0 &&
  csp.assumes.length = 0 &&
  csp.guarantees.length = 1 &&
  csp.guarantees.element[0] = some (ci: ContractItem) {
    ci.name = mk_some<Identifier>("Output: probe_launch_pos") &&
    ci.expression = some (e: Expression) {
      e.kind = ExpressionKind.Equal &&
      e.equal = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "probe_launch_pos"
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "launch_pos"
        }
      }
    }
  } &&
  csp.modes.length = 0 &&
  csp.imports.length = 0}) &&ct.cyber_relations.length = 2 &&
ct.cyber_relations.element[0] = some (rel: CyberRel) {
  rel.id = "imu_out_A" &&
  rel.output = some (port: CIAPort) {
    port.name = "imu_pos" &&
    port.cia = CIA.Availability
    } &&
  rel.comment = "" &&
  rel.description = "" &&
  rel.phases = "" &&
  rel.extern = ""
  } &&
ct.cyber_relations.element[1] = some (rel: CyberRel) {
  rel.id = "imu_out_I" &&
  rel.output = some (port: CIAPort) {
    port.name = "imu_pos" &&
    port.cia = CIA.Integrity
    } &&
  rel.comment = "" &&
  rel.description = "" &&
  rel.phases = "" &&
  rel.extern = ""
  } &&ct.safety_relations.length = 2 &&
ct.safety_relations.element[0] = some (rel: SafetyRel) {
  rel.id = "imu_out_UED" &&
  rel.output = some (port: IAPort) {
    port.name = "imu_pos" &&
    port.ia = IA.Integrity
    } &&
  rel.faultSrc = some (expr: SafetyExpr) {
    expr.kind = SafetyExprKind.Fault &&
    expr.fault = "ued_event"
    }
     &&
  rel.comment = "" &&
  rel.description = ""
  } &&
ct.safety_relations.element[1] = some (rel: SafetyRel) {
  rel.id = "imu_out_LOA" &&
  rel.output = some (port: IAPort) {
    port.name = "imu_pos" &&
    port.ia = IA.Availability
    } &&
  rel.faultSrc = some (expr: SafetyExpr) {
    expr.kind = SafetyExprKind.Fault &&
    expr.fault = "loa_event"
    }
     &&
  rel.comment = "" &&
  rel.description = ""
  } &&ct.safety_events.length = 2 &&
ct.safety_events.element[0] = some (ev: SafetyEvent) {
  ev.id = "ued_event" &&
  ev.probability = "1.0e-8" &&
  ev.comment = "undetected erroneous data of the IMU" &&
  ev.description = "UED"
  } &&
ct.safety_events.element[1] = some (ev: SafetyEvent) {
  ev.id = "loa_event" &&
  ev.probability = "1.0e-8" &&
  ev.comment = "loss of availability of the IMU" &&
  ev.description = "LOA"
  }} &&
m.component_types.element[2] = some (ct: ComponentType) {
  ct.name = "GNC" &&
  ct.ports.length = 10 &&
  ct.ports.element[0] = some(p: Port) {
    p.name = "constellation" &&
    p.mode = PortMode.In &&
    p.is_event = false &&
    p.probe = false &&
    p.ptype = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[3]
  })} &&
ct.ports.element[1] = some(p: Port) {
  p.name = "satellite0_pos" &&
  p.mode = PortMode.In &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[9]})} &&
ct.ports.element[2] = some(p: Port) {
  p.name = "satellite1_pos" &&
  p.mode = PortMode.In &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[9]})} &&
ct.ports.element[3] = some(p: Port) {
  p.name = "launch_pos" &&
  p.mode = PortMode.In &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[9]})} &&
ct.ports.element[4] = some(p: Port) {
  p.name = "gps_pos" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[9]})} &&
ct.ports.element[5] = some(p: Port) {
  p.name = "gps_health_status" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(BoolType)} &&
ct.ports.element[6] = some(p: Port) {
  p.name = "probe_constellation" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = true &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[3]})} &&
ct.ports.element[7] = some(p: Port) {
  p.name = "imu_pos" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[9]})} &&
ct.ports.element[8] = some(p: Port) {
  p.name = "imu_health_status" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(BoolType)} &&
ct.ports.element[9] = some(p: Port) {
  p.name = "probe_launch_pos" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = true &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[9]})} &&
ct.compCateg = mk_some<String>("system") &&
ct.contract = mk_none<ContractSpec> &&ct.cyber_relations.length = 0  &&
ct.safety_relations.length = 0  &&ct.safety_events.length = 0 } &&
m.component_types.element[3] = some (ct: ComponentType) {
  ct.name = "PositionEstimator" &&
  ct.ports.length = 4 &&
  ct.ports.element[0] = some(p: Port) {
    p.name = "gps_pos" &&
    p.mode = PortMode.In &&
    p.is_event = false &&
    p.probe = false &&
    p.ptype = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[9]
  })} &&
ct.ports.element[1] = some(p: Port) {
  p.name = "imu_pos" &&
  p.mode = PortMode.In &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[9]})} &&
ct.ports.element[2] = some(p: Port) {
  p.name = "pos_act_in" &&
  p.mode = PortMode.In &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[9]})} &&
ct.ports.element[3] = some(p: Port) {
  p.name = "est_pos" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[9]})} &&
ct.compCateg = mk_some<String>("system") &&
ct.contract = mk_some<ContractSpec>(some (csp: ContractSpec) {
  csp.constant_declarations.length = 0 &&
  csp.variable_declarations.length = 0 &&
  csp.assumes.length = 0 &&
  csp.guarantees.length = 1 &&
  csp.guarantees.element[0] = some (ci: ContractItem) {
    ci.name = mk_some<Identifier>("Output: est_pos") &&
    ci.expression = some (e: Expression) {
      e.kind = ExpressionKind.Call &&
      e.call = some (cll: NodeCall) {
        cll.node = "close_locations" &&
        cll.arguments.length = 2 &&
        cll.arguments.element[0] = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "est_pos"
        } &&
        cll.arguments.element[1] = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "gps_pos"
        }
      }
    }
  } &&
  csp.modes.length = 0 &&
  csp.imports.length = 0}) &&ct.cyber_relations.length = 2 &&
ct.cyber_relations.element[0] = some (rel: CyberRel) {
  rel.id = "pos_out_A" &&
  rel.output = some (port: CIAPort) {
    port.name = "est_pos" &&
    port.cia = CIA.Availability
    } &&
  rel.inputs = some (expr: CyberExpr) {
    expr.kind = CyberExprKind.Or &&
    expr.or.length = 3 &&
    expr.or.element[0] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "imu_pos" &&
        port.cia = CIA.Availability
        }
      }
       &&
    expr.or.element[1] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "gps_pos" &&
        port.cia = CIA.Availability
        }
      }
       &&
    expr.or.element[2] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "pos_act_in" &&
        port.cia = CIA.Availability
        }
      }
      }
     &&
  rel.comment = "" &&
  rel.description = "" &&
  rel.phases = "" &&
  rel.extern = ""
  } &&
ct.cyber_relations.element[1] = some (rel: CyberRel) {
  rel.id = "pos_out_I" &&
  rel.output = some (port: CIAPort) {
    port.name = "est_pos" &&
    port.cia = CIA.Integrity
    } &&
  rel.inputs = some (expr: CyberExpr) {
    expr.kind = CyberExprKind.Or &&
    expr.or.length = 3 &&
    expr.or.element[0] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "imu_pos" &&
        port.cia = CIA.Integrity
        }
      }
       &&
    expr.or.element[1] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "gps_pos" &&
        port.cia = CIA.Integrity
        }
      }
       &&
    expr.or.element[2] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "pos_act_in" &&
        port.cia = CIA.Integrity
        }
      }
      }
     &&
  rel.comment = "" &&
  rel.description = "" &&
  rel.phases = "" &&
  rel.extern = ""
  } &&ct.safety_relations.length = 2 &&
ct.safety_relations.element[0] = some (rel: SafetyRel) {
  rel.id = "pos_out_UED" &&
  rel.output = some (port: IAPort) {
    port.name = "est_pos" &&
    port.ia = IA.Integrity
    } &&
  rel.faultSrc = some (expr: SafetyExpr) {
    expr.kind = SafetyExprKind.Or &&
    expr.or.length = 4 &&
    expr.or.element[0] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Fault &&
      expr.fault = "ued_event"
      }
       &&
    expr.or.element[1] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "imu_pos" &&
        port.ia = IA.Integrity
        }
      }
       &&
    expr.or.element[2] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "gps_pos" &&
        port.ia = IA.Integrity
        }
      }
       &&
    expr.or.element[3] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "pos_act_in" &&
        port.ia = IA.Integrity
        }
      }
      }
     &&
  rel.comment = "" &&
  rel.description = ""
  } &&
ct.safety_relations.element[1] = some (rel: SafetyRel) {
  rel.id = "pos_out_LOA" &&
  rel.output = some (port: IAPort) {
    port.name = "est_pos" &&
    port.ia = IA.Availability
    } &&
  rel.faultSrc = some (expr: SafetyExpr) {
    expr.kind = SafetyExprKind.Or &&
    expr.or.length = 3 &&
    expr.or.element[0] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Fault &&
      expr.fault = "loa_event"
      }
       &&
    expr.or.element[1] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Or &&
      expr.or.length = 2 &&
      expr.or.element[0] = some (expr: SafetyExpr) {
        expr.kind = SafetyExprKind.Port &&
        expr.port = some (port: IAPort) {
          port.name = "imu_pos" &&
          port.ia = IA.Availability
          }
        }
         &&
      expr.or.element[1] = some (expr: SafetyExpr) {
        expr.kind = SafetyExprKind.Port &&
        expr.port = some (port: IAPort) {
          port.name = "gps_pos" &&
          port.ia = IA.Availability
          }
        }
        }
       &&
    expr.or.element[2] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "pos_act_in" &&
        port.ia = IA.Availability
        }
      }
      }
     &&
  rel.comment = "" &&
  rel.description = ""
  } &&ct.safety_events.length = 2 &&
ct.safety_events.element[0] = some (ev: SafetyEvent) {
  ev.id = "ued_event" &&
  ev.probability = "1.0e-9" &&
  ev.comment = "undetected erroneous data of the PositionEstimator" &&
  ev.description = "UED"
  } &&
ct.safety_events.element[1] = some (ev: SafetyEvent) {
  ev.id = "loa_event" &&
  ev.probability = "1.0e-8" &&
  ev.comment = "loss of availability of the PositionEstimator" &&
  ev.description = "LOA"
  }} &&
m.component_types.element[4] = some (ct: ComponentType) {
  ct.name = "Navigation" &&
  ct.ports.length = 8 &&
  ct.ports.element[0] = some(p: Port) {
    p.name = "est_pos" &&
    p.mode = PortMode.In &&
    p.is_event = false &&
    p.probe = false &&
    p.ptype = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[9]
  })} &&
ct.ports.element[1] = some(p: Port) {
  p.name = "dest_pos" &&
  p.mode = PortMode.In &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[9]})} &&
ct.ports.element[2] = some(p: Port) {
  p.name = "cmd" &&
  p.mode = PortMode.In &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(BoolType)} &&
ct.ports.element[3] = some(p: Port) {
  p.name = "flight_control_state" &&
  p.mode = PortMode.In &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(BoolType)} &&
ct.ports.element[4] = some(p: Port) {
  p.name = "move" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(BoolType)} &&
ct.ports.element[5] = some(p: Port) {
  p.name = "cur_pos" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[9]})} &&
ct.ports.element[6] = some(p: Port) {
  p.name = "pos_act_out" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[9]})} &&
ct.ports.element[7] = some(p: Port) {
  p.name = "probe_dest_pos" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = true &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[9]})} &&
ct.compCateg = mk_some<String>("system") &&
ct.contract = mk_some<ContractSpec>(some (csp: ContractSpec) {
  csp.constant_declarations.length = 0 &&
  csp.variable_declarations.length = 0 &&
  csp.assumes.length = 0 &&
  csp.guarantees.length = 3 &&
  csp.guarantees.element[0] = some (ci: ContractItem) {
    ci.name = mk_some<Identifier>("Output: cur_pos | Current location is computed from Estimated Position") &&
    ci.expression = some (e: Expression) {
      e.kind = ExpressionKind.Call &&
      e.call = some (cll: NodeCall) {
        cll.node = "close_locations" &&
        cll.arguments.length = 2 &&
        cll.arguments.element[0] = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "cur_pos"
        } &&
        cll.arguments.element[1] = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "est_pos"
        }
      }
    }
  } &&
  csp.guarantees.element[1] = some (ci: ContractItem) {
    ci.name = mk_some<Identifier>("Output: move") &&
    ci.expression = some (e: Expression) {
      e.kind = ExpressionKind.Equal &&
      e.equal = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "move"
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "cmd"
        }
      }
    }
  } &&
  csp.guarantees.element[2] = some (ci: ContractItem) {
    ci.name = mk_some<Identifier>("Output: probe_dest_pos") &&
    ci.expression = some (e: Expression) {
      e.kind = ExpressionKind.Equal &&
      e.equal = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "probe_dest_pos"
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "dest_pos"
        }
      }
    }
  } &&
  csp.modes.length = 0 &&
  csp.imports.length = 0}) &&ct.cyber_relations.length = 6 &&
ct.cyber_relations.element[0] = some (rel: CyberRel) {
  rel.id = "pos_act_out_A" &&
  rel.output = some (port: CIAPort) {
    port.name = "pos_act_out" &&
    port.cia = CIA.Availability
    } &&
  rel.inputs = some (expr: CyberExpr) {
    expr.kind = CyberExprKind.Or &&
    expr.or.length = 3 &&
    expr.or.element[0] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "est_pos" &&
        port.cia = CIA.Availability
        }
      }
       &&
    expr.or.element[1] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "cmd" &&
        port.cia = CIA.Availability
        }
      }
       &&
    expr.or.element[2] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "flight_control_state" &&
        port.cia = CIA.Availability
        }
      }
      }
     &&
  rel.comment = "" &&
  rel.description = "" &&
  rel.phases = "" &&
  rel.extern = ""
  } &&
ct.cyber_relations.element[1] = some (rel: CyberRel) {
  rel.id = "pos_act_out_I" &&
  rel.output = some (port: CIAPort) {
    port.name = "pos_act_out" &&
    port.cia = CIA.Integrity
    } &&
  rel.inputs = some (expr: CyberExpr) {
    expr.kind = CyberExprKind.Or &&
    expr.or.length = 3 &&
    expr.or.element[0] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "est_pos" &&
        port.cia = CIA.Integrity
        }
      }
       &&
    expr.or.element[1] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "cmd" &&
        port.cia = CIA.Integrity
        }
      }
       &&
    expr.or.element[2] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "flight_control_state" &&
        port.cia = CIA.Integrity
        }
      }
      }
     &&
  rel.comment = "" &&
  rel.description = "" &&
  rel.phases = "" &&
  rel.extern = ""
  } &&
ct.cyber_relations.element[2] = some (rel: CyberRel) {
  rel.id = "nav_location_out_A" &&
  rel.output = some (port: CIAPort) {
    port.name = "cur_pos" &&
    port.cia = CIA.Availability
    } &&
  rel.inputs = some (expr: CyberExpr) {
    expr.kind = CyberExprKind.Or &&
    expr.or.length = 3 &&
    expr.or.element[0] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "est_pos" &&
        port.cia = CIA.Availability
        }
      }
       &&
    expr.or.element[1] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "cmd" &&
        port.cia = CIA.Availability
        }
      }
       &&
    expr.or.element[2] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "flight_control_state" &&
        port.cia = CIA.Availability
        }
      }
      }
     &&
  rel.comment = "" &&
  rel.description = "" &&
  rel.phases = "" &&
  rel.extern = ""
  } &&
ct.cyber_relations.element[3] = some (rel: CyberRel) {
  rel.id = "nav_location_out_I" &&
  rel.output = some (port: CIAPort) {
    port.name = "cur_pos" &&
    port.cia = CIA.Integrity
    } &&
  rel.inputs = some (expr: CyberExpr) {
    expr.kind = CyberExprKind.Or &&
    expr.or.length = 3 &&
    expr.or.element[0] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "est_pos" &&
        port.cia = CIA.Integrity
        }
      }
       &&
    expr.or.element[1] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "cmd" &&
        port.cia = CIA.Integrity
        }
      }
       &&
    expr.or.element[2] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "flight_control_state" &&
        port.cia = CIA.Integrity
        }
      }
      }
     &&
  rel.comment = "" &&
  rel.description = "" &&
  rel.phases = "" &&
  rel.extern = ""
  } &&
ct.cyber_relations.element[4] = some (rel: CyberRel) {
  rel.id = "move_out_A" &&
  rel.output = some (port: CIAPort) {
    port.name = "move" &&
    port.cia = CIA.Availability
    } &&
  rel.inputs = some (expr: CyberExpr) {
    expr.kind = CyberExprKind.Or &&
    expr.or.length = 3 &&
    expr.or.element[0] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "est_pos" &&
        port.cia = CIA.Availability
        }
      }
       &&
    expr.or.element[1] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "cmd" &&
        port.cia = CIA.Availability
        }
      }
       &&
    expr.or.element[2] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "flight_control_state" &&
        port.cia = CIA.Availability
        }
      }
      }
     &&
  rel.comment = "" &&
  rel.description = "" &&
  rel.phases = "" &&
  rel.extern = ""
  } &&
ct.cyber_relations.element[5] = some (rel: CyberRel) {
  rel.id = "move_out_I" &&
  rel.output = some (port: CIAPort) {
    port.name = "move" &&
    port.cia = CIA.Integrity
    } &&
  rel.inputs = some (expr: CyberExpr) {
    expr.kind = CyberExprKind.Or &&
    expr.or.length = 3 &&
    expr.or.element[0] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "est_pos" &&
        port.cia = CIA.Integrity
        }
      }
       &&
    expr.or.element[1] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "cmd" &&
        port.cia = CIA.Integrity
        }
      }
       &&
    expr.or.element[2] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "flight_control_state" &&
        port.cia = CIA.Integrity
        }
      }
      }
     &&
  rel.comment = "" &&
  rel.description = "" &&
  rel.phases = "" &&
  rel.extern = ""
  } &&ct.safety_relations.length = 6 &&
ct.safety_relations.element[0] = some (rel: SafetyRel) {
  rel.id = "pos_act_out_UED" &&
  rel.output = some (port: IAPort) {
    port.name = "pos_act_out" &&
    port.ia = IA.Integrity
    } &&
  rel.faultSrc = some (expr: SafetyExpr) {
    expr.kind = SafetyExprKind.Or &&
    expr.or.length = 4 &&
    expr.or.element[0] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Fault &&
      expr.fault = "ued_event"
      }
       &&
    expr.or.element[1] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "est_pos" &&
        port.ia = IA.Integrity
        }
      }
       &&
    expr.or.element[2] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "cmd" &&
        port.ia = IA.Integrity
        }
      }
       &&
    expr.or.element[3] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "flight_control_state" &&
        port.ia = IA.Integrity
        }
      }
      }
     &&
  rel.comment = "" &&
  rel.description = ""
  } &&
ct.safety_relations.element[1] = some (rel: SafetyRel) {
  rel.id = "pos_act_out_LOA" &&
  rel.output = some (port: IAPort) {
    port.name = "pos_act_out" &&
    port.ia = IA.Availability
    } &&
  rel.faultSrc = some (expr: SafetyExpr) {
    expr.kind = SafetyExprKind.Or &&
    expr.or.length = 4 &&
    expr.or.element[0] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Fault &&
      expr.fault = "loa_event"
      }
       &&
    expr.or.element[1] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "est_pos" &&
        port.ia = IA.Availability
        }
      }
       &&
    expr.or.element[2] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "cmd" &&
        port.ia = IA.Availability
        }
      }
       &&
    expr.or.element[3] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "flight_control_state" &&
        port.ia = IA.Availability
        }
      }
      }
     &&
  rel.comment = "" &&
  rel.description = ""
  } &&
ct.safety_relations.element[2] = some (rel: SafetyRel) {
  rel.id = "nav_location_out_UED" &&
  rel.output = some (port: IAPort) {
    port.name = "cur_pos" &&
    port.ia = IA.Integrity
    } &&
  rel.faultSrc = some (expr: SafetyExpr) {
    expr.kind = SafetyExprKind.Or &&
    expr.or.length = 4 &&
    expr.or.element[0] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Fault &&
      expr.fault = "ued_event"
      }
       &&
    expr.or.element[1] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "est_pos" &&
        port.ia = IA.Integrity
        }
      }
       &&
    expr.or.element[2] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "cmd" &&
        port.ia = IA.Integrity
        }
      }
       &&
    expr.or.element[3] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "flight_control_state" &&
        port.ia = IA.Integrity
        }
      }
      }
     &&
  rel.comment = "" &&
  rel.description = ""
  } &&
ct.safety_relations.element[3] = some (rel: SafetyRel) {
  rel.id = "nav_location_out_LOA" &&
  rel.output = some (port: IAPort) {
    port.name = "cur_pos" &&
    port.ia = IA.Availability
    } &&
  rel.faultSrc = some (expr: SafetyExpr) {
    expr.kind = SafetyExprKind.Or &&
    expr.or.length = 4 &&
    expr.or.element[0] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Fault &&
      expr.fault = "loa_event"
      }
       &&
    expr.or.element[1] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "est_pos" &&
        port.ia = IA.Availability
        }
      }
       &&
    expr.or.element[2] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "cmd" &&
        port.ia = IA.Availability
        }
      }
       &&
    expr.or.element[3] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "flight_control_state" &&
        port.ia = IA.Availability
        }
      }
      }
     &&
  rel.comment = "" &&
  rel.description = ""
  } &&
ct.safety_relations.element[4] = some (rel: SafetyRel) {
  rel.id = "move_out_UED" &&
  rel.output = some (port: IAPort) {
    port.name = "move" &&
    port.ia = IA.Integrity
    } &&
  rel.faultSrc = some (expr: SafetyExpr) {
    expr.kind = SafetyExprKind.Or &&
    expr.or.length = 4 &&
    expr.or.element[0] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Fault &&
      expr.fault = "ued_event"
      }
       &&
    expr.or.element[1] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "est_pos" &&
        port.ia = IA.Integrity
        }
      }
       &&
    expr.or.element[2] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "cmd" &&
        port.ia = IA.Integrity
        }
      }
       &&
    expr.or.element[3] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "flight_control_state" &&
        port.ia = IA.Integrity
        }
      }
      }
     &&
  rel.comment = "" &&
  rel.description = ""
  } &&
ct.safety_relations.element[5] = some (rel: SafetyRel) {
  rel.id = "move_out_LOA" &&
  rel.output = some (port: IAPort) {
    port.name = "move" &&
    port.ia = IA.Availability
    } &&
  rel.faultSrc = some (expr: SafetyExpr) {
    expr.kind = SafetyExprKind.Or &&
    expr.or.length = 4 &&
    expr.or.element[0] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Fault &&
      expr.fault = "loa_event"
      }
       &&
    expr.or.element[1] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "est_pos" &&
        port.ia = IA.Availability
        }
      }
       &&
    expr.or.element[2] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "cmd" &&
        port.ia = IA.Availability
        }
      }
       &&
    expr.or.element[3] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "flight_control_state" &&
        port.ia = IA.Availability
        }
      }
      }
     &&
  rel.comment = "" &&
  rel.description = ""
  } &&ct.safety_events.length = 2 &&
ct.safety_events.element[0] = some (ev: SafetyEvent) {
  ev.id = "ued_event" &&
  ev.probability = "1.0e-9" &&
  ev.comment = "undetected erroneous data of the Navigator" &&
  ev.description = "UED"
  } &&
ct.safety_events.element[1] = some (ev: SafetyEvent) {
  ev.id = "loa_event" &&
  ev.probability = "1.0e-8" &&
  ev.comment = "loss of availability of the Navigator" &&
  ev.description = "LOA"
  }} &&
m.component_types.element[5] = some (ct: ComponentType) {
  ct.name = "FlightControl" &&
  ct.ports.length = 4 &&
  ct.ports.element[0] = some(p: Port) {
    p.name = "actuation_response" &&
    p.mode = PortMode.In &&
    p.is_event = false &&
    p.probe = false &&
    p.ptype = mk_some<DataType>(BoolType)
  } &&
  ct.ports.element[1] = some(p: Port) {
    p.name = "move" &&
    p.mode = PortMode.In &&
    p.is_event = false &&
    p.probe = false &&
    p.ptype = mk_some<DataType>(BoolType)
  } &&
  ct.ports.element[2] = some(p: Port) {
    p.name = "motor_cmd" &&
    p.mode = PortMode.Out &&
    p.is_event = false &&
    p.probe = false &&
    p.ptype = mk_some<DataType>(BoolType)
  } &&
  ct.ports.element[3] = some(p: Port) {
    p.name = "fc_state" &&
    p.mode = PortMode.Out &&
    p.is_event = false &&
    p.probe = false &&
    p.ptype = mk_some<DataType>(BoolType)
  } &&
  ct.compCateg = mk_some<String>("system") &&
  ct.contract = mk_none<ContractSpec> &&
  ct.cyber_relations.length = 4 &&
  ct.cyber_relations.element[0] = some (rel: CyberRel) {
    rel.id = "fc_cmd_out_A" &&
    rel.output = some (port: CIAPort) {
      port.name = "motor_cmd" &&
      port.cia = CIA.Availability
      } &&
    rel.inputs = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Or &&
      expr.or.length = 2 &&
      expr.or.element[0] = some (expr: CyberExpr) {
        expr.kind = CyberExprKind.Port &&
        expr.port = some (port: CIAPort) {
          port.name = "move" &&
          port.cia = CIA.Availability
          }
        }
         &&
      expr.or.element[1] = some (expr: CyberExpr) {
        expr.kind = CyberExprKind.Port &&
        expr.port = some (port: CIAPort) {
          port.name = "actuation_response" &&
          port.cia = CIA.Availability
          }
        }
        }
       &&
    rel.comment = "" &&
    rel.description = "" &&
    rel.phases = "" &&
    rel.extern = ""
    
  } &&
  ct.cyber_relations.element[1] = some (rel: CyberRel) {
    rel.id = "fc_cmd_out_I" &&
    rel.output = some (port: CIAPort) {
      port.name = "motor_cmd" &&
      port.cia = CIA.Integrity
      } &&
    rel.inputs = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Or &&
      expr.or.length = 2 &&
      expr.or.element[0] = some (expr: CyberExpr) {
        expr.kind = CyberExprKind.Port &&
        expr.port = some (port: CIAPort) {
          port.name = "move" &&
          port.cia = CIA.Integrity
          }
        }
         &&
      expr.or.element[1] = some (expr: CyberExpr) {
        expr.kind = CyberExprKind.Port &&
        expr.port = some (port: CIAPort) {
          port.name = "actuation_response" &&
          port.cia = CIA.Integrity
          }
        }
        }
       &&
    rel.comment = "" &&
    rel.description = "" &&
    rel.phases = "" &&
    rel.extern = ""
    
  } &&
  ct.cyber_relations.element[2] = some (rel: CyberRel) {
    rel.id = "state_out_A" &&
    rel.output = some (port: CIAPort) {
      port.name = "fc_state" &&
      port.cia = CIA.Availability
      } &&
    rel.inputs = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Or &&
      expr.or.length = 2 &&
      expr.or.element[0] = some (expr: CyberExpr) {
        expr.kind = CyberExprKind.Port &&
        expr.port = some (port: CIAPort) {
          port.name = "move" &&
          port.cia = CIA.Availability
          }
        }
         &&
      expr.or.element[1] = some (expr: CyberExpr) {
        expr.kind = CyberExprKind.Port &&
        expr.port = some (port: CIAPort) {
          port.name = "actuation_response" &&
          port.cia = CIA.Availability
          }
        }
        }
       &&
    rel.comment = "" &&
    rel.description = "" &&
    rel.phases = "" &&
    rel.extern = ""
    
  } &&
  ct.cyber_relations.element[3] = some (rel: CyberRel) {
    rel.id = "state_out_I" &&
    rel.output = some (port: CIAPort) {
      port.name = "fc_state" &&
      port.cia = CIA.Integrity
      } &&
    rel.inputs = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Or &&
      expr.or.length = 2 &&
      expr.or.element[0] = some (expr: CyberExpr) {
        expr.kind = CyberExprKind.Port &&
        expr.port = some (port: CIAPort) {
          port.name = "move" &&
          port.cia = CIA.Integrity
          }
        }
         &&
      expr.or.element[1] = some (expr: CyberExpr) {
        expr.kind = CyberExprKind.Port &&
        expr.port = some (port: CIAPort) {
          port.name = "actuation_response" &&
          port.cia = CIA.Integrity
          }
        }
        }
       &&
    rel.comment = "" &&
    rel.description = "" &&
    rel.phases = "" &&
    rel.extern = ""
    
  } &&
  ct.safety_relations.length = 2 &&
  ct.safety_relations.element[0] = some (rel: SafetyRel) {
    rel.id = "motor_out_UED" &&
    rel.output = some (port: IAPort) {
      port.name = "motor_cmd" &&
      port.ia = IA.Integrity
      } &&
    rel.faultSrc = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Or &&
      expr.or.length = 3 &&
      expr.or.element[0] = some (expr: SafetyExpr) {
        expr.kind = SafetyExprKind.Fault &&
        expr.fault = "ued_event"
        }
         &&
      expr.or.element[1] = some (expr: SafetyExpr) {
        expr.kind = SafetyExprKind.Port &&
        expr.port = some (port: IAPort) {
          port.name = "actuation_response" &&
          port.ia = IA.Integrity
          }
        }
         &&
      expr.or.element[2] = some (expr: SafetyExpr) {
        expr.kind = SafetyExprKind.Port &&
        expr.port = some (port: IAPort) {
          port.name = "move" &&
          port.ia = IA.Integrity
          }
        }
        }
       &&
    rel.comment = "" &&
    rel.description = ""
    
  } &&
  ct.safety_relations.element[1] = some (rel: SafetyRel) {
    rel.id = "motor_out_LOA" &&
    rel.output = some (port: IAPort) {
      port.name = "motor_cmd" &&
      port.ia = IA.Availability
      } &&
    rel.faultSrc = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Or &&
      expr.or.length = 3 &&
      expr.or.element[0] = some (expr: SafetyExpr) {
        expr.kind = SafetyExprKind.Fault &&
        expr.fault = "loa_event"
        }
         &&
      expr.or.element[1] = some (expr: SafetyExpr) {
        expr.kind = SafetyExprKind.Port &&
        expr.port = some (port: IAPort) {
          port.name = "actuation_response" &&
          port.ia = IA.Availability
          }
        }
         &&
      expr.or.element[2] = some (expr: SafetyExpr) {
        expr.kind = SafetyExprKind.Port &&
        expr.port = some (port: IAPort) {
          port.name = "move" &&
          port.ia = IA.Availability
          }
        }
        }
       &&
    rel.comment = "" &&
    rel.description = ""
    
  } &&
  ct.safety_events.length = 2 &&
  ct.safety_events.element[0] = some (ev: SafetyEvent) {
    ev.id = "ued_event" &&
    ev.probability = "1.0e-9" &&
    ev.comment = "undetected erroneous data of the FlightControl" &&
    ev.description = "UED"
    
  } &&
  ct.safety_events.element[1] = some (ev: SafetyEvent) {
    ev.id = "loa_event" &&
    ev.probability = "1.0e-8" &&
    ev.comment = "loss of availability of the FlightControl" &&
    ev.description = "LOA"
    
  }} &&
m.component_types.element[6] = some (ct: ComponentType) {
  ct.name = "Actuation" &&
  ct.ports.length = 2 &&
  ct.ports.element[0] = some(p: Port) {
    p.name = "motor_cmd" &&
    p.mode = PortMode.In &&
    p.is_event = false &&
    p.probe = false &&
    p.ptype = mk_some<DataType>(BoolType)
  } &&
  ct.ports.element[1] = some(p: Port) {
    p.name = "response" &&
    p.mode = PortMode.Out &&
    p.is_event = false &&
    p.probe = false &&
    p.ptype = mk_some<DataType>(BoolType)
  } &&
  ct.compCateg = mk_some<String>("system") &&
  ct.contract = mk_none<ContractSpec> &&
  ct.cyber_relations.length = 2 &&
  ct.cyber_relations.element[0] = some (rel: CyberRel) {
    rel.id = "response_out_A" &&
    rel.output = some (port: CIAPort) {
      port.name = "response" &&
      port.cia = CIA.Availability
      } &&
    rel.inputs = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "motor_cmd" &&
        port.cia = CIA.Availability
        }
      }
       &&
    rel.comment = "" &&
    rel.description = "" &&
    rel.phases = "" &&
    rel.extern = ""
    
  } &&
  ct.cyber_relations.element[1] = some (rel: CyberRel) {
    rel.id = "response_out_I" &&
    rel.output = some (port: CIAPort) {
      port.name = "response" &&
      port.cia = CIA.Integrity
      } &&
    rel.inputs = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "motor_cmd" &&
        port.cia = CIA.Integrity
        }
      }
       &&
    rel.comment = "" &&
    rel.description = "" &&
    rel.phases = "" &&
    rel.extern = ""
    
  } &&
  ct.safety_relations.length = 2 &&
  ct.safety_relations.element[0] = some (rel: SafetyRel) {
    rel.id = "response_out_UED" &&
    rel.output = some (port: IAPort) {
      port.name = "response" &&
      port.ia = IA.Integrity
      } &&
    rel.faultSrc = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Or &&
      expr.or.length = 2 &&
      expr.or.element[0] = some (expr: SafetyExpr) {
        expr.kind = SafetyExprKind.Fault &&
        expr.fault = "ued_event"
        }
         &&
      expr.or.element[1] = some (expr: SafetyExpr) {
        expr.kind = SafetyExprKind.Port &&
        expr.port = some (port: IAPort) {
          port.name = "motor_cmd" &&
          port.ia = IA.Integrity
          }
        }
        }
       &&
    rel.comment = "" &&
    rel.description = ""
    
  } &&
  ct.safety_relations.element[1] = some (rel: SafetyRel) {
    rel.id = "response_out_LOA" &&
    rel.output = some (port: IAPort) {
      port.name = "response" &&
      port.ia = IA.Availability
      } &&
    rel.faultSrc = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Or &&
      expr.or.length = 2 &&
      expr.or.element[0] = some (expr: SafetyExpr) {
        expr.kind = SafetyExprKind.Fault &&
        expr.fault = "loa_event"
        }
         &&
      expr.or.element[1] = some (expr: SafetyExpr) {
        expr.kind = SafetyExprKind.Port &&
        expr.port = some (port: IAPort) {
          port.name = "motor_cmd" &&
          port.ia = IA.Availability
          }
        }
        }
       &&
    rel.comment = "" &&
    rel.description = ""
    
  } &&
  ct.safety_events.length = 2 &&
  ct.safety_events.element[0] = some (ev: SafetyEvent) {
    ev.id = "ued_event" &&
    ev.probability = "1.0e-9" &&
    ev.comment = "undetected erroneous data of the Actuation" &&
    ev.description = "UED"
    
  } &&
  ct.safety_events.element[1] = some (ev: SafetyEvent) {
    ev.id = "loa_event" &&
    ev.probability = "1.0e-8" &&
    ev.comment = "loss of availability of the Actuation" &&
    ev.description = "LOA"
    
  }} &&
m.component_types.element[7] = some (ct: ComponentType) {
  ct.name = "DeliveryPlanner" &&
  ct.ports.length = 23 &&
  ct.ports.element[0] = some(p: Port) {
    p.name = "bus_in" &&
    p.mode = PortMode.In &&
    p.is_event = false &&
    p.probe = false &&
    p.ptype = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[11]
  })} &&
ct.ports.element[1] = some(p: Port) {
  p.name = "cur_pos" &&
  p.mode = PortMode.In &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[9]})} &&
ct.ports.element[2] = some(p: Port) {
  p.name = "delivery_status" &&
  p.mode = PortMode.In &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[2]})} &&
ct.ports.element[3] = some(p: Port) {
  p.name = "radio_response" &&
  p.mode = PortMode.In &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[12]})} &&
ct.ports.element[4] = some(p: Port) {
  p.name = "camera_result" &&
  p.mode = PortMode.In &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(IntegerType)} &&
ct.ports.element[5] = some(p: Port) {
  p.name = "gps_health_status" &&
  p.mode = PortMode.In &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(BoolType)} &&
ct.ports.element[6] = some(p: Port) {
  p.name = "imu_health_status" &&
  p.mode = PortMode.In &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(BoolType)} &&
ct.ports.element[7] = some(p: Port) {
  p.name = "rdo_health_status" &&
  p.mode = PortMode.In &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(BoolType)} &&
ct.ports.element[8] = some(p: Port) {
  p.name = "cam_health_status" &&
  p.mode = PortMode.In &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(BoolType)} &&
ct.ports.element[9] = some(p: Port) {
  p.name = "package_is_secure" &&
  p.mode = PortMode.In &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(BoolType)} &&
ct.ports.element[10] = some(p: Port) {
  p.name = "radio_cmd" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(BoolType)} &&
ct.ports.element[11] = some(p: Port) {
  p.name = "delivery_cmd" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[8]})} &&
ct.ports.element[12] = some(p: Port) {
  p.name = "dest_location" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[9]})} &&
ct.ports.element[13] = some(p: Port) {
  p.name = "bus_out" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(BoolType)} &&
ct.ports.element[14] = some(p: Port) {
  p.name = "nav_cmd" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(BoolType)} &&
ct.ports.element[15] = some(p: Port) {
  p.name = "camera" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(BoolType)} &&
ct.ports.element[16] = some(p: Port) {
  p.name = "probe_safe_landing" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = true &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[13]})} &&
ct.ports.element[17] = some(p: Port) {
  p.name = "constellation" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[3]})} &&
ct.ports.element[18] = some(p: Port) {
  p.name = "launch_pos" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[9]})} &&
ct.ports.element[19] = some(p: Port) {
  p.name = "probe_init_mode" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = true &&
  p.ptype = mk_some<DataType>(BoolType)} &&
ct.ports.element[20] = some(p: Port) {
  p.name = "probe_abort_mode" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = true &&
  p.ptype = mk_some<DataType>(BoolType)} &&
ct.ports.element[21] = some(p: Port) {
  p.name = "target_clear" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(BoolType)} &&
ct.ports.element[22] = some(p: Port) {
  p.name = "valid_marker" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(BoolType)} &&
ct.compCateg = mk_some<String>("system") &&
ct.contract = mk_some<ContractSpec>(some (csp: ContractSpec) {
  csp.constant_declarations.length = 0 &&
  csp.variable_declarations.length = 32 &&
  csp.variable_declarations.element[0] = some (sd: SymbolDefinition) {
    sd.name = "recent_order" &&
    sd.dtype = some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[10]
  } &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.ConditionalExpr &&
    e.conditional_expr = some (ite: IfThenElse) {
      ite.condition = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "init_mode"
      } &&
      ite.thenBranch = some (e: Expression) {
        e.kind = ExpressionKind.RecordProjection &&
        e.record_projection = some (rp: RecordProjection) {
          rp.record_reference = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "bus_in"
          } &&
          rp.field_id = "order"
        }
      } &&
      ite.elseBranch = some (e: Expression) {
        e.kind = ExpressionKind.Arrow &&
        e.arrow = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.RecordProjection &&
            e.record_projection = some (rp: RecordProjection) {
              rp.record_reference = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "bus_in"
              } &&
              rp.field_id = "order"
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Pre &&
            e.pre = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "recent_order"
            }
          }
        }
      }
    }
  }} &&
csp.variable_declarations.element[1] = some (sd: SymbolDefinition) {
  sd.name = "truck_position" &&
  sd.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[9]} &&
sd.definition = some (e: Expression) {
  e.kind = ExpressionKind.Call &&
  e.call = some (cll: NodeCall) {
    cll.node = "FirstLocation" &&
    cll.arguments.length = 1 &&
    cll.arguments.element[0] = some (e: Expression) {
      e.kind = ExpressionKind.Id &&
      e.identifier = "cur_pos"
    }
  }}} &&
csp.variable_declarations.element[2] = some (sd: SymbolDefinition) {
  sd.name = "dest_position" &&
  sd.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[9]} &&
sd.definition = some (e: Expression) {
  e.kind = ExpressionKind.Id &&
  e.identifier = "dest_location"}} &&
csp.variable_declarations.element[3] = some (sd: SymbolDefinition) {
  sd.name = "expensive_item" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.GreaterThanOrEqualTo &&
    e.greater_than_or_equal_to = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.RecordProjection &&
        e.record_projection = some (rp: RecordProjection) {
          rp.record_reference = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "recent_order"
          } &&
          rp.field_id = "item_value"
        }
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "ITEM_VALUE_THRESHOLD"
      }
    }
  }} &&
csp.variable_declarations.element[4] = some (sd: SymbolDefinition) {
  sd.name = "confirmation" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.And &&
    e.and = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.RecordProjection &&
        e.record_projection = some (rp: RecordProjection) {
          rp.record_reference = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "radio_response"
          } &&
          rp.field_id = "target_confirmed"
        }
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.RecordProjection &&
        e.record_projection = some (rp: RecordProjection) {
          rp.record_reference = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "radio_response"
          } &&
          rp.field_id = "data_available"
        }
      }
    }
  }} &&
csp.variable_declarations.element[5] = some (sd: SymbolDefinition) {
  sd.name = "confirmation_timeout" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.GreaterThan &&
    e.greater_than = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Call &&
        e.call = some (cll: NodeCall) {
          cll.node = "Duration" &&
          cll.arguments.length = 1 &&
          cll.arguments.element[0] = some (e: Expression) {
            e.kind = ExpressionKind.Not &&
            e.not = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "confirmation"
            }
          }
        }
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "WAITING_CONFIRMATION_THRESHOLD"
      }
    }
  }} &&
csp.variable_declarations.element[6] = some (sd: SymbolDefinition) {
  sd.name = "get_clearance_timeout" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.GreaterThanOrEqualTo &&
    e.greater_than_or_equal_to = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Call &&
        e.call = some (cll: NodeCall) {
          cll.node = "Duration" &&
          cll.arguments.length = 1 &&
          cll.arguments.element[0] = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "no_clearance"
          }
        }
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "MAXIMUM_NUMBER_OF_RETRIES"
      }
    }
  }} &&
csp.variable_declarations.element[7] = some (sd: SymbolDefinition) {
  sd.name = "delivery_failed" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.Equal &&
    e.equal = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "delivery_status"
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "FAILED_STATUS"
      }
    }
  }} &&
csp.variable_declarations.element[8] = some (sd: SymbolDefinition) {
  sd.name = "delivery_completed" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.Equal &&
    e.equal = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "delivery_status"
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "COMPLETED_STATUS"
      }
    }
  }} &&
csp.variable_declarations.element[9] = some (sd: SymbolDefinition) {
  sd.name = "is_safe_landing" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.And &&
    e.and = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "target_clear"
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "valid_marker"
      }
    }
  }} &&
csp.variable_declarations.element[10] = some (sd: SymbolDefinition) {
  sd.name = "on_off" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.RecordProjection &&
    e.record_projection = some (rp: RecordProjection) {
      rp.record_reference = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "bus_in"
      } &&
      rp.field_id = "on_off"
    }
  }} &&
csp.variable_declarations.element[11] = some (sd: SymbolDefinition) {
  sd.name = "init_criteria_succeed" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.And &&
    e.and = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.RecordProjection &&
        e.record_projection = some (rp: RecordProjection) {
          rp.record_reference = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "bus_in"
          } &&
          rp.field_id = "init_criteria_satisfied"
        }
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Not &&
        e.not = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "internal_error_detected"
        }
      }
    }
  }} &&
csp.variable_declarations.element[12] = some (sd: SymbolDefinition) {
  sd.name = "init_criteria_failed" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.Not &&
    e.not = some (e: Expression) {
      e.kind = ExpressionKind.Id &&
      e.identifier = "init_criteria_succeed"
    }
  }} &&
csp.variable_declarations.element[13] = some (sd: SymbolDefinition) {
  sd.name = "abort_cmd" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.RecordProjection &&
    e.record_projection = some (rp: RecordProjection) {
      rp.record_reference = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "bus_in"
      } &&
      rp.field_id = "abort_cmd"
    }
  }} &&
csp.variable_declarations.element[14] = some (sd: SymbolDefinition) {
  sd.name = "mission_store_release_sequence" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.RecordProjection &&
    e.record_projection = some (rp: RecordProjection) {
      rp.record_reference = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "bus_in"
      } &&
      rp.field_id = "mission_store_release_sequence"
    }
  }} &&
csp.variable_declarations.element[15] = some (sd: SymbolDefinition) {
  sd.name = "okay_to_launch" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.Not &&
    e.not = some (e: Expression) {
      e.kind = ExpressionKind.Id &&
      e.identifier = "internal_error_detected"
    }
  }} &&
csp.variable_declarations.element[16] = some (sd: SymbolDefinition) {
  sd.name = "separation" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.Not &&
    e.not = some (e: Expression) {
      e.kind = ExpressionKind.Id &&
      e.identifier = "connected"
    }
  }} &&
csp.variable_declarations.element[17] = some (sd: SymbolDefinition) {
  sd.name = "destination_location_reached" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.Call &&
    e.call = some (cll: NodeCall) {
      cll.node = "close_locations" &&
      cll.arguments.length = 2 &&
      cll.arguments.element[0] = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "cur_pos"
      } &&
      cll.arguments.element[1] = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "dest_position"
      }
    }
  }} &&
csp.variable_declarations.element[18] = some (sd: SymbolDefinition) {
  sd.name = "no_clearance" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.Not &&
    e.not = some (e: Expression) {
      e.kind = ExpressionKind.Id &&
      e.identifier = "is_safe_landing"
    }
  }} &&
csp.variable_declarations.element[19] = some (sd: SymbolDefinition) {
  sd.name = "successfull_delivery" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.And &&
    e.and = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.And &&
        e.and = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "delivery_completed"
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "destination_location_reached"
          }
        }
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Not &&
        e.not = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "no_clearance"
        }
      }
    }
  }} &&
csp.variable_declarations.element[20] = some (sd: SymbolDefinition) {
  sd.name = "exhaustive_retries" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.Or &&
    e.or = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "get_clearance_timeout"
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "confirmation_timeout"
      }
    }
  }} &&
csp.variable_declarations.element[21] = some (sd: SymbolDefinition) {
  sd.name = "internal_error_detected" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.Or &&
    e.or = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Or &&
        e.or = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Or &&
            e.or = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Not &&
                e.not = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "gps_health_status"
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Not &&
                e.not = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "imu_health_status"
                }
              }
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Not &&
            e.not = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "rdo_health_status"
            }
          }
        }
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Not &&
        e.not = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "cam_health_status"
        }
      }
    }
  }} &&
csp.variable_declarations.element[22] = some (sd: SymbolDefinition) {
  sd.name = "truck_location_reached" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.Call &&
    e.call = some (cll: NodeCall) {
      cll.node = "close_locations" &&
      cll.arguments.length = 2 &&
      cll.arguments.element[0] = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "cur_pos"
      } &&
      cll.arguments.element[1] = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "truck_position"
      }
    }
  }} &&
csp.variable_declarations.element[23] = some (sd: SymbolDefinition) {
  sd.name = "connected" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.RecordProjection &&
    e.record_projection = some (rp: RecordProjection) {
      rp.record_reference = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "bus_in"
      } &&
      rp.field_id = "connected"
    }
  }} &&
csp.variable_declarations.element[24] = some (sd: SymbolDefinition) {
  sd.name = "off_mode" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.Arrow &&
    e.arrow = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.BoolLiteral &&
        e.bool_literal = true
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Or &&
        e.or = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Or &&
            e.or = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Or &&
                e.or = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.And &&
                    e.and = some (bo: BinaryOperation) {
                      bo.lhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Pre &&
                        e.pre = some (e: Expression) {
                          e.kind = ExpressionKind.Id &&
                          e.identifier = "off_mode"
                        }
                      } &&
                      bo.rhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Not &&
                        e.not = some (e: Expression) {
                          e.kind = ExpressionKind.And &&
                          e.and = some (bo: BinaryOperation) {
                            bo.lhs_operand = some (e: Expression) {
                              e.kind = ExpressionKind.Id &&
                              e.identifier = "on_off"
                            } &&
                            bo.rhs_operand = some (e: Expression) {
                              e.kind = ExpressionKind.Id &&
                              e.identifier = "connected"
                            }
                          }
                        }
                      }
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.And &&
                    e.and = some (bo: BinaryOperation) {
                      bo.lhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.And &&
                        e.and = some (bo: BinaryOperation) {
                          bo.lhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Pre &&
                            e.pre = some (e: Expression) {
                              e.kind = ExpressionKind.Id &&
                              e.identifier = "init_mode"
                            }
                          } &&
                          bo.rhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Id &&
                            e.identifier = "on_off"
                          }
                        }
                      } &&
                      bo.rhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "connected"
                      }
                    }
                  }
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.And &&
                e.and = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.And &&
                    e.and = some (bo: BinaryOperation) {
                      bo.lhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Pre &&
                        e.pre = some (e: Expression) {
                          e.kind = ExpressionKind.Id &&
                          e.identifier = "ready_mode"
                        }
                      } &&
                      bo.rhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "on_off"
                      }
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "connected"
                  }
                }
              }
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.And &&
            e.and = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.And &&
                e.and = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Pre &&
                    e.pre = some (e: Expression) {
                      e.kind = ExpressionKind.Id &&
                      e.identifier = "abort_mode"
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "on_off"
                  }
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "connected"
              }
            }
          }
        }
      }
    }
  }} &&
csp.variable_declarations.element[25] = some (sd: SymbolDefinition) {
  sd.name = "init_mode" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.Arrow &&
    e.arrow = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.BoolLiteral &&
        e.bool_literal = false
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Or &&
        e.or = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Or &&
            e.or = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Or &&
                e.or = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.And &&
                    e.and = some (bo: BinaryOperation) {
                      bo.lhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.And &&
                        e.and = some (bo: BinaryOperation) {
                          bo.lhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.And &&
                            e.and = some (bo: BinaryOperation) {
                              bo.lhs_operand = some (e: Expression) {
                                e.kind = ExpressionKind.Pre &&
                                e.pre = some (e: Expression) {
                                  e.kind = ExpressionKind.Id &&
                                  e.identifier = "init_mode"
                                }
                              } &&
                              bo.rhs_operand = some (e: Expression) {
                                e.kind = ExpressionKind.Not &&
                                e.not = some (e: Expression) {
                                  e.kind = ExpressionKind.And &&
                                  e.and = some (bo: BinaryOperation) {
                                    bo.lhs_operand = some (e: Expression) {
                                      e.kind = ExpressionKind.Id &&
                                      e.identifier = "on_off"
                                    } &&
                                    bo.rhs_operand = some (e: Expression) {
                                      e.kind = ExpressionKind.Id &&
                                      e.identifier = "connected"
                                    }
                                  }
                                }
                              }
                            }
                          } &&
                          bo.rhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Not &&
                            e.not = some (e: Expression) {
                              e.kind = ExpressionKind.And &&
                              e.and = some (bo: BinaryOperation) {
                                bo.lhs_operand = some (e: Expression) {
                                  e.kind = ExpressionKind.Id &&
                                  e.identifier = "init_criteria_succeed"
                                } &&
                                bo.rhs_operand = some (e: Expression) {
                                  e.kind = ExpressionKind.Id &&
                                  e.identifier = "connected"
                                }
                              }
                            }
                          }
                        }
                      } &&
                      bo.rhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Not &&
                        e.not = some (e: Expression) {
                          e.kind = ExpressionKind.And &&
                          e.and = some (bo: BinaryOperation) {
                            bo.lhs_operand = some (e: Expression) {
                              e.kind = ExpressionKind.Id &&
                              e.identifier = "abort_cmd"
                            } &&
                            bo.rhs_operand = some (e: Expression) {
                              e.kind = ExpressionKind.Id &&
                              e.identifier = "connected"
                            }
                          }
                        }
                      }
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.And &&
                    e.and = some (bo: BinaryOperation) {
                      bo.lhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.And &&
                        e.and = some (bo: BinaryOperation) {
                          bo.lhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Pre &&
                            e.pre = some (e: Expression) {
                              e.kind = ExpressionKind.Id &&
                              e.identifier = "off_mode"
                            }
                          } &&
                          bo.rhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Id &&
                            e.identifier = "on_off"
                          }
                        }
                      } &&
                      bo.rhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "connected"
                      }
                    }
                  }
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.And &&
                e.and = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.And &&
                    e.and = some (bo: BinaryOperation) {
                      bo.lhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Pre &&
                        e.pre = some (e: Expression) {
                          e.kind = ExpressionKind.Id &&
                          e.identifier = "ready_mode"
                        }
                      } &&
                      bo.rhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "init_criteria_failed"
                      }
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "connected"
                  }
                }
              }
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.And &&
            e.and = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.And &&
                e.and = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Pre &&
                    e.pre = some (e: Expression) {
                      e.kind = ExpressionKind.Id &&
                      e.identifier = "return_to_truck_mode"
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "truck_location_reached"
                  }
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "connected"
              }
            }
          }
        }
      }
    }
  }} &&
csp.variable_declarations.element[26] = some (sd: SymbolDefinition) {
  sd.name = "ready_mode" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.Arrow &&
    e.arrow = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.BoolLiteral &&
        e.bool_literal = false
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Or &&
        e.or = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.And &&
            e.and = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.And &&
                e.and = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.And &&
                    e.and = some (bo: BinaryOperation) {
                      bo.lhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.And &&
                        e.and = some (bo: BinaryOperation) {
                          bo.lhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Pre &&
                            e.pre = some (e: Expression) {
                              e.kind = ExpressionKind.Id &&
                              e.identifier = "ready_mode"
                            }
                          } &&
                          bo.rhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Not &&
                            e.not = some (e: Expression) {
                              e.kind = ExpressionKind.And &&
                              e.and = some (bo: BinaryOperation) {
                                bo.lhs_operand = some (e: Expression) {
                                  e.kind = ExpressionKind.Id &&
                                  e.identifier = "init_criteria_failed"
                                } &&
                                bo.rhs_operand = some (e: Expression) {
                                  e.kind = ExpressionKind.Id &&
                                  e.identifier = "connected"
                                }
                              }
                            }
                          }
                        }
                      } &&
                      bo.rhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Not &&
                        e.not = some (e: Expression) {
                          e.kind = ExpressionKind.And &&
                          e.and = some (bo: BinaryOperation) {
                            bo.lhs_operand = some (e: Expression) {
                              e.kind = ExpressionKind.Id &&
                              e.identifier = "on_off"
                            } &&
                            bo.rhs_operand = some (e: Expression) {
                              e.kind = ExpressionKind.Id &&
                              e.identifier = "connected"
                            }
                          }
                        }
                      }
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Not &&
                    e.not = some (e: Expression) {
                      e.kind = ExpressionKind.And &&
                      e.and = some (bo: BinaryOperation) {
                        bo.lhs_operand = some (e: Expression) {
                          e.kind = ExpressionKind.Id &&
                          e.identifier = "abort_cmd"
                        } &&
                        bo.rhs_operand = some (e: Expression) {
                          e.kind = ExpressionKind.Id &&
                          e.identifier = "connected"
                        }
                      }
                    }
                  }
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Not &&
                e.not = some (e: Expression) {
                  e.kind = ExpressionKind.And &&
                  e.and = some (bo: BinaryOperation) {
                    bo.lhs_operand = some (e: Expression) {
                      e.kind = ExpressionKind.Id &&
                      e.identifier = "mission_store_release_sequence"
                    } &&
                    bo.rhs_operand = some (e: Expression) {
                      e.kind = ExpressionKind.Id &&
                      e.identifier = "connected"
                    }
                  }
                }
              }
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.And &&
            e.and = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.And &&
                e.and = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Pre &&
                    e.pre = some (e: Expression) {
                      e.kind = ExpressionKind.Id &&
                      e.identifier = "init_mode"
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "init_criteria_succeed"
                  }
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "connected"
              }
            }
          }
        }
      }
    }
  }} &&
csp.variable_declarations.element[27] = some (sd: SymbolDefinition) {
  sd.name = "launch_mode" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.Arrow &&
    e.arrow = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.BoolLiteral &&
        e.bool_literal = false
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Or &&
        e.or = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.And &&
            e.and = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.And &&
                e.and = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Pre &&
                    e.pre = some (e: Expression) {
                      e.kind = ExpressionKind.Id &&
                      e.identifier = "launch_mode"
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Not &&
                    e.not = some (e: Expression) {
                      e.kind = ExpressionKind.And &&
                      e.and = some (bo: BinaryOperation) {
                        bo.lhs_operand = some (e: Expression) {
                          e.kind = ExpressionKind.Id &&
                          e.identifier = "abort_cmd"
                        } &&
                        bo.rhs_operand = some (e: Expression) {
                          e.kind = ExpressionKind.Id &&
                          e.identifier = "connected"
                        }
                      }
                    }
                  }
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Not &&
                e.not = some (e: Expression) {
                  e.kind = ExpressionKind.And &&
                  e.and = some (bo: BinaryOperation) {
                    bo.lhs_operand = some (e: Expression) {
                      e.kind = ExpressionKind.And &&
                      e.and = some (bo: BinaryOperation) {
                        bo.lhs_operand = some (e: Expression) {
                          e.kind = ExpressionKind.Id &&
                          e.identifier = "package_is_secure"
                        } &&
                        bo.rhs_operand = some (e: Expression) {
                          e.kind = ExpressionKind.Id &&
                          e.identifier = "okay_to_launch"
                        }
                      }
                    } &&
                    bo.rhs_operand = some (e: Expression) {
                      e.kind = ExpressionKind.Id &&
                      e.identifier = "separation"
                    }
                  }
                }
              }
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.And &&
            e.and = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.And &&
                e.and = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Pre &&
                    e.pre = some (e: Expression) {
                      e.kind = ExpressionKind.Id &&
                      e.identifier = "ready_mode"
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "mission_store_release_sequence"
                  }
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "connected"
              }
            }
          }
        }
      }
    }
  }} &&
csp.variable_declarations.element[28] = some (sd: SymbolDefinition) {
  sd.name = "abort_mode" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.Arrow &&
    e.arrow = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.BoolLiteral &&
        e.bool_literal = false
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Or &&
        e.or = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Or &&
            e.or = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Or &&
                e.or = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.And &&
                    e.and = some (bo: BinaryOperation) {
                      bo.lhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Pre &&
                        e.pre = some (e: Expression) {
                          e.kind = ExpressionKind.Id &&
                          e.identifier = "abort_mode"
                        }
                      } &&
                      bo.rhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Not &&
                        e.not = some (e: Expression) {
                          e.kind = ExpressionKind.And &&
                          e.and = some (bo: BinaryOperation) {
                            bo.lhs_operand = some (e: Expression) {
                              e.kind = ExpressionKind.Id &&
                              e.identifier = "on_off"
                            } &&
                            bo.rhs_operand = some (e: Expression) {
                              e.kind = ExpressionKind.Id &&
                              e.identifier = "connected"
                            }
                          }
                        }
                      }
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.And &&
                    e.and = some (bo: BinaryOperation) {
                      bo.lhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.And &&
                        e.and = some (bo: BinaryOperation) {
                          bo.lhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Pre &&
                            e.pre = some (e: Expression) {
                              e.kind = ExpressionKind.Id &&
                              e.identifier = "init_mode"
                            }
                          } &&
                          bo.rhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Id &&
                            e.identifier = "abort_cmd"
                          }
                        }
                      } &&
                      bo.rhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "connected"
                      }
                    }
                  }
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.And &&
                e.and = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.And &&
                    e.and = some (bo: BinaryOperation) {
                      bo.lhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Pre &&
                        e.pre = some (e: Expression) {
                          e.kind = ExpressionKind.Id &&
                          e.identifier = "ready_mode"
                        }
                      } &&
                      bo.rhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "abort_cmd"
                      }
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "connected"
                  }
                }
              }
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.And &&
            e.and = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.And &&
                e.and = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Pre &&
                    e.pre = some (e: Expression) {
                      e.kind = ExpressionKind.Id &&
                      e.identifier = "launch_mode"
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "abort_cmd"
                  }
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "connected"
              }
            }
          }
        }
      }
    }
  }} &&
csp.variable_declarations.element[29] = some (sd: SymbolDefinition) {
  sd.name = "flying_to_dest_mode" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.Arrow &&
    e.arrow = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.BoolLiteral &&
        e.bool_literal = false
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Or &&
        e.or = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.And &&
            e.and = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Pre &&
                e.pre = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "flying_to_dest_mode"
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Not &&
                e.not = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "destination_location_reached"
                }
              }
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.And &&
            e.and = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.And &&
                e.and = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.And &&
                    e.and = some (bo: BinaryOperation) {
                      bo.lhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Pre &&
                        e.pre = some (e: Expression) {
                          e.kind = ExpressionKind.Id &&
                          e.identifier = "launch_mode"
                        }
                      } &&
                      bo.rhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "package_is_secure"
                      }
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "okay_to_launch"
                  }
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "separation"
              }
            }
          }
        }
      }
    }
  }} &&
csp.variable_declarations.element[30] = some (sd: SymbolDefinition) {
  sd.name = "making_delivery_mode" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.Arrow &&
    e.arrow = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.BoolLiteral &&
        e.bool_literal = false
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Or &&
        e.or = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.And &&
            e.and = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Pre &&
                e.pre = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "making_delivery_mode"
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Not &&
                e.not = some (e: Expression) {
                  e.kind = ExpressionKind.Or &&
                  e.or = some (bo: BinaryOperation) {
                    bo.lhs_operand = some (e: Expression) {
                      e.kind = ExpressionKind.Or &&
                      e.or = some (bo: BinaryOperation) {
                        bo.lhs_operand = some (e: Expression) {
                          e.kind = ExpressionKind.Or &&
                          e.or = some (bo: BinaryOperation) {
                            bo.lhs_operand = some (e: Expression) {
                              e.kind = ExpressionKind.Id &&
                              e.identifier = "successfull_delivery"
                            } &&
                            bo.rhs_operand = some (e: Expression) {
                              e.kind = ExpressionKind.Id &&
                              e.identifier = "exhaustive_retries"
                            }
                          }
                        } &&
                        bo.rhs_operand = some (e: Expression) {
                          e.kind = ExpressionKind.Id &&
                          e.identifier = "delivery_failed"
                        }
                      }
                    } &&
                    bo.rhs_operand = some (e: Expression) {
                      e.kind = ExpressionKind.Id &&
                      e.identifier = "internal_error_detected"
                    }
                  }
                }
              }
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.And &&
            e.and = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Pre &&
                e.pre = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "flying_to_dest_mode"
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "destination_location_reached"
              }
            }
          }
        }
      }
    }
  }} &&
csp.variable_declarations.element[31] = some (sd: SymbolDefinition) {
  sd.name = "return_to_truck_mode" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.Arrow &&
    e.arrow = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.BoolLiteral &&
        e.bool_literal = false
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Or &&
        e.or = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.And &&
            e.and = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Pre &&
                e.pre = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "return_to_truck_mode"
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Not &&
                e.not = some (e: Expression) {
                  e.kind = ExpressionKind.And &&
                  e.and = some (bo: BinaryOperation) {
                    bo.lhs_operand = some (e: Expression) {
                      e.kind = ExpressionKind.Id &&
                      e.identifier = "truck_location_reached"
                    } &&
                    bo.rhs_operand = some (e: Expression) {
                      e.kind = ExpressionKind.Id &&
                      e.identifier = "connected"
                    }
                  }
                }
              }
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.And &&
            e.and = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Pre &&
                e.pre = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "making_delivery_mode"
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Or &&
                e.or = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Or &&
                    e.or = some (bo: BinaryOperation) {
                      bo.lhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Or &&
                        e.or = some (bo: BinaryOperation) {
                          bo.lhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Id &&
                            e.identifier = "successfull_delivery"
                          } &&
                          bo.rhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Id &&
                            e.identifier = "exhaustive_retries"
                          }
                        }
                      } &&
                      bo.rhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "delivery_failed"
                      }
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "internal_error_detected"
                  }
                }
              }
            }
          }
        }
      }
    }
  }} &&csp.assumes.length = 0 &&csp.guarantees.length = 10 &&
csp.guarantees.element[0] = some (ci: ContractItem) {
  ci.name = mk_some<Identifier>("Output: probe_safe_landing") &&
  ci.expression = some (e: Expression) {
    e.kind = ExpressionKind.Equal &&
    e.equal = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "probe_safe_landing"
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.RecordLiteral &&
        e.record_literal = some (rl: RecordLiteral) {
          rl.record_type = "ProbeSafeLanding.impl" &&
          rl.field_definitions.length = 2 &&
          rl.field_definitions.element[0] = some (fd: FieldDefinition) {
            fd.field_id = "is_target_clear" &&
            fd.field_value = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "target_clear"
            }
          } &&
          rl.field_definitions.element[1] = some (fd: FieldDefinition) {
            fd.field_id = "has_valid_marker" &&
            fd.field_value = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "valid_marker"
            }
          }
        }
      }
    }
  }} &&
csp.guarantees.element[1] = some (ci: ContractItem) {
  ci.name = mk_some<Identifier>("Output: delivery_cmd") &&
  ci.expression = some (e: Expression) {
    e.kind = ExpressionKind.Equal &&
    e.equal = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "delivery_cmd"
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.ConditionalExpr &&
        e.conditional_expr = some (ite: IfThenElse) {
          ite.condition = some (e: Expression) {
            e.kind = ExpressionKind.And &&
            e.and = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.And &&
                e.and = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "making_delivery_mode"
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Not &&
                    e.not = some (e: Expression) {
                      e.kind = ExpressionKind.Id &&
                      e.identifier = "no_clearance"
                    }
                  }
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Implies &&
                e.implies = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "expensive_item"
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "confirmation"
                  }
                }
              }
            }
          } &&
          ite.thenBranch = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "RELEASE_PACKAGE_CMD"
          } &&
          ite.elseBranch = some (e: Expression) {
            e.kind = ExpressionKind.ConditionalExpr &&
            e.conditional_expr = some (ite: IfThenElse) {
              ite.condition = some (e: Expression) {
                e.kind = ExpressionKind.And &&
                e.and = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "return_to_truck_mode"
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "internal_error_detected"
                  }
                }
              } &&
              ite.thenBranch = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "ABORT_DELIVERY_CMD"
              } &&
              ite.elseBranch = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "NO_OPERATION_CMD"
              }
            }
          }
        }
      }
    }
  }} &&
csp.guarantees.element[2] = some (ci: ContractItem) {
  ci.name = mk_some<Identifier>("Output: constellation") &&
  ci.expression = some (e: Expression) {
    e.kind = ExpressionKind.Equal &&
    e.equal = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "constellation"
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.ConditionalExpr &&
        e.conditional_expr = some (ite: IfThenElse) {
          ite.condition = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "init_mode"
          } &&
          ite.thenBranch = some (e: Expression) {
            e.kind = ExpressionKind.RecordProjection &&
            e.record_projection = some (rp: RecordProjection) {
              rp.record_reference = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "bus_in"
              } &&
              rp.field_id = "constellation"
            }
          } &&
          ite.elseBranch = some (e: Expression) {
            e.kind = ExpressionKind.Arrow &&
            e.arrow = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.RecordProjection &&
                e.record_projection = some (rp: RecordProjection) {
                  rp.record_reference = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "bus_in"
                  } &&
                  rp.field_id = "constellation"
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Pre &&
                e.pre = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "constellation"
                }
              }
            }
          }
        }
      }
    }
  }} &&
csp.guarantees.element[3] = some (ci: ContractItem) {
  ci.name = mk_some<Identifier>("Output: dest_location") &&
  ci.expression = some (e: Expression) {
    e.kind = ExpressionKind.Equal &&
    e.equal = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "dest_location"
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.ConditionalExpr &&
        e.conditional_expr = some (ite: IfThenElse) {
          ite.condition = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "init_mode"
          } &&
          ite.thenBranch = some (e: Expression) {
            e.kind = ExpressionKind.RecordProjection &&
            e.record_projection = some (rp: RecordProjection) {
              rp.record_reference = some (e: Expression) {
                e.kind = ExpressionKind.RecordProjection &&
                e.record_projection = some (rp: RecordProjection) {
                  rp.record_reference = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "bus_in"
                  } &&
                  rp.field_id = "order"
                }
              } &&
              rp.field_id = "target_position"
            }
          } &&
          ite.elseBranch = some (e: Expression) {
            e.kind = ExpressionKind.Arrow &&
            e.arrow = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.RecordProjection &&
                e.record_projection = some (rp: RecordProjection) {
                  rp.record_reference = some (e: Expression) {
                    e.kind = ExpressionKind.RecordProjection &&
                    e.record_projection = some (rp: RecordProjection) {
                      rp.record_reference = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "bus_in"
                      } &&
                      rp.field_id = "order"
                    }
                  } &&
                  rp.field_id = "target_position"
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Pre &&
                e.pre = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "dest_location"
                }
              }
            }
          }
        }
      }
    }
  }} &&
csp.guarantees.element[4] = some (ci: ContractItem) {
  ci.name = mk_some<Identifier>("Output: launch_pos") &&
  ci.expression = some (e: Expression) {
    e.kind = ExpressionKind.Equal &&
    e.equal = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "launch_pos"
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.ConditionalExpr &&
        e.conditional_expr = some (ite: IfThenElse) {
          ite.condition = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "init_mode"
          } &&
          ite.thenBranch = some (e: Expression) {
            e.kind = ExpressionKind.RecordProjection &&
            e.record_projection = some (rp: RecordProjection) {
              rp.record_reference = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "bus_in"
              } &&
              rp.field_id = "launch_pos"
            }
          } &&
          ite.elseBranch = some (e: Expression) {
            e.kind = ExpressionKind.Arrow &&
            e.arrow = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.RecordProjection &&
                e.record_projection = some (rp: RecordProjection) {
                  rp.record_reference = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "bus_in"
                  } &&
                  rp.field_id = "launch_pos"
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Pre &&
                e.pre = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "launch_pos"
                }
              }
            }
          }
        }
      }
    }
  }} &&
csp.guarantees.element[5] = some (ci: ContractItem) {
  ci.name = mk_some<Identifier>("Output: radio_cmd") &&
  ci.expression = some (e: Expression) {
    e.kind = ExpressionKind.Equal &&
    e.equal = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "radio_cmd"
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.And &&
        e.and = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "making_delivery_mode"
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "expensive_item"
          }
        }
      }
    }
  }} &&
csp.guarantees.element[6] = some (ci: ContractItem) {
  ci.name = mk_some<Identifier>("Output: probe_init_mode") &&
  ci.expression = some (e: Expression) {
    e.kind = ExpressionKind.Equal &&
    e.equal = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "probe_init_mode"
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "init_mode"
      }
    }
  }} &&
csp.guarantees.element[7] = some (ci: ContractItem) {
  ci.name = mk_some<Identifier>("Output: probe_abort_mode") &&
  ci.expression = some (e: Expression) {
    e.kind = ExpressionKind.Equal &&
    e.equal = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "probe_abort_mode"
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "abort_mode"
      }
    }
  }} &&
csp.guarantees.element[8] = some (ci: ContractItem) {
  ci.name = mk_some<Identifier>("Output: nav_cmd | it sends signal to navigation only if it's in flying modes'") &&
  ci.expression = some (e: Expression) {
    e.kind = ExpressionKind.Equal &&
    e.equal = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "nav_cmd"
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Or &&
        e.or = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Or &&
            e.or = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "flying_to_dest_mode"
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "making_delivery_mode"
              }
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "return_to_truck_mode"
          }
        }
      }
    }
  }} &&
csp.guarantees.element[9] = some (ci: ContractItem) {
  ci.name = mk_some<Identifier>("Modes are mutually exclusive") &&
  ci.expression = some (e: Expression) {
    e.kind = ExpressionKind.Equal &&
    e.equal = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Plus &&
        e.plus = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Plus &&
            e.plus = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Plus &&
                e.plus = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Plus &&
                    e.plus = some (bo: BinaryOperation) {
                      bo.lhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Plus &&
                        e.plus = some (bo: BinaryOperation) {
                          bo.lhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Plus &&
                            e.plus = some (bo: BinaryOperation) {
                              bo.lhs_operand = some (e: Expression) {
                                e.kind = ExpressionKind.Plus &&
                                e.plus = some (bo: BinaryOperation) {
                                  bo.lhs_operand = some (e: Expression) {
                                    e.kind = ExpressionKind.Call &&
                                    e.call = some (cll: NodeCall) {
                                      cll.node = "ToInt" &&
                                      cll.arguments.length = 1 &&
                                      cll.arguments.element[0] = some (e: Expression) {
                                        e.kind = ExpressionKind.Id &&
                                        e.identifier = "off_mode"
                                      }
                                    }
                                  } &&
                                  bo.rhs_operand = some (e: Expression) {
                                    e.kind = ExpressionKind.Call &&
                                    e.call = some (cll: NodeCall) {
                                      cll.node = "ToInt" &&
                                      cll.arguments.length = 1 &&
                                      cll.arguments.element[0] = some (e: Expression) {
                                        e.kind = ExpressionKind.Id &&
                                        e.identifier = "init_mode"
                                      }
                                    }
                                  }
                                }
                              } &&
                              bo.rhs_operand = some (e: Expression) {
                                e.kind = ExpressionKind.Call &&
                                e.call = some (cll: NodeCall) {
                                  cll.node = "ToInt" &&
                                  cll.arguments.length = 1 &&
                                  cll.arguments.element[0] = some (e: Expression) {
                                    e.kind = ExpressionKind.Id &&
                                    e.identifier = "ready_mode"
                                  }
                                }
                              }
                            }
                          } &&
                          bo.rhs_operand = some (e: Expression) {
                            e.kind = ExpressionKind.Call &&
                            e.call = some (cll: NodeCall) {
                              cll.node = "ToInt" &&
                              cll.arguments.length = 1 &&
                              cll.arguments.element[0] = some (e: Expression) {
                                e.kind = ExpressionKind.Id &&
                                e.identifier = "launch_mode"
                              }
                            }
                          }
                        }
                      } &&
                      bo.rhs_operand = some (e: Expression) {
                        e.kind = ExpressionKind.Call &&
                        e.call = some (cll: NodeCall) {
                          cll.node = "ToInt" &&
                          cll.arguments.length = 1 &&
                          cll.arguments.element[0] = some (e: Expression) {
                            e.kind = ExpressionKind.Id &&
                            e.identifier = "abort_mode"
                          }
                        }
                      }
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Call &&
                    e.call = some (cll: NodeCall) {
                      cll.node = "ToInt" &&
                      cll.arguments.length = 1 &&
                      cll.arguments.element[0] = some (e: Expression) {
                        e.kind = ExpressionKind.Id &&
                        e.identifier = "flying_to_dest_mode"
                      }
                    }
                  }
                }
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Call &&
                e.call = some (cll: NodeCall) {
                  cll.node = "ToInt" &&
                  cll.arguments.length = 1 &&
                  cll.arguments.element[0] = some (e: Expression) {
                    e.kind = ExpressionKind.Id &&
                    e.identifier = "making_delivery_mode"
                  }
                }
              }
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Call &&
            e.call = some (cll: NodeCall) {
              cll.node = "ToInt" &&
              cll.arguments.length = 1 &&
              cll.arguments.element[0] = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "return_to_truck_mode"
              }
            }
          }
        }
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.IntLiteral &&
        e.int_literal = 1
      }
    }
  }} &&csp.modes.length = 0 &&csp.imports.length = 0}) &&
ct.cyber_relations.length = 10 &&
ct.cyber_relations.element[0] = some (rel: CyberRel) {
  rel.id = "dp_radio_cmd_A" &&
  rel.output = some (port: CIAPort) {
    port.name = "radio_cmd" &&
    port.cia = CIA.Availability
    } &&
  rel.inputs = some (expr: CyberExpr) {
    expr.kind = CyberExprKind.Or &&
    expr.or.length = 4 &&
    expr.or.element[0] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "cur_pos" &&
        port.cia = CIA.Availability
        }
      }
       &&
    expr.or.element[1] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "delivery_status" &&
        port.cia = CIA.Availability
        }
      }
       &&
    expr.or.element[2] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "camera_result" &&
        port.cia = CIA.Availability
        }
      }
       &&
    expr.or.element[3] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "radio_response" &&
        port.cia = CIA.Availability
        }
      }
      }
     &&
  rel.comment = "" &&
  rel.description = "" &&
  rel.phases = "" &&
  rel.extern = ""
  } &&
ct.cyber_relations.element[1] = some (rel: CyberRel) {
  rel.id = "dp_radio_cmd_I" &&
  rel.output = some (port: CIAPort) {
    port.name = "radio_cmd" &&
    port.cia = CIA.Integrity
    } &&
  rel.inputs = some (expr: CyberExpr) {
    expr.kind = CyberExprKind.Or &&
    expr.or.length = 4 &&
    expr.or.element[0] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "cur_pos" &&
        port.cia = CIA.Integrity
        }
      }
       &&
    expr.or.element[1] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "delivery_status" &&
        port.cia = CIA.Integrity
        }
      }
       &&
    expr.or.element[2] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "camera_result" &&
        port.cia = CIA.Integrity
        }
      }
       &&
    expr.or.element[3] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "radio_response" &&
        port.cia = CIA.Integrity
        }
      }
      }
     &&
  rel.comment = "" &&
  rel.description = "" &&
  rel.phases = "" &&
  rel.extern = ""
  } &&
ct.cyber_relations.element[2] = some (rel: CyberRel) {
  rel.id = "dp_camera_out_A" &&
  rel.output = some (port: CIAPort) {
    port.name = "camera" &&
    port.cia = CIA.Availability
    } &&
  rel.inputs = some (expr: CyberExpr) {
    expr.kind = CyberExprKind.Or &&
    expr.or.length = 4 &&
    expr.or.element[0] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "cur_pos" &&
        port.cia = CIA.Availability
        }
      }
       &&
    expr.or.element[1] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "delivery_status" &&
        port.cia = CIA.Availability
        }
      }
       &&
    expr.or.element[2] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "camera_result" &&
        port.cia = CIA.Availability
        }
      }
       &&
    expr.or.element[3] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "radio_response" &&
        port.cia = CIA.Availability
        }
      }
      }
     &&
  rel.comment = "" &&
  rel.description = "" &&
  rel.phases = "" &&
  rel.extern = ""
  } &&
ct.cyber_relations.element[3] = some (rel: CyberRel) {
  rel.id = "dp_camera_out_I" &&
  rel.output = some (port: CIAPort) {
    port.name = "camera" &&
    port.cia = CIA.Integrity
    } &&
  rel.inputs = some (expr: CyberExpr) {
    expr.kind = CyberExprKind.Or &&
    expr.or.length = 4 &&
    expr.or.element[0] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "cur_pos" &&
        port.cia = CIA.Integrity
        }
      }
       &&
    expr.or.element[1] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "delivery_status" &&
        port.cia = CIA.Integrity
        }
      }
       &&
    expr.or.element[2] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "camera_result" &&
        port.cia = CIA.Integrity
        }
      }
       &&
    expr.or.element[3] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "radio_response" &&
        port.cia = CIA.Integrity
        }
      }
      }
     &&
  rel.comment = "" &&
  rel.description = "" &&
  rel.phases = "" &&
  rel.extern = ""
  } &&
ct.cyber_relations.element[4] = some (rel: CyberRel) {
  rel.id = "dp_delivery_status_A" &&
  rel.output = some (port: CIAPort) {
    port.name = "delivery_cmd" &&
    port.cia = CIA.Availability
    } &&
  rel.inputs = some (expr: CyberExpr) {
    expr.kind = CyberExprKind.Or &&
    expr.or.length = 4 &&
    expr.or.element[0] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "cur_pos" &&
        port.cia = CIA.Availability
        }
      }
       &&
    expr.or.element[1] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "delivery_status" &&
        port.cia = CIA.Availability
        }
      }
       &&
    expr.or.element[2] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "camera_result" &&
        port.cia = CIA.Availability
        }
      }
       &&
    expr.or.element[3] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "radio_response" &&
        port.cia = CIA.Availability
        }
      }
      }
     &&
  rel.comment = "" &&
  rel.description = "" &&
  rel.phases = "" &&
  rel.extern = ""
  } &&
ct.cyber_relations.element[5] = some (rel: CyberRel) {
  rel.id = "dp_delivery_status_I" &&
  rel.output = some (port: CIAPort) {
    port.name = "delivery_cmd" &&
    port.cia = CIA.Integrity
    } &&
  rel.inputs = some (expr: CyberExpr) {
    expr.kind = CyberExprKind.Or &&
    expr.or.length = 4 &&
    expr.or.element[0] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "cur_pos" &&
        port.cia = CIA.Integrity
        }
      }
       &&
    expr.or.element[1] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "delivery_status" &&
        port.cia = CIA.Integrity
        }
      }
       &&
    expr.or.element[2] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "camera_result" &&
        port.cia = CIA.Integrity
        }
      }
       &&
    expr.or.element[3] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "radio_response" &&
        port.cia = CIA.Integrity
        }
      }
      }
     &&
  rel.comment = "" &&
  rel.description = "" &&
  rel.phases = "" &&
  rel.extern = ""
  } &&
ct.cyber_relations.element[6] = some (rel: CyberRel) {
  rel.id = "dp_cmd_out_A" &&
  rel.output = some (port: CIAPort) {
    port.name = "nav_cmd" &&
    port.cia = CIA.Availability
    } &&
  rel.inputs = some (expr: CyberExpr) {
    expr.kind = CyberExprKind.Or &&
    expr.or.length = 4 &&
    expr.or.element[0] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "cur_pos" &&
        port.cia = CIA.Availability
        }
      }
       &&
    expr.or.element[1] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "delivery_status" &&
        port.cia = CIA.Availability
        }
      }
       &&
    expr.or.element[2] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "camera_result" &&
        port.cia = CIA.Availability
        }
      }
       &&
    expr.or.element[3] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "radio_response" &&
        port.cia = CIA.Availability
        }
      }
      }
     &&
  rel.comment = "" &&
  rel.description = "" &&
  rel.phases = "" &&
  rel.extern = ""
  } &&
ct.cyber_relations.element[7] = some (rel: CyberRel) {
  rel.id = "dp_cmd_out_I" &&
  rel.output = some (port: CIAPort) {
    port.name = "nav_cmd" &&
    port.cia = CIA.Integrity
    } &&
  rel.inputs = some (expr: CyberExpr) {
    expr.kind = CyberExprKind.Or &&
    expr.or.length = 4 &&
    expr.or.element[0] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "cur_pos" &&
        port.cia = CIA.Integrity
        }
      }
       &&
    expr.or.element[1] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "delivery_status" &&
        port.cia = CIA.Integrity
        }
      }
       &&
    expr.or.element[2] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "camera_result" &&
        port.cia = CIA.Integrity
        }
      }
       &&
    expr.or.element[3] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "radio_response" &&
        port.cia = CIA.Integrity
        }
      }
      }
     &&
  rel.comment = "" &&
  rel.description = "" &&
  rel.phases = "" &&
  rel.extern = ""
  } &&
ct.cyber_relations.element[8] = some (rel: CyberRel) {
  rel.id = "dp_bus_out_A" &&
  rel.output = some (port: CIAPort) {
    port.name = "bus_out" &&
    port.cia = CIA.Availability
    } &&
  rel.inputs = some (expr: CyberExpr) {
    expr.kind = CyberExprKind.Or &&
    expr.or.length = 4 &&
    expr.or.element[0] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "cur_pos" &&
        port.cia = CIA.Availability
        }
      }
       &&
    expr.or.element[1] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "delivery_status" &&
        port.cia = CIA.Availability
        }
      }
       &&
    expr.or.element[2] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "camera_result" &&
        port.cia = CIA.Availability
        }
      }
       &&
    expr.or.element[3] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "radio_response" &&
        port.cia = CIA.Availability
        }
      }
      }
     &&
  rel.comment = "" &&
  rel.description = "" &&
  rel.phases = "" &&
  rel.extern = ""
  } &&
ct.cyber_relations.element[9] = some (rel: CyberRel) {
  rel.id = "dp_bus_out_I" &&
  rel.output = some (port: CIAPort) {
    port.name = "bus_out" &&
    port.cia = CIA.Integrity
    } &&
  rel.inputs = some (expr: CyberExpr) {
    expr.kind = CyberExprKind.Or &&
    expr.or.length = 4 &&
    expr.or.element[0] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "cur_pos" &&
        port.cia = CIA.Integrity
        }
      }
       &&
    expr.or.element[1] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "delivery_status" &&
        port.cia = CIA.Integrity
        }
      }
       &&
    expr.or.element[2] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "camera_result" &&
        port.cia = CIA.Integrity
        }
      }
       &&
    expr.or.element[3] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "radio_response" &&
        port.cia = CIA.Integrity
        }
      }
      }
     &&
  rel.comment = "" &&
  rel.description = "" &&
  rel.phases = "" &&
  rel.extern = ""
  } &&ct.safety_relations.length = 10 &&
ct.safety_relations.element[0] = some (rel: SafetyRel) {
  rel.id = "dp_radio_cmd_LOA" &&
  rel.output = some (port: IAPort) {
    port.name = "radio_cmd" &&
    port.ia = IA.Availability
    } &&
  rel.faultSrc = some (expr: SafetyExpr) {
    expr.kind = SafetyExprKind.Or &&
    expr.or.length = 5 &&
    expr.or.element[0] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Fault &&
      expr.fault = "loa_event"
      }
       &&
    expr.or.element[1] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "cur_pos" &&
        port.ia = IA.Availability
        }
      }
       &&
    expr.or.element[2] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "delivery_status" &&
        port.ia = IA.Availability
        }
      }
       &&
    expr.or.element[3] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "camera_result" &&
        port.ia = IA.Availability
        }
      }
       &&
    expr.or.element[4] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "radio_response" &&
        port.ia = IA.Availability
        }
      }
      }
     &&
  rel.comment = "" &&
  rel.description = ""
  } &&
ct.safety_relations.element[1] = some (rel: SafetyRel) {
  rel.id = "dp_radio_cmd_UED" &&
  rel.output = some (port: IAPort) {
    port.name = "radio_cmd" &&
    port.ia = IA.Integrity
    } &&
  rel.faultSrc = some (expr: SafetyExpr) {
    expr.kind = SafetyExprKind.Or &&
    expr.or.length = 5 &&
    expr.or.element[0] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Fault &&
      expr.fault = "ued_event"
      }
       &&
    expr.or.element[1] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "cur_pos" &&
        port.ia = IA.Integrity
        }
      }
       &&
    expr.or.element[2] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "delivery_status" &&
        port.ia = IA.Integrity
        }
      }
       &&
    expr.or.element[3] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "camera_result" &&
        port.ia = IA.Integrity
        }
      }
       &&
    expr.or.element[4] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "radio_response" &&
        port.ia = IA.Integrity
        }
      }
      }
     &&
  rel.comment = "" &&
  rel.description = ""
  } &&
ct.safety_relations.element[2] = some (rel: SafetyRel) {
  rel.id = "dp_camera_out_LOA" &&
  rel.output = some (port: IAPort) {
    port.name = "camera" &&
    port.ia = IA.Availability
    } &&
  rel.faultSrc = some (expr: SafetyExpr) {
    expr.kind = SafetyExprKind.Or &&
    expr.or.length = 5 &&
    expr.or.element[0] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Fault &&
      expr.fault = "loa_event"
      }
       &&
    expr.or.element[1] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "cur_pos" &&
        port.ia = IA.Availability
        }
      }
       &&
    expr.or.element[2] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "delivery_status" &&
        port.ia = IA.Availability
        }
      }
       &&
    expr.or.element[3] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "camera_result" &&
        port.ia = IA.Availability
        }
      }
       &&
    expr.or.element[4] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "radio_response" &&
        port.ia = IA.Availability
        }
      }
      }
     &&
  rel.comment = "" &&
  rel.description = ""
  } &&
ct.safety_relations.element[3] = some (rel: SafetyRel) {
  rel.id = "dp_camera_out_UED" &&
  rel.output = some (port: IAPort) {
    port.name = "camera" &&
    port.ia = IA.Integrity
    } &&
  rel.faultSrc = some (expr: SafetyExpr) {
    expr.kind = SafetyExprKind.Or &&
    expr.or.length = 5 &&
    expr.or.element[0] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Fault &&
      expr.fault = "ued_event"
      }
       &&
    expr.or.element[1] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "cur_pos" &&
        port.ia = IA.Integrity
        }
      }
       &&
    expr.or.element[2] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "delivery_status" &&
        port.ia = IA.Integrity
        }
      }
       &&
    expr.or.element[3] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "camera_result" &&
        port.ia = IA.Integrity
        }
      }
       &&
    expr.or.element[4] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "radio_response" &&
        port.ia = IA.Integrity
        }
      }
      }
     &&
  rel.comment = "" &&
  rel.description = ""
  } &&
ct.safety_relations.element[4] = some (rel: SafetyRel) {
  rel.id = "dp_delivery_status_LOA" &&
  rel.output = some (port: IAPort) {
    port.name = "delivery_cmd" &&
    port.ia = IA.Availability
    } &&
  rel.faultSrc = some (expr: SafetyExpr) {
    expr.kind = SafetyExprKind.Or &&
    expr.or.length = 5 &&
    expr.or.element[0] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Fault &&
      expr.fault = "loa_event"
      }
       &&
    expr.or.element[1] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "cur_pos" &&
        port.ia = IA.Availability
        }
      }
       &&
    expr.or.element[2] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "delivery_status" &&
        port.ia = IA.Availability
        }
      }
       &&
    expr.or.element[3] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "camera_result" &&
        port.ia = IA.Availability
        }
      }
       &&
    expr.or.element[4] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "radio_response" &&
        port.ia = IA.Availability
        }
      }
      }
     &&
  rel.comment = "" &&
  rel.description = ""
  } &&
ct.safety_relations.element[5] = some (rel: SafetyRel) {
  rel.id = "dp_delivery_status_UED" &&
  rel.output = some (port: IAPort) {
    port.name = "delivery_cmd" &&
    port.ia = IA.Integrity
    } &&
  rel.faultSrc = some (expr: SafetyExpr) {
    expr.kind = SafetyExprKind.Or &&
    expr.or.length = 5 &&
    expr.or.element[0] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Fault &&
      expr.fault = "ued_event"
      }
       &&
    expr.or.element[1] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "cur_pos" &&
        port.ia = IA.Integrity
        }
      }
       &&
    expr.or.element[2] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "delivery_status" &&
        port.ia = IA.Integrity
        }
      }
       &&
    expr.or.element[3] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "camera_result" &&
        port.ia = IA.Integrity
        }
      }
       &&
    expr.or.element[4] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "radio_response" &&
        port.ia = IA.Integrity
        }
      }
      }
     &&
  rel.comment = "" &&
  rel.description = ""
  } &&
ct.safety_relations.element[6] = some (rel: SafetyRel) {
  rel.id = "dp_cmd_out_LOA" &&
  rel.output = some (port: IAPort) {
    port.name = "nav_cmd" &&
    port.ia = IA.Availability
    } &&
  rel.faultSrc = some (expr: SafetyExpr) {
    expr.kind = SafetyExprKind.Or &&
    expr.or.length = 5 &&
    expr.or.element[0] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Fault &&
      expr.fault = "loa_event"
      }
       &&
    expr.or.element[1] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "cur_pos" &&
        port.ia = IA.Availability
        }
      }
       &&
    expr.or.element[2] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "delivery_status" &&
        port.ia = IA.Availability
        }
      }
       &&
    expr.or.element[3] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "camera_result" &&
        port.ia = IA.Availability
        }
      }
       &&
    expr.or.element[4] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "radio_response" &&
        port.ia = IA.Availability
        }
      }
      }
     &&
  rel.comment = "" &&
  rel.description = ""
  } &&
ct.safety_relations.element[7] = some (rel: SafetyRel) {
  rel.id = "dp_cmd_out_UED" &&
  rel.output = some (port: IAPort) {
    port.name = "nav_cmd" &&
    port.ia = IA.Integrity
    } &&
  rel.faultSrc = some (expr: SafetyExpr) {
    expr.kind = SafetyExprKind.Or &&
    expr.or.length = 5 &&
    expr.or.element[0] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Fault &&
      expr.fault = "ued_event"
      }
       &&
    expr.or.element[1] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "cur_pos" &&
        port.ia = IA.Integrity
        }
      }
       &&
    expr.or.element[2] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "delivery_status" &&
        port.ia = IA.Integrity
        }
      }
       &&
    expr.or.element[3] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "camera_result" &&
        port.ia = IA.Integrity
        }
      }
       &&
    expr.or.element[4] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "radio_response" &&
        port.ia = IA.Integrity
        }
      }
      }
     &&
  rel.comment = "" &&
  rel.description = ""
  } &&
ct.safety_relations.element[8] = some (rel: SafetyRel) {
  rel.id = "dp_bus_out_LOA" &&
  rel.output = some (port: IAPort) {
    port.name = "bus_out" &&
    port.ia = IA.Availability
    } &&
  rel.faultSrc = some (expr: SafetyExpr) {
    expr.kind = SafetyExprKind.Or &&
    expr.or.length = 5 &&
    expr.or.element[0] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Fault &&
      expr.fault = "loa_event"
      }
       &&
    expr.or.element[1] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "cur_pos" &&
        port.ia = IA.Availability
        }
      }
       &&
    expr.or.element[2] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "delivery_status" &&
        port.ia = IA.Availability
        }
      }
       &&
    expr.or.element[3] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "camera_result" &&
        port.ia = IA.Availability
        }
      }
       &&
    expr.or.element[4] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "radio_response" &&
        port.ia = IA.Availability
        }
      }
      }
     &&
  rel.comment = "" &&
  rel.description = ""
  } &&
ct.safety_relations.element[9] = some (rel: SafetyRel) {
  rel.id = "dp_bus_out_UED" &&
  rel.output = some (port: IAPort) {
    port.name = "bus_out" &&
    port.ia = IA.Integrity
    } &&
  rel.faultSrc = some (expr: SafetyExpr) {
    expr.kind = SafetyExprKind.Or &&
    expr.or.length = 5 &&
    expr.or.element[0] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Fault &&
      expr.fault = "ued_event"
      }
       &&
    expr.or.element[1] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "cur_pos" &&
        port.ia = IA.Integrity
        }
      }
       &&
    expr.or.element[2] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "delivery_status" &&
        port.ia = IA.Integrity
        }
      }
       &&
    expr.or.element[3] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "camera_result" &&
        port.ia = IA.Integrity
        }
      }
       &&
    expr.or.element[4] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "radio_response" &&
        port.ia = IA.Integrity
        }
      }
      }
     &&
  rel.comment = "" &&
  rel.description = ""
  } &&ct.safety_events.length = 2 &&
ct.safety_events.element[0] = some (ev: SafetyEvent) {
  ev.id = "ued_event" &&
  ev.probability = "1.0e-9" &&
  ev.comment = "undetected erroneous data of the DeliveryPlanner" &&
  ev.description = "UED"
  } &&
ct.safety_events.element[1] = some (ev: SafetyEvent) {
  ev.id = "loa_event" &&
  ev.probability = "1.0e-8" &&
  ev.comment = "loss of availability of the DeliveryPlanner" &&
  ev.description = "LOA"
  }} &&
m.component_types.element[8] = some (ct: ComponentType) {
  ct.name = "Radio" &&
  ct.ports.length = 5 &&
  ct.ports.element[0] = some(p: Port) {
    p.name = "comm_in" &&
    p.mode = PortMode.In &&
    p.is_event = false &&
    p.probe = false &&
    p.ptype = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[12]
  })} &&
ct.ports.element[1] = some(p: Port) {
  p.name = "radio_in" &&
  p.mode = PortMode.In &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(BoolType)} &&
ct.ports.element[2] = some(p: Port) {
  p.name = "comm_out" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(BoolType)} &&
ct.ports.element[3] = some(p: Port) {
  p.name = "radio_out" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[12]})} &&
ct.ports.element[4] = some(p: Port) {
  p.name = "health_status" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(BoolType)} &&
ct.compCateg = mk_some<String>("system") &&
ct.contract = mk_some<ContractSpec>(some (csp: ContractSpec) {
  csp.constant_declarations.length = 0 &&
  csp.variable_declarations.length = 0 &&
  csp.assumes.length = 0 &&
  csp.guarantees.length = 2 &&
  csp.guarantees.element[0] = some (ci: ContractItem) {
    ci.name = mk_some<Identifier>("Radio receives data from remote communication channel if there is a request") &&
    ci.expression = some (e: Expression) {
      e.kind = ExpressionKind.Implies &&
      e.implies = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "radio_in"
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.And &&
          e.and = some (bo: BinaryOperation) {
            bo.lhs_operand = some (e: Expression) {
              e.kind = ExpressionKind.Equal &&
              e.equal = some (bo: BinaryOperation) {
                bo.lhs_operand = some (e: Expression) {
                  e.kind = ExpressionKind.RecordProjection &&
                  e.record_projection = some (rp: RecordProjection) {
                    rp.record_reference = some (e: Expression) {
                      e.kind = ExpressionKind.Id &&
                      e.identifier = "radio_out"
                    } &&
                    rp.field_id = "data_available"
                  }
                } &&
                bo.rhs_operand = some (e: Expression) {
                  e.kind = ExpressionKind.RecordProjection &&
                  e.record_projection = some (rp: RecordProjection) {
                    rp.record_reference = some (e: Expression) {
                      e.kind = ExpressionKind.Id &&
                      e.identifier = "comm_in"
                    } &&
                    rp.field_id = "data_available"
                  }
                }
              }
            } &&
            bo.rhs_operand = some (e: Expression) {
              e.kind = ExpressionKind.Equal &&
              e.equal = some (bo: BinaryOperation) {
                bo.lhs_operand = some (e: Expression) {
                  e.kind = ExpressionKind.RecordProjection &&
                  e.record_projection = some (rp: RecordProjection) {
                    rp.record_reference = some (e: Expression) {
                      e.kind = ExpressionKind.Id &&
                      e.identifier = "comm_in"
                    } &&
                    rp.field_id = "target_confirmed"
                  }
                } &&
                bo.rhs_operand = some (e: Expression) {
                  e.kind = ExpressionKind.RecordProjection &&
                  e.record_projection = some (rp: RecordProjection) {
                    rp.record_reference = some (e: Expression) {
                      e.kind = ExpressionKind.Id &&
                      e.identifier = "radio_out"
                    } &&
                    rp.field_id = "target_confirmed"
                  }
                }
              }
            }
          }
        }
      }
    }
  } &&
  csp.guarantees.element[1] = some (ci: ContractItem) {
    ci.name = mk_some<Identifier>("Without a request, no radio data is available") &&
    ci.expression = some (e: Expression) {
      e.kind = ExpressionKind.Implies &&
      e.implies = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Not &&
          e.not = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "radio_in"
          }
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Not &&
          e.not = some (e: Expression) {
            e.kind = ExpressionKind.RecordProjection &&
            e.record_projection = some (rp: RecordProjection) {
              rp.record_reference = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "radio_out"
              } &&
              rp.field_id = "data_available"
            }
          }
        }
      }
    }
  } &&
  csp.modes.length = 0 &&
  csp.imports.length = 0}) &&ct.cyber_relations.length = 4 &&
ct.cyber_relations.element[0] = some (rel: CyberRel) {
  rel.id = "plan_out_A" &&
  rel.output = some (port: CIAPort) {
    port.name = "radio_out" &&
    port.cia = CIA.Availability
    } &&
  rel.inputs = some (expr: CyberExpr) {
    expr.kind = CyberExprKind.Port &&
    expr.port = some (port: CIAPort) {
      port.name = "radio_in" &&
      port.cia = CIA.Availability
      }
    }
     &&
  rel.comment = "" &&
  rel.description = "" &&
  rel.phases = "" &&
  rel.extern = ""
  } &&
ct.cyber_relations.element[1] = some (rel: CyberRel) {
  rel.id = "plan_out_I" &&
  rel.output = some (port: CIAPort) {
    port.name = "radio_out" &&
    port.cia = CIA.Integrity
    } &&
  rel.inputs = some (expr: CyberExpr) {
    expr.kind = CyberExprKind.Port &&
    expr.port = some (port: CIAPort) {
      port.name = "radio_in" &&
      port.cia = CIA.Integrity
      }
    }
     &&
  rel.comment = "" &&
  rel.description = "" &&
  rel.phases = "" &&
  rel.extern = ""
  } &&
ct.cyber_relations.element[2] = some (rel: CyberRel) {
  rel.id = "comm_out_A" &&
  rel.output = some (port: CIAPort) {
    port.name = "comm_out" &&
    port.cia = CIA.Availability
    } &&
  rel.inputs = some (expr: CyberExpr) {
    expr.kind = CyberExprKind.Port &&
    expr.port = some (port: CIAPort) {
      port.name = "comm_in" &&
      port.cia = CIA.Availability
      }
    }
     &&
  rel.comment = "" &&
  rel.description = "" &&
  rel.phases = "" &&
  rel.extern = ""
  } &&
ct.cyber_relations.element[3] = some (rel: CyberRel) {
  rel.id = "comm_out_I" &&
  rel.output = some (port: CIAPort) {
    port.name = "comm_out" &&
    port.cia = CIA.Integrity
    } &&
  rel.inputs = some (expr: CyberExpr) {
    expr.kind = CyberExprKind.Port &&
    expr.port = some (port: CIAPort) {
      port.name = "comm_in" &&
      port.cia = CIA.Integrity
      }
    }
     &&
  rel.comment = "" &&
  rel.description = "" &&
  rel.phases = "" &&
  rel.extern = ""
  } &&ct.safety_relations.length = 4 &&
ct.safety_relations.element[0] = some (rel: SafetyRel) {
  rel.id = "plan_out_LOA" &&
  rel.output = some (port: IAPort) {
    port.name = "radio_out" &&
    port.ia = IA.Availability
    } &&
  rel.faultSrc = some (expr: SafetyExpr) {
    expr.kind = SafetyExprKind.Or &&
    expr.or.length = 2 &&
    expr.or.element[0] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Fault &&
      expr.fault = "loa_event"
      }
       &&
    expr.or.element[1] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "radio_in" &&
        port.ia = IA.Availability
        }
      }
      }
     &&
  rel.comment = "" &&
  rel.description = ""
  } &&
ct.safety_relations.element[1] = some (rel: SafetyRel) {
  rel.id = "plan_out_UED" &&
  rel.output = some (port: IAPort) {
    port.name = "radio_out" &&
    port.ia = IA.Integrity
    } &&
  rel.faultSrc = some (expr: SafetyExpr) {
    expr.kind = SafetyExprKind.Or &&
    expr.or.length = 2 &&
    expr.or.element[0] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Fault &&
      expr.fault = "ued_event"
      }
       &&
    expr.or.element[1] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "radio_in" &&
        port.ia = IA.Integrity
        }
      }
      }
     &&
  rel.comment = "" &&
  rel.description = ""
  } &&
ct.safety_relations.element[2] = some (rel: SafetyRel) {
  rel.id = "comm_out_LOA" &&
  rel.output = some (port: IAPort) {
    port.name = "comm_out" &&
    port.ia = IA.Availability
    } &&
  rel.faultSrc = some (expr: SafetyExpr) {
    expr.kind = SafetyExprKind.Or &&
    expr.or.length = 2 &&
    expr.or.element[0] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Fault &&
      expr.fault = "loa_event"
      }
       &&
    expr.or.element[1] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "comm_in" &&
        port.ia = IA.Availability
        }
      }
      }
     &&
  rel.comment = "" &&
  rel.description = ""
  } &&
ct.safety_relations.element[3] = some (rel: SafetyRel) {
  rel.id = "comm_out_UED" &&
  rel.output = some (port: IAPort) {
    port.name = "comm_out" &&
    port.ia = IA.Integrity
    } &&
  rel.faultSrc = some (expr: SafetyExpr) {
    expr.kind = SafetyExprKind.Or &&
    expr.or.length = 2 &&
    expr.or.element[0] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Fault &&
      expr.fault = "ued_event"
      }
       &&
    expr.or.element[1] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "comm_in" &&
        port.ia = IA.Integrity
        }
      }
      }
     &&
  rel.comment = "" &&
  rel.description = ""
  } &&ct.safety_events.length = 2 &&
ct.safety_events.element[0] = some (ev: SafetyEvent) {
  ev.id = "ued_event" &&
  ev.probability = "1.0e-9" &&
  ev.comment = "undetected erroneous data of the Radio" &&
  ev.description = "UED"
  } &&
ct.safety_events.element[1] = some (ev: SafetyEvent) {
  ev.id = "loa_event" &&
  ev.probability = "1.0e-8" &&
  ev.comment = "loss of availability of the Radio" &&
  ev.description = "LOA"
  }} &&
m.component_types.element[9] = some (ct: ComponentType) {
  ct.name = "DeliveryItemMechanism" &&
  ct.ports.length = 3 &&
  ct.ports.element[0] = some(p: Port) {
    p.name = "delivery_cmd_in" &&
    p.mode = PortMode.In &&
    p.is_event = false &&
    p.probe = false &&
    p.ptype = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[8]
  })} &&
ct.ports.element[1] = some(p: Port) {
  p.name = "delivery_status_out" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[2]})} &&
ct.ports.element[2] = some(p: Port) {
  p.name = "package_is_secure" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(BoolType)} &&
ct.compCateg = mk_some<String>("system") &&
ct.contract = mk_some<ContractSpec>(some (csp: ContractSpec) {
  csp.constant_declarations.length = 0 &&
  csp.variable_declarations.length = 3 &&
  csp.variable_declarations.element[0] = some (sd: SymbolDefinition) {
    sd.name = "release_cmd" &&
    sd.dtype = BoolType &&
    sd.definition = some (e: Expression) {
      e.kind = ExpressionKind.Equal &&
      e.equal = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "delivery_cmd_in"
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "RELEASE_PACKAGE_CMD"
        }
      }
    }
  } &&
  csp.variable_declarations.element[1] = some (sd: SymbolDefinition) {
    sd.name = "abort_cmd" &&
    sd.dtype = BoolType &&
    sd.definition = some (e: Expression) {
      e.kind = ExpressionKind.Equal &&
      e.equal = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "delivery_cmd_in"
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "ABORT_DELIVERY_CMD"
        }
      }
    }
  } &&
  csp.variable_declarations.element[2] = some (sd: SymbolDefinition) {
    sd.name = "no_op_cmd" &&
    sd.dtype = BoolType &&
    sd.definition = some (e: Expression) {
      e.kind = ExpressionKind.Equal &&
      e.equal = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "delivery_cmd_in"
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "NO_OPERATION_CMD"
        }
      }
    }
  } &&
  csp.assumes.length = 0 &&
  csp.guarantees.length = 3 &&
  csp.guarantees.element[0] = some (ci: ContractItem) {
    ci.name = mk_some<Identifier>("Initially, delivery status is NOT_STARTED") &&
    ci.expression = some (e: Expression) {
      e.kind = ExpressionKind.Call &&
      e.call = some (cll: NodeCall) {
        cll.node = "InitiallyX" &&
        cll.arguments.length = 1 &&
        cll.arguments.element[0] = some (e: Expression) {
          e.kind = ExpressionKind.Equal &&
          e.equal = some (bo: BinaryOperation) {
            bo.lhs_operand = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "delivery_status_out"
            } &&
            bo.rhs_operand = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "NOT_STARTED_STATUS"
            }
          }
        }
      }
    }
  } &&
  csp.guarantees.element[1] = some (ci: ContractItem) {
    ci.name = mk_some<Identifier>("if no op or abort command have received then delivery status gets re-started") &&
    ci.expression = some (e: Expression) {
      e.kind = ExpressionKind.Arrow &&
      e.arrow = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.BoolLiteral &&
          e.bool_literal = true
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Implies &&
          e.implies = some (bo: BinaryOperation) {
            bo.lhs_operand = some (e: Expression) {
              e.kind = ExpressionKind.Or &&
              e.or = some (bo: BinaryOperation) {
                bo.lhs_operand = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "no_op_cmd"
                } &&
                bo.rhs_operand = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "abort_cmd"
                }
              }
            } &&
            bo.rhs_operand = some (e: Expression) {
              e.kind = ExpressionKind.Equal &&
              e.equal = some (bo: BinaryOperation) {
                bo.lhs_operand = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "delivery_status_out"
                } &&
                bo.rhs_operand = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "NOT_STARTED_STATUS"
                }
              }
            }
          }
        }
      }
    }
  } &&
  csp.guarantees.element[2] = some (ci: ContractItem) {
    ci.name = mk_some<Identifier>("If delivery command is issued, delivery status is different from NOT_STARTED") &&
    ci.expression = some (e: Expression) {
      e.kind = ExpressionKind.Arrow &&
      e.arrow = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.BoolLiteral &&
          e.bool_literal = true
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Implies &&
          e.implies = some (bo: BinaryOperation) {
            bo.lhs_operand = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "release_cmd"
            } &&
            bo.rhs_operand = some (e: Expression) {
              e.kind = ExpressionKind.NotEqual &&
              e.not_equal = some (bo: BinaryOperation) {
                bo.lhs_operand = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "delivery_status_out"
                } &&
                bo.rhs_operand = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "NOT_STARTED_STATUS"
                }
              }
            }
          }
        }
      }
    }
  } &&
  csp.modes.length = 0 &&
  csp.imports.length = 0}) &&ct.cyber_relations.length = 2 &&
ct.cyber_relations.element[0] = some (rel: CyberRel) {
  rel.id = "delivery_status_out_A" &&
  rel.output = some (port: CIAPort) {
    port.name = "delivery_status_out" &&
    port.cia = CIA.Availability
    } &&
  rel.inputs = some (expr: CyberExpr) {
    expr.kind = CyberExprKind.Port &&
    expr.port = some (port: CIAPort) {
      port.name = "delivery_cmd_in" &&
      port.cia = CIA.Availability
      }
    }
     &&
  rel.comment = "" &&
  rel.description = "" &&
  rel.phases = "" &&
  rel.extern = ""
  } &&
ct.cyber_relations.element[1] = some (rel: CyberRel) {
  rel.id = "delivery_status_out_I" &&
  rel.output = some (port: CIAPort) {
    port.name = "delivery_status_out" &&
    port.cia = CIA.Integrity
    } &&
  rel.inputs = some (expr: CyberExpr) {
    expr.kind = CyberExprKind.Port &&
    expr.port = some (port: CIAPort) {
      port.name = "delivery_cmd_in" &&
      port.cia = CIA.Integrity
      }
    }
     &&
  rel.comment = "" &&
  rel.description = "" &&
  rel.phases = "" &&
  rel.extern = ""
  } &&ct.safety_relations.length = 2 &&
ct.safety_relations.element[0] = some (rel: SafetyRel) {
  rel.id = "delivery_status_out_LOA" &&
  rel.output = some (port: IAPort) {
    port.name = "delivery_status_out" &&
    port.ia = IA.Availability
    } &&
  rel.faultSrc = some (expr: SafetyExpr) {
    expr.kind = SafetyExprKind.Or &&
    expr.or.length = 2 &&
    expr.or.element[0] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Fault &&
      expr.fault = "loa_event"
      }
       &&
    expr.or.element[1] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "delivery_cmd_in" &&
        port.ia = IA.Availability
        }
      }
      }
     &&
  rel.comment = "" &&
  rel.description = ""
  } &&
ct.safety_relations.element[1] = some (rel: SafetyRel) {
  rel.id = "delivery_status_out_UED" &&
  rel.output = some (port: IAPort) {
    port.name = "delivery_status_out" &&
    port.ia = IA.Integrity
    } &&
  rel.faultSrc = some (expr: SafetyExpr) {
    expr.kind = SafetyExprKind.Or &&
    expr.or.length = 2 &&
    expr.or.element[0] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Fault &&
      expr.fault = "ued_event"
      }
       &&
    expr.or.element[1] = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Port &&
      expr.port = some (port: IAPort) {
        port.name = "delivery_cmd_in" &&
        port.ia = IA.Integrity
        }
      }
      }
     &&
  rel.comment = "" &&
  rel.description = ""
  } &&ct.safety_events.length = 2 &&
ct.safety_events.element[0] = some (ev: SafetyEvent) {
  ev.id = "ued_event" &&
  ev.probability = "1.0e-9" &&
  ev.comment = "undetected erroneous data of the DeliveryItemMechanism" &&
  ev.description = "UED"
  } &&
ct.safety_events.element[1] = some (ev: SafetyEvent) {
  ev.id = "loa_event" &&
  ev.probability = "1.0e-8" &&
  ev.comment = "loss of availability of the DeliveryItemMechanism" &&
  ev.description = "LOA"
  }} &&
m.component_types.element[10] = some (ct: ComponentType) {
  ct.name = "Camera" &&
  ct.ports.length = 3 &&
  ct.ports.element[0] = some(p: Port) {
    p.name = "camera_in" &&
    p.mode = PortMode.In &&
    p.is_event = false &&
    p.probe = false &&
    p.ptype = mk_some<DataType>(BoolType)
  } &&
  ct.ports.element[1] = some(p: Port) {
    p.name = "camera_out" &&
    p.mode = PortMode.Out &&
    p.is_event = false &&
    p.probe = false &&
    p.ptype = mk_some<DataType>(IntegerType)
  } &&
  ct.ports.element[2] = some(p: Port) {
    p.name = "health_status" &&
    p.mode = PortMode.Out &&
    p.is_event = false &&
    p.probe = false &&
    p.ptype = mk_some<DataType>(BoolType)
  } &&
  ct.compCateg = mk_some<String>("system") &&
  ct.contract = mk_none<ContractSpec> &&
  ct.cyber_relations.length = 2 &&
  ct.cyber_relations.element[0] = some (rel: CyberRel) {
    rel.id = "camera_out_A" &&
    rel.output = some (port: CIAPort) {
      port.name = "camera_out" &&
      port.cia = CIA.Availability
      } &&
    rel.inputs = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "camera_in" &&
        port.cia = CIA.Availability
        }
      }
       &&
    rel.comment = "" &&
    rel.description = "" &&
    rel.phases = "" &&
    rel.extern = ""
    
  } &&
  ct.cyber_relations.element[1] = some (rel: CyberRel) {
    rel.id = "camera_out_I" &&
    rel.output = some (port: CIAPort) {
      port.name = "camera_out" &&
      port.cia = CIA.Integrity
      } &&
    rel.inputs = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "camera_in" &&
        port.cia = CIA.Integrity
        }
      }
       &&
    rel.comment = "" &&
    rel.description = "" &&
    rel.phases = "" &&
    rel.extern = ""
    
  } &&
  ct.safety_relations.length = 2 &&
  ct.safety_relations.element[0] = some (rel: SafetyRel) {
    rel.id = "camera_out_LOA" &&
    rel.output = some (port: IAPort) {
      port.name = "camera_out" &&
      port.ia = IA.Availability
      } &&
    rel.faultSrc = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Or &&
      expr.or.length = 2 &&
      expr.or.element[0] = some (expr: SafetyExpr) {
        expr.kind = SafetyExprKind.Fault &&
        expr.fault = "loa_event"
        }
         &&
      expr.or.element[1] = some (expr: SafetyExpr) {
        expr.kind = SafetyExprKind.Port &&
        expr.port = some (port: IAPort) {
          port.name = "camera_in" &&
          port.ia = IA.Availability
          }
        }
        }
       &&
    rel.comment = "" &&
    rel.description = ""
    
  } &&
  ct.safety_relations.element[1] = some (rel: SafetyRel) {
    rel.id = "camera_out_UED" &&
    rel.output = some (port: IAPort) {
      port.name = "camera_out" &&
      port.ia = IA.Integrity
      } &&
    rel.faultSrc = some (expr: SafetyExpr) {
      expr.kind = SafetyExprKind.Or &&
      expr.or.length = 2 &&
      expr.or.element[0] = some (expr: SafetyExpr) {
        expr.kind = SafetyExprKind.Fault &&
        expr.fault = "ued_event"
        }
         &&
      expr.or.element[1] = some (expr: SafetyExpr) {
        expr.kind = SafetyExprKind.Port &&
        expr.port = some (port: IAPort) {
          port.name = "camera_in" &&
          port.ia = IA.Integrity
          }
        }
        }
       &&
    rel.comment = "" &&
    rel.description = ""
    
  } &&
  ct.safety_events.length = 2 &&
  ct.safety_events.element[0] = some (ev: SafetyEvent) {
    ev.id = "ued_event" &&
    ev.probability = "1.0e-9" &&
    ev.comment = "undetected erroneous data of the Camera" &&
    ev.description = "UED"
    
  } &&
  ct.safety_events.element[1] = some (ev: SafetyEvent) {
    ev.id = "loa_event" &&
    ev.probability = "1.0e-8" &&
    ev.comment = "loss of availability of the Camera" &&
    ev.description = "LOA"
    
  }} &&
m.component_types.element[11] = some (ct: ComponentType) {
  ct.name = "Connector" &&
  ct.ports.length = 2 &&
  ct.ports.element[0] = some(p: Port) {
    p.name = "bus_in" &&
    p.mode = PortMode.In &&
    p.is_event = false &&
    p.probe = false &&
    p.ptype = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[11]
  })} &&
ct.ports.element[1] = some(p: Port) {
  p.name = "bus_out" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[11]})} &&
ct.compCateg = mk_some<String>("system") &&
ct.contract = mk_some<ContractSpec>(some (csp: ContractSpec) {
  csp.constant_declarations.length = 0 &&
  csp.variable_declarations.length = 0 &&
  csp.assumes.length = 0 &&
  csp.guarantees.length = 1 &&
  csp.guarantees.element[0] = some (ci: ContractItem) {
    ci.name = mk_some<Identifier>("Output: bus_out") &&
    ci.expression = some (e: Expression) {
      e.kind = ExpressionKind.Equal &&
      e.equal = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "bus_out"
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "bus_in"
        }
      }
    }
  } &&
  csp.modes.length = 0 &&
  csp.imports.length = 0}) &&ct.cyber_relations.length = 2 &&
ct.cyber_relations.element[0] = some (rel: CyberRel) {
  rel.id = "bus_out_A" &&
  rel.output = some (port: CIAPort) {
    port.name = "bus_out" &&
    port.cia = CIA.Availability
    } &&
  rel.inputs = some (expr: CyberExpr) {
    expr.kind = CyberExprKind.Port &&
    expr.port = some (port: CIAPort) {
      port.name = "bus_in" &&
      port.cia = CIA.Availability
      }
    }
     &&
  rel.comment = "" &&
  rel.description = "" &&
  rel.phases = "" &&
  rel.extern = ""
  } &&
ct.cyber_relations.element[1] = some (rel: CyberRel) {
  rel.id = "bus_out_I" &&
  rel.output = some (port: CIAPort) {
    port.name = "bus_out" &&
    port.cia = CIA.Integrity
    } &&
  rel.inputs = some (expr: CyberExpr) {
    expr.kind = CyberExprKind.Port &&
    expr.port = some (port: CIAPort) {
      port.name = "bus_in" &&
      port.cia = CIA.Integrity
      }
    }
     &&
  rel.comment = "" &&
  rel.description = "" &&
  rel.phases = "" &&
  rel.extern = ""
  } &&ct.safety_relations.length = 2 &&
ct.safety_relations.element[0] = some (rel: SafetyRel) {
  rel.id = "bus_out_UED" &&
  rel.output = some (port: IAPort) {
    port.name = "bus_out" &&
    port.ia = IA.Integrity
    } &&
  rel.faultSrc = some (expr: SafetyExpr) {
    expr.kind = SafetyExprKind.Fault &&
    expr.fault = "ued_event"
    }
     &&
  rel.comment = "" &&
  rel.description = ""
  } &&
ct.safety_relations.element[1] = some (rel: SafetyRel) {
  rel.id = "bus_out_LOA" &&
  rel.output = some (port: IAPort) {
    port.name = "bus_out" &&
    port.ia = IA.Availability
    } &&
  rel.faultSrc = some (expr: SafetyExpr) {
    expr.kind = SafetyExprKind.Fault &&
    expr.fault = "loa_event"
    }
     &&
  rel.comment = "" &&
  rel.description = ""
  } &&ct.safety_events.length = 2 &&
ct.safety_events.element[0] = some (ev: SafetyEvent) {
  ev.id = "ued_event" &&
  ev.probability = "1.0e-9" &&
  ev.comment = "undetected erroneous data of the connector" &&
  ev.description = "UED"
  } &&
ct.safety_events.element[1] = some (ev: SafetyEvent) {
  ev.id = "loa_event" &&
  ev.probability = "1.0e-8" &&
  ev.comment = "loss of availability of the connector" &&
  ev.description = "LOA"
  }} &&
m.component_types.element[12] = some (ct: ComponentType) {
  ct.name = "DeliveryDroneSystem" &&
  ct.ports.length = 17 &&
  ct.ports.element[0] = some(p: Port) {
    p.name = "satellite0_sig_pos" &&
    p.mode = PortMode.In &&
    p.is_event = false &&
    p.probe = false &&
    p.ptype = mk_some<DataType>(some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[9]
  })} &&
ct.ports.element[1] = some(p: Port) {
  p.name = "satellite1_sig_pos" &&
  p.mode = PortMode.In &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[9]})} &&
ct.ports.element[2] = some(p: Port) {
  p.name = "bus1" &&
  p.mode = PortMode.In &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[11]})} &&
ct.ports.element[3] = some(p: Port) {
  p.name = "comm1" &&
  p.mode = PortMode.In &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[12]})} &&
ct.ports.element[4] = some(p: Port) {
  p.name = "comm2" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(BoolType)} &&
ct.ports.element[5] = some(p: Port) {
  p.name = "bus2" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(BoolType)} &&
ct.ports.element[6] = some(p: Port) {
  p.name = "radio_cmd" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = true &&
  p.ptype = mk_some<DataType>(BoolType)} &&
ct.ports.element[7] = some(p: Port) {
  p.name = "radio_response" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = true &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[12]})} &&
ct.ports.element[8] = some(p: Port) {
  p.name = "delivery_status" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = true &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[2]})} &&
ct.ports.element[9] = some(p: Port) {
  p.name = "actuation_out" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = false &&
  p.ptype = mk_some<DataType>(BoolType)} &&
ct.ports.element[10] = some(p: Port) {
  p.name = "probe_init_mode" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = true &&
  p.ptype = mk_some<DataType>(BoolType)} &&
ct.ports.element[11] = some(p: Port) {
  p.name = "probe_abort_mode" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = true &&
  p.ptype = mk_some<DataType>(BoolType)} &&
ct.ports.element[12] = some(p: Port) {
  p.name = "probe_delivery_cmd" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = true &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[8]})} &&
ct.ports.element[13] = some(p: Port) {
  p.name = "probe_constellation" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = true &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[3]})} &&
ct.ports.element[14] = some(p: Port) {
  p.name = "probe_launch_location" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = true &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[9]})} &&
ct.ports.element[15] = some(p: Port) {
  p.name = "probe_delivery_location" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = true &&
  p.ptype = mk_some<DataType>(some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[9]})} &&
ct.ports.element[16] = some(p: Port) {
  p.name = "probe_fly_cmd" &&
  p.mode = PortMode.Out &&
  p.is_event = false &&
  p.probe = true &&
  p.ptype = mk_some<DataType>(BoolType)} &&
ct.compCateg = mk_some<String>("system") &&
ct.contract = mk_some<ContractSpec>(some (csp: ContractSpec) {
  csp.constant_declarations.length = 0 &&
  csp.variable_declarations.length = 12 &&
  csp.variable_declarations.element[0] = some (sd: SymbolDefinition) {
    sd.name = "delivery_started" &&
    sd.dtype = BoolType &&
    sd.definition = some (e: Expression) {
      e.kind = ExpressionKind.NotEqual &&
      e.not_equal = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "delivery_status"
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "NOT_STARTED_STATUS"
        }
      }
    }
  } &&
  csp.variable_declarations.element[1] = some (sd: SymbolDefinition) {
    sd.name = "confirmation_requested" &&
    sd.dtype = BoolType &&
    sd.definition = some (e: Expression) {
      e.kind = ExpressionKind.Call &&
      e.call = some (cll: NodeCall) {
        cll.node = "HasHappened" &&
        cll.arguments.length = 1 &&
        cll.arguments.element[0] = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "radio_cmd"
        }
      }
    }
  } &&
  csp.variable_declarations.element[2] = some (sd: SymbolDefinition) {
    sd.name = "acknowledge_received" &&
    sd.dtype = BoolType &&
    sd.definition = some (e: Expression) {
      e.kind = ExpressionKind.And &&
      e.and = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.RecordProjection &&
          e.record_projection = some (rp: RecordProjection) {
            rp.record_reference = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "comm1"
            } &&
            rp.field_id = "data_available"
          }
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.RecordProjection &&
          e.record_projection = some (rp: RecordProjection) {
            rp.record_reference = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "comm1"
            } &&
            rp.field_id = "target_confirmed"
          }
        }
      }
    }
  } &&
  csp.variable_declarations.element[3] = some (sd: SymbolDefinition) {
    sd.name = "target_confirmed" &&
    sd.dtype = BoolType &&
    sd.definition = some (e: Expression) {
      e.kind = ExpressionKind.Call &&
      e.call = some (cll: NodeCall) {
        cll.node = "HasHappened" &&
        cll.arguments.length = 1 &&
        cll.arguments.element[0] = some (e: Expression) {
          e.kind = ExpressionKind.And &&
          e.and = some (bo: BinaryOperation) {
            bo.lhs_operand = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "confirmation_requested"
            } &&
            bo.rhs_operand = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "acknowledge_received"
            }
          }
        }
      }
    }
  } &&
  csp.variable_declarations.element[4] = some (sd: SymbolDefinition) {
    sd.name = "valuable_package" &&
    sd.dtype = BoolType &&
    sd.definition = some (e: Expression) {
      e.kind = ExpressionKind.GreaterThanOrEqualTo &&
      e.greater_than_or_equal_to = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.RecordProjection &&
          e.record_projection = some (rp: RecordProjection) {
            rp.record_reference = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "most_recent_order"
            } &&
            rp.field_id = "item_value"
          }
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "ITEM_VALUE_THRESHOLD"
        }
      }
    }
  } &&
  csp.variable_declarations.element[5] = some (sd: SymbolDefinition) {
    sd.name = "power_signal" &&
    sd.dtype = BoolType &&
    sd.definition = some (e: Expression) {
      e.kind = ExpressionKind.And &&
      e.and = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.RecordProjection &&
          e.record_projection = some (rp: RecordProjection) {
            rp.record_reference = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "bus1"
            } &&
            rp.field_id = "on_off"
          }
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.RecordProjection &&
          e.record_projection = some (rp: RecordProjection) {
            rp.record_reference = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "bus1"
            } &&
            rp.field_id = "connected"
          }
        }
      }
    }
  } &&
  csp.variable_declarations.element[6] = some (sd: SymbolDefinition) {
    sd.name = "isOn" &&
    sd.dtype = BoolType &&
    sd.definition = some (e: Expression) {
      e.kind = ExpressionKind.Arrow &&
      e.arrow = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.BoolLiteral &&
          e.bool_literal = false
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.ConditionalExpr &&
          e.conditional_expr = some (ite: IfThenElse) {
            ite.condition = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "power_signal"
            } &&
            ite.thenBranch = some (e: Expression) {
              e.kind = ExpressionKind.Not &&
              e.not = some (e: Expression) {
                e.kind = ExpressionKind.Pre &&
                e.pre = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "isOn"
                }
              }
            } &&
            ite.elseBranch = some (e: Expression) {
              e.kind = ExpressionKind.Pre &&
              e.pre = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "isOn"
              }
            }
          }
        }
      }
    }
  } &&
  csp.variable_declarations.element[7] = some (sd: SymbolDefinition) {
    sd.name = "most_recent_constellation" &&
    sd.dtype = some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[3]
  } &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.ConditionalExpr &&
    e.conditional_expr = some (ite: IfThenElse) {
      ite.condition = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "probe_init_mode"
      } &&
      ite.thenBranch = some (e: Expression) {
        e.kind = ExpressionKind.RecordProjection &&
        e.record_projection = some (rp: RecordProjection) {
          rp.record_reference = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "bus1"
          } &&
          rp.field_id = "constellation"
        }
      } &&
      ite.elseBranch = some (e: Expression) {
        e.kind = ExpressionKind.Arrow &&
        e.arrow = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.RecordProjection &&
            e.record_projection = some (rp: RecordProjection) {
              rp.record_reference = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "bus1"
              } &&
              rp.field_id = "constellation"
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Pre &&
            e.pre = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "most_recent_constellation"
            }
          }
        }
      }
    }
  }} &&
csp.variable_declarations.element[8] = some (sd: SymbolDefinition) {
  sd.name = "most_recent_launch_location" &&
  sd.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[9]} &&
sd.definition = some (e: Expression) {
  e.kind = ExpressionKind.ConditionalExpr &&
  e.conditional_expr = some (ite: IfThenElse) {
    ite.condition = some (e: Expression) {
      e.kind = ExpressionKind.Id &&
      e.identifier = "probe_init_mode"
    } &&
    ite.thenBranch = some (e: Expression) {
      e.kind = ExpressionKind.RecordProjection &&
      e.record_projection = some (rp: RecordProjection) {
        rp.record_reference = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "bus1"
        } &&
        rp.field_id = "launch_pos"
      }
    } &&
    ite.elseBranch = some (e: Expression) {
      e.kind = ExpressionKind.Arrow &&
      e.arrow = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.RecordProjection &&
          e.record_projection = some (rp: RecordProjection) {
            rp.record_reference = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "bus1"
            } &&
            rp.field_id = "launch_pos"
          }
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Pre &&
          e.pre = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "most_recent_launch_location"
          }
        }
      }
    }
  }}} &&
csp.variable_declarations.element[9] = some (sd: SymbolDefinition) {
  sd.name = "most_recent_order" &&
  sd.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[10]} &&
sd.definition = some (e: Expression) {
  e.kind = ExpressionKind.ConditionalExpr &&
  e.conditional_expr = some (ite: IfThenElse) {
    ite.condition = some (e: Expression) {
      e.kind = ExpressionKind.Id &&
      e.identifier = "probe_init_mode"
    } &&
    ite.thenBranch = some (e: Expression) {
      e.kind = ExpressionKind.RecordProjection &&
      e.record_projection = some (rp: RecordProjection) {
        rp.record_reference = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "bus1"
        } &&
        rp.field_id = "order"
      }
    } &&
    ite.elseBranch = some (e: Expression) {
      e.kind = ExpressionKind.Arrow &&
      e.arrow = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.RecordProjection &&
          e.record_projection = some (rp: RecordProjection) {
            rp.record_reference = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "bus1"
            } &&
            rp.field_id = "order"
          }
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Pre &&
          e.pre = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "most_recent_order"
          }
        }
      }
    }
  }}} &&
csp.variable_declarations.element[10] = some (sd: SymbolDefinition) {
  sd.name = "most_recent_delivery_location" &&
  sd.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[9]} &&
sd.definition = some (e: Expression) {
  e.kind = ExpressionKind.RecordProjection &&
  e.record_projection = some (rp: RecordProjection) {
    rp.record_reference = some (e: Expression) {
      e.kind = ExpressionKind.Id &&
      e.identifier = "most_recent_order"
    } &&
    rp.field_id = "target_position"
  }}} &&
csp.variable_declarations.element[11] = some (sd: SymbolDefinition) {
  sd.name = "release_cmd" &&
  sd.dtype = BoolType &&
  sd.definition = some (e: Expression) {
    e.kind = ExpressionKind.Equal &&
    e.equal = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "probe_delivery_cmd"
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "RELEASE_PACKAGE_CMD"
      }
    }
  }} &&csp.assumes.length = 0 &&csp.guarantees.length = 6 &&
csp.guarantees.element[0] = some (ci: ContractItem) {
  ci.name = mk_some<Identifier>("P1: Constellation for GPS is initialized properly") &&
  ci.expression = some (e: Expression) {
    e.kind = ExpressionKind.Implies &&
    e.implies = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "isOn"
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Equal &&
        e.equal = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "most_recent_constellation"
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "probe_constellation"
          }
        }
      }
    }
  }} &&
csp.guarantees.element[1] = some (ci: ContractItem) {
  ci.name = mk_some<Identifier>("P2: Launch location for IMU is initialized properly") &&
  ci.expression = some (e: Expression) {
    e.kind = ExpressionKind.Implies &&
    e.implies = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "isOn"
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Equal &&
        e.equal = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "most_recent_launch_location"
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "probe_launch_location"
          }
        }
      }
    }
  }} &&
csp.guarantees.element[2] = some (ci: ContractItem) {
  ci.name = mk_some<Identifier>("P3: Delivery location for navigation is initialized properly") &&
  ci.expression = some (e: Expression) {
    e.kind = ExpressionKind.Implies &&
    e.implies = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "isOn"
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Equal &&
        e.equal = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "most_recent_delivery_location"
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "probe_delivery_location"
          }
        }
      }
    }
  }} &&
csp.guarantees.element[3] = some (ci: ContractItem) {
  ci.name = mk_some<Identifier>("P4: A command to release a valuable package is issued only if drone has received confirmation from base") &&
  ci.expression = some (e: Expression) {
    e.kind = ExpressionKind.Implies &&
    e.implies = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.And &&
        e.and = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "release_cmd"
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "valuable_package"
          }
        }
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "target_confirmed"
      }
    }
  }} &&
csp.guarantees.element[4] = some (ci: ContractItem) {
  ci.name = mk_some<Identifier>("P5: The drone will always request a confirmation to base before starting delivery of a valuable package") &&
  ci.expression = some (e: Expression) {
    e.kind = ExpressionKind.Implies &&
    e.implies = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.And &&
        e.and = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "delivery_started"
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "valuable_package"
          }
        }
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "confirmation_requested"
      }
    }
  }} &&
csp.guarantees.element[5] = some (ci: ContractItem) {
  ci.name = mk_some<Identifier>("P6: The drone is flying only if since last initialization the mission was not aborted") &&
  ci.expression = some (e: Expression) {
    e.kind = ExpressionKind.Implies &&
    e.implies = some (bo: BinaryOperation) {
      bo.lhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Id &&
        e.identifier = "probe_fly_cmd"
      } &&
      bo.rhs_operand = some (e: Expression) {
        e.kind = ExpressionKind.Call &&
        e.call = some (cll: NodeCall) {
          cll.node = "Since" &&
          cll.arguments.length = 2 &&
          cll.arguments.element[0] = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "probe_init_mode"
          } &&
          cll.arguments.element[1] = some (e: Expression) {
            e.kind = ExpressionKind.Not &&
            e.not = some (e: Expression) {
              e.kind = ExpressionKind.Id &&
              e.identifier = "probe_abort_mode"
            }
          }
        }
      }
    }
  }} &&csp.modes.length = 0 &&csp.imports.length = 0}) &&
ct.cyber_relations.length = 0  &&ct.safety_relations.length = 0  &&
ct.safety_events.length = 0 } &&
m.dataflow_code = mk_some<LustreProgram>(some (dfm: LustreProgram) {
  dfm.type_declarations.length = 0 &&
  dfm.constant_declarations.length = 9 &&
  dfm.constant_declarations.element[0] = some (ctd: ConstantDeclaration) {
    ctd.name = "ITEM_VALUE_THRESHOLD" &&
    ctd.dtype = RealType &&
    ctd.definition = mk_some<Expression>(some (e: Expression) {
      e.kind = ExpressionKind.RealLiteral &&
      e.real_literal = 100.0
    })
  } &&
  dfm.constant_declarations.element[1] = some (ctd: ConstantDeclaration) {
    ctd.name = "WAITING_CONFIRMATION_THRESHOLD" &&
    ctd.dtype = IntegerType &&
    ctd.definition = mk_some<Expression>(some (e: Expression) {
      e.kind = ExpressionKind.IntLiteral &&
      e.int_literal = 10
    })
  } &&
  dfm.constant_declarations.element[2] = some (ctd: ConstantDeclaration) {
    ctd.name = "MAXIMUM_NUMBER_OF_RETRIES" &&
    ctd.dtype = IntegerType &&
    ctd.definition = mk_some<Expression>(some (e: Expression) {
      e.kind = ExpressionKind.IntLiteral &&
      e.int_literal = 3
    })
  } &&
  dfm.constant_declarations.element[3] = some (ctd: ConstantDeclaration) {
    ctd.name = "RELEASE_PACKAGE_CMD" &&
    ctd.dtype = some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[8]
  } &&
  ctd.definition = mk_some<Expression>(some (e: Expression) {
    e.kind = ExpressionKind.Id &&
    e.identifier = "RELEASE_PACKAGE"
  })} &&
dfm.constant_declarations.element[4] = some (ctd: ConstantDeclaration) {
  ctd.name = "ABORT_DELIVERY_CMD" &&
  ctd.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[8]} &&
ctd.definition = mk_some<Expression>(some (e: Expression) {
  e.kind = ExpressionKind.Id &&
  e.identifier = "ABORT_DELIVERY"})} &&
dfm.constant_declarations.element[5] = some (ctd: ConstantDeclaration) {
  ctd.name = "NO_OPERATION_CMD" &&
  ctd.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[8]} &&
ctd.definition = mk_some<Expression>(some (e: Expression) {
  e.kind = ExpressionKind.Id &&
  e.identifier = "NO_OPERATION"})} &&
dfm.constant_declarations.element[6] = some (ctd: ConstantDeclaration) {
  ctd.name = "NOT_STARTED_STATUS" &&
  ctd.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[2]} &&
ctd.definition = mk_some<Expression>(some (e: Expression) {
  e.kind = ExpressionKind.Id &&
  e.identifier = "NOT_STARTED"})} &&
dfm.constant_declarations.element[7] = some (ctd: ConstantDeclaration) {
  ctd.name = "FAILED_STATUS" &&
  ctd.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[2]} &&
ctd.definition = mk_some<Expression>(some (e: Expression) {
  e.kind = ExpressionKind.Id &&
  e.identifier = "FAILED"})} &&
dfm.constant_declarations.element[8] = some (ctd: ConstantDeclaration) {
  ctd.name = "COMPLETED_STATUS" &&
  ctd.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[2]} &&
ctd.definition = mk_some<Expression>(some (e: Expression) {
  e.kind = ExpressionKind.Id &&
  e.identifier = "COMPLETED"})} &&dfm.contract_declarations.length = 0 &&
dfm.node_declarations.length = 8 &&
dfm.node_declarations.element[0] = some (nd: Node) {
  nd.name = "HasHappened" &&
  nd.is_function = false &&
  nd.is_main = false &&
  nd.input_parameters.length = 1 &&
  nd.input_parameters.element[0] = some (ip: InputParameter) {
    ip.name = "X" &&
    ip.dtype = BoolType &&
    ip.is_constant = false
  } &&
  nd.output_parameters.length = 1 &&
  nd.output_parameters.element[0] = some (op: OutputParameter) {
    op.name = "Y" &&
    op.dtype = BoolType
  } &&
  nd.contract = mk_none<ContractSpec> &&
  nd.body = mk_some<NodeBody>(some (nb: NodeBody) {
    nb.constant_declarations.length = 0 &&
    nb.variable_declarations.length = 0 &&
    nb.assertions.length = 0 &&
    nb.equations.length = 1 &&
    nb.equations.element[0] = some (eq: NodeEquation) {
      eq.lhs.length = 1 &&
      eq.lhs.element[0] = "Y" &&
      eq.rhs = some (e: Expression) {
        e.kind = ExpressionKind.Or &&
        e.or = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "X"
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Arrow &&
            e.arrow = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.BoolLiteral &&
                e.bool_literal = false
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Pre &&
                e.pre = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "Y"
                }
              }
            }
          }
        }
      }
    } &&
    nb.properties.length = 0
  })} &&
dfm.node_declarations.element[1] = some (nd: Node) {
  nd.name = "InitiallyX" &&
  nd.is_function = false &&
  nd.is_main = false &&
  nd.input_parameters.length = 1 &&
  nd.input_parameters.element[0] = some (ip: InputParameter) {
    ip.name = "X" &&
    ip.dtype = BoolType &&
    ip.is_constant = false
  } &&
  nd.output_parameters.length = 1 &&
  nd.output_parameters.element[0] = some (op: OutputParameter) {
    op.name = "Y" &&
    op.dtype = BoolType
  } &&
  nd.contract = mk_none<ContractSpec> &&
  nd.body = mk_some<NodeBody>(some (nb: NodeBody) {
    nb.constant_declarations.length = 0 &&
    nb.variable_declarations.length = 0 &&
    nb.assertions.length = 0 &&
    nb.equations.length = 1 &&
    nb.equations.element[0] = some (eq: NodeEquation) {
      eq.lhs.length = 1 &&
      eq.lhs.element[0] = "Y" &&
      eq.rhs = some (e: Expression) {
        e.kind = ExpressionKind.Arrow &&
        e.arrow = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "X"
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.BoolLiteral &&
            e.bool_literal = true
          }
        }
      }
    } &&
    nb.properties.length = 0
  })} &&
dfm.node_declarations.element[2] = some (nd: Node) {
  nd.name = "FirstLocation" &&
  nd.is_function = false &&
  nd.is_main = false &&
  nd.input_parameters.length = 1 &&
  nd.input_parameters.element[0] = some (ip: InputParameter) {
    ip.name = "X" &&
    ip.dtype = some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[9]
  } &&
  ip.is_constant = false} &&nd.output_parameters.length = 1 &&
nd.output_parameters.element[0] = some (op: OutputParameter) {
  op.name = "Y" &&
  op.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[9]}} &&
nd.contract = mk_none<ContractSpec> &&
nd.body = mk_some<NodeBody>(some (nb: NodeBody) {
  nb.constant_declarations.length = 0 &&
  nb.variable_declarations.length = 0 &&
  nb.assertions.length = 0 &&
  nb.equations.length = 1 &&
  nb.equations.element[0] = some (eq: NodeEquation) {
    eq.lhs.length = 1 &&
    eq.lhs.element[0] = "Y" &&
    eq.rhs = some (e: Expression) {
      e.kind = ExpressionKind.Arrow &&
      e.arrow = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "X"
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Pre &&
          e.pre = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "Y"
          }
        }
      }
    }
  } &&
  nb.properties.length = 0})} &&
dfm.node_declarations.element[3] = some (nd: Node) {
  nd.name = "close_locations" &&
  nd.is_function = false &&
  nd.is_main = false &&
  nd.input_parameters.length = 2 &&
  nd.input_parameters.element[0] = some (ip: InputParameter) {
    ip.name = "p1" &&
    ip.dtype = some (dt: DataType) {
      dt.kind = DataTypeKind.UserDefined &&
      dt.user_defined_type = m.type_declarations.element[9]
  } &&
  ip.is_constant = false} &&
nd.input_parameters.element[1] = some (ip: InputParameter) {
  ip.name = "p2" &&
  ip.dtype = some (dt: DataType) {
    dt.kind = DataTypeKind.UserDefined &&
    dt.user_defined_type = m.type_declarations.element[9]} &&
ip.is_constant = false} &&nd.output_parameters.length = 1 &&
nd.output_parameters.element[0] = some (op: OutputParameter) {
  op.name = "are_close" &&
  op.dtype = BoolType} &&nd.contract = mk_none<ContractSpec> &&
nd.body = mk_some<NodeBody>(some (nb: NodeBody) {
  nb.constant_declarations.length = 0 &&
  nb.variable_declarations.length = 0 &&
  nb.assertions.length = 0 &&
  nb.equations.length = 1 &&
  nb.equations.element[0] = some (eq: NodeEquation) {
    eq.lhs.length = 1 &&
    eq.lhs.element[0] = "are_close" &&
    eq.rhs = some (e: Expression) {
      e.kind = ExpressionKind.Equal &&
      e.equal = some (bo: BinaryOperation) {
        bo.lhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "p1"
        } &&
        bo.rhs_operand = some (e: Expression) {
          e.kind = ExpressionKind.Id &&
          e.identifier = "p2"
        }
      }
    }
  } &&
  nb.properties.length = 0})} &&
dfm.node_declarations.element[4] = some (nd: Node) {
  nd.name = "Duration" &&
  nd.is_function = false &&
  nd.is_main = false &&
  nd.input_parameters.length = 1 &&
  nd.input_parameters.element[0] = some (ip: InputParameter) {
    ip.name = "p" &&
    ip.dtype = BoolType &&
    ip.is_constant = false
  } &&
  nd.output_parameters.length = 1 &&
  nd.output_parameters.element[0] = some (op: OutputParameter) {
    op.name = "r" &&
    op.dtype = IntegerType
  } &&
  nd.contract = mk_none<ContractSpec> &&
  nd.body = mk_some<NodeBody>(some (nb: NodeBody) {
    nb.constant_declarations.length = 0 &&
    nb.variable_declarations.length = 0 &&
    nb.assertions.length = 0 &&
    nb.equations.length = 1 &&
    nb.equations.element[0] = some (eq: NodeEquation) {
      eq.lhs.length = 1 &&
      eq.lhs.element[0] = "r" &&
      eq.rhs = some (e: Expression) {
        e.kind = ExpressionKind.Arrow &&
        e.arrow = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.ConditionalExpr &&
            e.conditional_expr = some (ite: IfThenElse) {
              ite.condition = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "p"
              } &&
              ite.thenBranch = some (e: Expression) {
                e.kind = ExpressionKind.IntLiteral &&
                e.int_literal = 1
              } &&
              ite.elseBranch = some (e: Expression) {
                e.kind = ExpressionKind.IntLiteral &&
                e.int_literal = 0
              }
            }
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.ConditionalExpr &&
            e.conditional_expr = some (ite: IfThenElse) {
              ite.condition = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "p"
              } &&
              ite.thenBranch = some (e: Expression) {
                e.kind = ExpressionKind.Plus &&
                e.plus = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Pre &&
                    e.pre = some (e: Expression) {
                      e.kind = ExpressionKind.Id &&
                      e.identifier = "r"
                    }
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.IntLiteral &&
                    e.int_literal = 1
                  }
                }
              } &&
              ite.elseBranch = some (e: Expression) {
                e.kind = ExpressionKind.IntLiteral &&
                e.int_literal = 0
              }
            }
          }
        }
      }
    } &&
    nb.properties.length = 0
  })} &&
dfm.node_declarations.element[5] = some (nd: Node) {
  nd.name = "Sofar" &&
  nd.is_function = false &&
  nd.is_main = false &&
  nd.input_parameters.length = 1 &&
  nd.input_parameters.element[0] = some (ip: InputParameter) {
    ip.name = "X" &&
    ip.dtype = BoolType &&
    ip.is_constant = false
  } &&
  nd.output_parameters.length = 1 &&
  nd.output_parameters.element[0] = some (op: OutputParameter) {
    op.name = "Y" &&
    op.dtype = BoolType
  } &&
  nd.contract = mk_none<ContractSpec> &&
  nd.body = mk_some<NodeBody>(some (nb: NodeBody) {
    nb.constant_declarations.length = 0 &&
    nb.variable_declarations.length = 0 &&
    nb.assertions.length = 0 &&
    nb.equations.length = 1 &&
    nb.equations.element[0] = some (eq: NodeEquation) {
      eq.lhs.length = 1 &&
      eq.lhs.element[0] = "Y" &&
      eq.rhs = some (e: Expression) {
        e.kind = ExpressionKind.Arrow &&
        e.arrow = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "X"
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.And &&
            e.and = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "X"
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Pre &&
                e.pre = some (e: Expression) {
                  e.kind = ExpressionKind.Id &&
                  e.identifier = "Y"
                }
              }
            }
          }
        }
      }
    } &&
    nb.properties.length = 0
  })} &&
dfm.node_declarations.element[6] = some (nd: Node) {
  nd.name = "Since" &&
  nd.is_function = false &&
  nd.is_main = false &&
  nd.input_parameters.length = 2 &&
  nd.input_parameters.element[0] = some (ip: InputParameter) {
    ip.name = "X" &&
    ip.dtype = BoolType &&
    ip.is_constant = false
  } &&
  nd.input_parameters.element[1] = some (ip: InputParameter) {
    ip.name = "Y" &&
    ip.dtype = BoolType &&
    ip.is_constant = false
  } &&
  nd.output_parameters.length = 1 &&
  nd.output_parameters.element[0] = some (op: OutputParameter) {
    op.name = "Z" &&
    op.dtype = BoolType
  } &&
  nd.contract = mk_none<ContractSpec> &&
  nd.body = mk_some<NodeBody>(some (nb: NodeBody) {
    nb.constant_declarations.length = 0 &&
    nb.variable_declarations.length = 0 &&
    nb.assertions.length = 0 &&
    nb.equations.length = 1 &&
    nb.equations.element[0] = some (eq: NodeEquation) {
      eq.lhs.length = 1 &&
      eq.lhs.element[0] = "Z" &&
      eq.rhs = some (e: Expression) {
        e.kind = ExpressionKind.Or &&
        e.or = some (bo: BinaryOperation) {
          bo.lhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "X"
          } &&
          bo.rhs_operand = some (e: Expression) {
            e.kind = ExpressionKind.And &&
            e.and = some (bo: BinaryOperation) {
              bo.lhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Id &&
                e.identifier = "Y"
              } &&
              bo.rhs_operand = some (e: Expression) {
                e.kind = ExpressionKind.Arrow &&
                e.arrow = some (bo: BinaryOperation) {
                  bo.lhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.BoolLiteral &&
                    e.bool_literal = false
                  } &&
                  bo.rhs_operand = some (e: Expression) {
                    e.kind = ExpressionKind.Pre &&
                    e.pre = some (e: Expression) {
                      e.kind = ExpressionKind.Id &&
                      e.identifier = "Z"
                    }
                  }
                }
              }
            }
          }
        }
      }
    } &&
    nb.properties.length = 0
  })} &&
dfm.node_declarations.element[7] = some (nd: Node) {
  nd.name = "ToInt" &&
  nd.is_function = false &&
  nd.is_main = false &&
  nd.input_parameters.length = 1 &&
  nd.input_parameters.element[0] = some (ip: InputParameter) {
    ip.name = "b" &&
    ip.dtype = BoolType &&
    ip.is_constant = false
  } &&
  nd.output_parameters.length = 1 &&
  nd.output_parameters.element[0] = some (op: OutputParameter) {
    op.name = "i" &&
    op.dtype = IntegerType
  } &&
  nd.contract = mk_none<ContractSpec> &&
  nd.body = mk_some<NodeBody>(some (nb: NodeBody) {
    nb.constant_declarations.length = 0 &&
    nb.variable_declarations.length = 0 &&
    nb.assertions.length = 0 &&
    nb.equations.length = 1 &&
    nb.equations.element[0] = some (eq: NodeEquation) {
      eq.lhs.length = 1 &&
      eq.lhs.element[0] = "i" &&
      eq.rhs = some (e: Expression) {
        e.kind = ExpressionKind.ConditionalExpr &&
        e.conditional_expr = some (ite: IfThenElse) {
          ite.condition = some (e: Expression) {
            e.kind = ExpressionKind.Id &&
            e.identifier = "b"
          } &&
          ite.thenBranch = some (e: Expression) {
            e.kind = ExpressionKind.IntLiteral &&
            e.int_literal = 1
          } &&
          ite.elseBranch = some (e: Expression) {
            e.kind = ExpressionKind.IntLiteral &&
            e.int_literal = 0
          }
        }
      }
    } &&
    nb.properties.length = 0
  })}}) &&m.component_impl.length = 2 &&
m.component_impl.element[0] = some (ci: ComponentImpl) {
  ci.name = "GNC.Impl" &&
  ci.ctype = m.component_types.element[2] &&
  ci.kind = ComponentImplKind.Block_Impl &&
  ci.block_impl = some (imp: BlockImpl) {
    imp.subcomponents.length = 2 &&
    imp.subcomponents.element[0] = some (ci: ComponentInstance) {
      ci.name = "gps" &&
      ci.kind = ComponentInstanceKind.Specification &&
      ci.specification = m.component_types.element[0] &&
      ci.attributes.length = 42 &&
       ci.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "zeroize" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "userAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "tamperProtection" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "systemAccessControl" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[4] = some (ga: GenericAttribute) {
         ga.name = "supplyChainSecurity" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[5] = some (ga: GenericAttribute) {
         ga.name = "Supply_Chain_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[6] = some (ga: GenericAttribute) {
         ga.name = "strongCryptoAlgorithms" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[7] = some (ga: GenericAttribute) {
         ga.name = "staticCodeAnalysis" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[8] = some (ga: GenericAttribute) {
         ga.name = "Sniffing_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[9] = some (ga: GenericAttribute) {
         ga.name = "secureBoot" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[10] = some (ga: GenericAttribute) {
         ga.name = "resourceIsolation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[11] = some (ga: GenericAttribute) {
         ga.name = "resourceAvailability" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[12] = some (ga: GenericAttribute) {
         ga.name = "removeIdentifyingInformation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[13] = some (ga: GenericAttribute) {
         ga.name = "remoteAttestation" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[14] = some (ga: GenericAttribute) {
         ga.name = "physicalAccessControl" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[15] = some (ga: GenericAttribute) {
         ga.name = "Physical_Theft_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[16] = some (ga: GenericAttribute) {
         ga.name = "pedigree" &&
         ga.atype = String &&
         ga.value = "COTS"
         
      } &&
       ci.attributes.element[17] = some (ga: GenericAttribute) {
         ga.name = "memoryProtection" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[18] = some (ga: GenericAttribute) {
         ga.name = "logging" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[19] = some (ga: GenericAttribute) {
         ga.name = "Interception_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[20] = some (ga: GenericAttribute) {
         ga.name = "insideTrustedBoundary" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[21] = some (ga: GenericAttribute) {
         ga.name = "inputValidation" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[22] = some (ga: GenericAttribute) {
         ga.name = "Identity_Spoofing_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[23] = some (ga: GenericAttribute) {
         ga.name = "heterogeneity" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[24] = some (ga: GenericAttribute) {
         ga.name = "hasSensitiveInfo" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[25] = some (ga: GenericAttribute) {
         ga.name = "Hardware_Integrity_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[26] = some (ga: GenericAttribute) {
         ga.name = "Flooding_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[27] = some (ga: GenericAttribute) {
         ga.name = "Fault_Injection_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[28] = some (ga: GenericAttribute) {
         ga.name = "failSafe" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[29] = some (ga: GenericAttribute) {
         ga.name = "Excessive_Allocation_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[30] = some (ga: GenericAttribute) {
         ga.name = "encryptedStorage" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[31] = some (ga: GenericAttribute) {
         ga.name = "dosProtection" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[32] = some (ga: GenericAttribute) {
         ga.name = "Configuration_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[33] = some (ga: GenericAttribute) {
         ga.name = "componentType" &&
         ga.atype = String &&
         ga.value = "Hybrid"
         
      } &&
       ci.attributes.element[34] = some (ga: GenericAttribute) {
         ga.name = "category" &&
         ga.atype = String &&
         ga.value = "Unknown"
         
      } &&
       ci.attributes.element[35] = some (ga: GenericAttribute) {
         ga.name = "canReceiveSWUpdate" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[36] = some (ga: GenericAttribute) {
         ga.name = "canReceiveConfigUpdate" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[37] = some (ga: GenericAttribute) {
         ga.name = "Buffer_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[38] = some (ga: GenericAttribute) {
         ga.name = "Brute_Force_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[39] = some (ga: GenericAttribute) {
         ga.name = "auditMessageResponses" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[40] = some (ga: GenericAttribute) {
         ga.name = "antiJamming" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[41] = some (ga: GenericAttribute) {
         ga.name = "adversariallyTestedForTrojanOrLogicBomb" &&
         ga.atype = Int &&
         ga.value = "0"
         
      }
    } &&
    imp.subcomponents.element[1] = some (ci: ComponentInstance) {
      ci.name = "imu" &&
      ci.kind = ComponentInstanceKind.Specification &&
      ci.specification = m.component_types.element[1] &&
      ci.attributes.length = 42 &&
       ci.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "zeroize" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "userAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "tamperProtection" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "systemAccessControl" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[4] = some (ga: GenericAttribute) {
         ga.name = "supplyChainSecurity" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[5] = some (ga: GenericAttribute) {
         ga.name = "Supply_Chain_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[6] = some (ga: GenericAttribute) {
         ga.name = "strongCryptoAlgorithms" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[7] = some (ga: GenericAttribute) {
         ga.name = "staticCodeAnalysis" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[8] = some (ga: GenericAttribute) {
         ga.name = "Sniffing_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[9] = some (ga: GenericAttribute) {
         ga.name = "secureBoot" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[10] = some (ga: GenericAttribute) {
         ga.name = "resourceIsolation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[11] = some (ga: GenericAttribute) {
         ga.name = "resourceAvailability" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[12] = some (ga: GenericAttribute) {
         ga.name = "removeIdentifyingInformation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[13] = some (ga: GenericAttribute) {
         ga.name = "remoteAttestation" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[14] = some (ga: GenericAttribute) {
         ga.name = "physicalAccessControl" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[15] = some (ga: GenericAttribute) {
         ga.name = "Physical_Theft_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[16] = some (ga: GenericAttribute) {
         ga.name = "pedigree" &&
         ga.atype = String &&
         ga.value = "Sourced"
         
      } &&
       ci.attributes.element[17] = some (ga: GenericAttribute) {
         ga.name = "memoryProtection" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[18] = some (ga: GenericAttribute) {
         ga.name = "logging" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[19] = some (ga: GenericAttribute) {
         ga.name = "Interception_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[20] = some (ga: GenericAttribute) {
         ga.name = "insideTrustedBoundary" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[21] = some (ga: GenericAttribute) {
         ga.name = "inputValidation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[22] = some (ga: GenericAttribute) {
         ga.name = "Identity_Spoofing_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[23] = some (ga: GenericAttribute) {
         ga.name = "heterogeneity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[24] = some (ga: GenericAttribute) {
         ga.name = "hasSensitiveInfo" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[25] = some (ga: GenericAttribute) {
         ga.name = "Hardware_Integrity_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[26] = some (ga: GenericAttribute) {
         ga.name = "Flooding_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[27] = some (ga: GenericAttribute) {
         ga.name = "Fault_Injection_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[28] = some (ga: GenericAttribute) {
         ga.name = "failSafe" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[29] = some (ga: GenericAttribute) {
         ga.name = "Excessive_Allocation_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[30] = some (ga: GenericAttribute) {
         ga.name = "encryptedStorage" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[31] = some (ga: GenericAttribute) {
         ga.name = "dosProtection" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[32] = some (ga: GenericAttribute) {
         ga.name = "Configuration_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[33] = some (ga: GenericAttribute) {
         ga.name = "componentType" &&
         ga.atype = String &&
         ga.value = "Hybrid"
         
      } &&
       ci.attributes.element[34] = some (ga: GenericAttribute) {
         ga.name = "category" &&
         ga.atype = String &&
         ga.value = "Unknown"
         
      } &&
       ci.attributes.element[35] = some (ga: GenericAttribute) {
         ga.name = "canReceiveSWUpdate" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[36] = some (ga: GenericAttribute) {
         ga.name = "canReceiveConfigUpdate" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[37] = some (ga: GenericAttribute) {
         ga.name = "Buffer_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[38] = some (ga: GenericAttribute) {
         ga.name = "Brute_Force_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[39] = some (ga: GenericAttribute) {
         ga.name = "auditMessageResponses" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[40] = some (ga: GenericAttribute) {
         ga.name = "antiJamming" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[41] = some (ga: GenericAttribute) {
         ga.name = "adversariallyTestedForTrojanOrLogicBomb" &&
         ga.atype = Int &&
         ga.value = "0"
         
      }
    } &&
    imp.connections.length = 10 &&
    imp.connections.element[0] = some (c: Connection) {
      c.name = "i1" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.ComponentCE &&
        src.component_port = m.component_types.element[2].ports.element[0]
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[0] &&
          sp.port = m.component_types.element[0].ports.element[0]
        }
      }
    } &&
    imp.connections.element[1] = some (c: Connection) {
      c.name = "i2" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.ComponentCE &&
        src.component_port = m.component_types.element[2].ports.element[1]
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[0] &&
          sp.port = m.component_types.element[0].ports.element[1]
        }
      }
    } &&
    imp.connections.element[2] = some (c: Connection) {
      c.name = "i3" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.ComponentCE &&
        src.component_port = m.component_types.element[2].ports.element[2]
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[0] &&
          sp.port = m.component_types.element[0].ports.element[2]
        }
      }
    } &&
    imp.connections.element[3] = some (c: Connection) {
      c.name = "i4" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.ComponentCE &&
        src.component_port = m.component_types.element[2].ports.element[3]
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[1] &&
          sp.port = m.component_types.element[1].ports.element[0]
        }
      }
    } &&
    imp.connections.element[4] = some (c: Connection) {
      c.name = "i5" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[0] &&
          sp.port = m.component_types.element[0].ports.element[3]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.ComponentCE &&
        dst.component_port = m.component_types.element[2].ports.element[4]
      }
    } &&
    imp.connections.element[5] = some (c: Connection) {
      c.name = "i6" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[0] &&
          sp.port = m.component_types.element[0].ports.element[4]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.ComponentCE &&
        dst.component_port = m.component_types.element[2].ports.element[5]
      }
    } &&
    imp.connections.element[6] = some (c: Connection) {
      c.name = "i7" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[0] &&
          sp.port = m.component_types.element[0].ports.element[5]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.ComponentCE &&
        dst.component_port = m.component_types.element[2].ports.element[6]
      }
    } &&
    imp.connections.element[7] = some (c: Connection) {
      c.name = "i8" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[1] &&
          sp.port = m.component_types.element[1].ports.element[1]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.ComponentCE &&
        dst.component_port = m.component_types.element[2].ports.element[7]
      }
    } &&
    imp.connections.element[8] = some (c: Connection) {
      c.name = "i9" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[1] &&
          sp.port = m.component_types.element[1].ports.element[2]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.ComponentCE &&
        dst.component_port = m.component_types.element[2].ports.element[8]
      }
    } &&
    imp.connections.element[9] = some (c: Connection) {
      c.name = "i10" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[1] &&
          sp.port = m.component_types.element[1].ports.element[3]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.ComponentCE &&
        dst.component_port = m.component_types.element[2].ports.element[9]
      }
    }
  }} &&
m.component_impl.element[1] = some (ci: ComponentImpl) {
  ci.name = "DeliveryDroneSystem.Impl" &&
  ci.ctype = m.component_types.element[12] &&
  ci.kind = ComponentImplKind.Block_Impl &&
  ci.block_impl = some (imp: BlockImpl) {
    imp.subcomponents.length = 10 &&
    imp.subcomponents.element[0] = some (ci: ComponentInstance) {
      ci.name = "gnc" &&
      ci.kind = ComponentInstanceKind.Implementation &&
      ci.implementation = m.component_impl.element[0] &&
      ci.attributes.length = 42 &&
       ci.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "zeroize" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "userAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "tamperProtection" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "systemAccessControl" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[4] = some (ga: GenericAttribute) {
         ga.name = "supplyChainSecurity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[5] = some (ga: GenericAttribute) {
         ga.name = "Supply_Chain_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[6] = some (ga: GenericAttribute) {
         ga.name = "strongCryptoAlgorithms" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[7] = some (ga: GenericAttribute) {
         ga.name = "staticCodeAnalysis" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[8] = some (ga: GenericAttribute) {
         ga.name = "Sniffing_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[9] = some (ga: GenericAttribute) {
         ga.name = "secureBoot" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[10] = some (ga: GenericAttribute) {
         ga.name = "resourceIsolation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[11] = some (ga: GenericAttribute) {
         ga.name = "resourceAvailability" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[12] = some (ga: GenericAttribute) {
         ga.name = "removeIdentifyingInformation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[13] = some (ga: GenericAttribute) {
         ga.name = "remoteAttestation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[14] = some (ga: GenericAttribute) {
         ga.name = "physicalAccessControl" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[15] = some (ga: GenericAttribute) {
         ga.name = "Physical_Theft_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[16] = some (ga: GenericAttribute) {
         ga.name = "pedigree" &&
         ga.atype = String &&
         ga.value = "COTS"
         
      } &&
       ci.attributes.element[17] = some (ga: GenericAttribute) {
         ga.name = "memoryProtection" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[18] = some (ga: GenericAttribute) {
         ga.name = "logging" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[19] = some (ga: GenericAttribute) {
         ga.name = "Interception_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[20] = some (ga: GenericAttribute) {
         ga.name = "insideTrustedBoundary" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[21] = some (ga: GenericAttribute) {
         ga.name = "inputValidation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[22] = some (ga: GenericAttribute) {
         ga.name = "Identity_Spoofing_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[23] = some (ga: GenericAttribute) {
         ga.name = "heterogeneity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[24] = some (ga: GenericAttribute) {
         ga.name = "hasSensitiveInfo" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[25] = some (ga: GenericAttribute) {
         ga.name = "Hardware_Integrity_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[26] = some (ga: GenericAttribute) {
         ga.name = "Flooding_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[27] = some (ga: GenericAttribute) {
         ga.name = "Fault_Injection_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[28] = some (ga: GenericAttribute) {
         ga.name = "failSafe" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[29] = some (ga: GenericAttribute) {
         ga.name = "Excessive_Allocation_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[30] = some (ga: GenericAttribute) {
         ga.name = "encryptedStorage" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[31] = some (ga: GenericAttribute) {
         ga.name = "dosProtection" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[32] = some (ga: GenericAttribute) {
         ga.name = "Configuration_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[33] = some (ga: GenericAttribute) {
         ga.name = "componentType" &&
         ga.atype = String &&
         ga.value = "Hybrid"
         
      } &&
       ci.attributes.element[34] = some (ga: GenericAttribute) {
         ga.name = "category" &&
         ga.atype = String &&
         ga.value = "Unknown"
         
      } &&
       ci.attributes.element[35] = some (ga: GenericAttribute) {
         ga.name = "canReceiveSWUpdate" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[36] = some (ga: GenericAttribute) {
         ga.name = "canReceiveConfigUpdate" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[37] = some (ga: GenericAttribute) {
         ga.name = "Buffer_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[38] = some (ga: GenericAttribute) {
         ga.name = "Brute_Force_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[39] = some (ga: GenericAttribute) {
         ga.name = "auditMessageResponses" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[40] = some (ga: GenericAttribute) {
         ga.name = "antiJamming" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[41] = some (ga: GenericAttribute) {
         ga.name = "adversariallyTestedForTrojanOrLogicBomb" &&
         ga.atype = Int &&
         ga.value = "0"
         
      }
    } &&
    imp.subcomponents.element[1] = some (ci: ComponentInstance) {
      ci.name = "radio" &&
      ci.kind = ComponentInstanceKind.Specification &&
      ci.specification = m.component_types.element[8] &&
      ci.attributes.length = 42 &&
       ci.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "zeroize" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "userAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "tamperProtection" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "systemAccessControl" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[4] = some (ga: GenericAttribute) {
         ga.name = "supplyChainSecurity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[5] = some (ga: GenericAttribute) {
         ga.name = "Supply_Chain_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[6] = some (ga: GenericAttribute) {
         ga.name = "strongCryptoAlgorithms" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[7] = some (ga: GenericAttribute) {
         ga.name = "staticCodeAnalysis" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[8] = some (ga: GenericAttribute) {
         ga.name = "Sniffing_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[9] = some (ga: GenericAttribute) {
         ga.name = "secureBoot" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[10] = some (ga: GenericAttribute) {
         ga.name = "resourceIsolation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[11] = some (ga: GenericAttribute) {
         ga.name = "resourceAvailability" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[12] = some (ga: GenericAttribute) {
         ga.name = "removeIdentifyingInformation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[13] = some (ga: GenericAttribute) {
         ga.name = "remoteAttestation" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[14] = some (ga: GenericAttribute) {
         ga.name = "physicalAccessControl" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[15] = some (ga: GenericAttribute) {
         ga.name = "Physical_Theft_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[16] = some (ga: GenericAttribute) {
         ga.name = "pedigree" &&
         ga.atype = String &&
         ga.value = "InternallyDeveloped"
         
      } &&
       ci.attributes.element[17] = some (ga: GenericAttribute) {
         ga.name = "memoryProtection" &&
         ga.atype = Int &&
         ga.value = "5"
         
      } &&
       ci.attributes.element[18] = some (ga: GenericAttribute) {
         ga.name = "logging" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[19] = some (ga: GenericAttribute) {
         ga.name = "Interception_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[20] = some (ga: GenericAttribute) {
         ga.name = "insideTrustedBoundary" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[21] = some (ga: GenericAttribute) {
         ga.name = "inputValidation" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[22] = some (ga: GenericAttribute) {
         ga.name = "Identity_Spoofing_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[23] = some (ga: GenericAttribute) {
         ga.name = "heterogeneity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[24] = some (ga: GenericAttribute) {
         ga.name = "hasSensitiveInfo" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[25] = some (ga: GenericAttribute) {
         ga.name = "Hardware_Integrity_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[26] = some (ga: GenericAttribute) {
         ga.name = "Flooding_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[27] = some (ga: GenericAttribute) {
         ga.name = "Fault_Injection_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[28] = some (ga: GenericAttribute) {
         ga.name = "failSafe" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[29] = some (ga: GenericAttribute) {
         ga.name = "Excessive_Allocation_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[30] = some (ga: GenericAttribute) {
         ga.name = "encryptedStorage" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[31] = some (ga: GenericAttribute) {
         ga.name = "dosProtection" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[32] = some (ga: GenericAttribute) {
         ga.name = "Configuration_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[33] = some (ga: GenericAttribute) {
         ga.name = "componentType" &&
         ga.atype = String &&
         ga.value = "Hybrid"
         
      } &&
       ci.attributes.element[34] = some (ga: GenericAttribute) {
         ga.name = "category" &&
         ga.atype = String &&
         ga.value = "Unknown"
         
      } &&
       ci.attributes.element[35] = some (ga: GenericAttribute) {
         ga.name = "canReceiveSWUpdate" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[36] = some (ga: GenericAttribute) {
         ga.name = "canReceiveConfigUpdate" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[37] = some (ga: GenericAttribute) {
         ga.name = "Buffer_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[38] = some (ga: GenericAttribute) {
         ga.name = "Brute_Force_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[39] = some (ga: GenericAttribute) {
         ga.name = "auditMessageResponses" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[40] = some (ga: GenericAttribute) {
         ga.name = "antiJamming" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[41] = some (ga: GenericAttribute) {
         ga.name = "adversariallyTestedForTrojanOrLogicBomb" &&
         ga.atype = Int &&
         ga.value = "0"
         
      }
    } &&
    imp.subcomponents.element[2] = some (ci: ComponentInstance) {
      ci.name = "positionEstimator" &&
      ci.kind = ComponentInstanceKind.Specification &&
      ci.specification = m.component_types.element[3] &&
      ci.attributes.length = 42 &&
       ci.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "zeroize" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "userAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "tamperProtection" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "systemAccessControl" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[4] = some (ga: GenericAttribute) {
         ga.name = "supplyChainSecurity" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[5] = some (ga: GenericAttribute) {
         ga.name = "Supply_Chain_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[6] = some (ga: GenericAttribute) {
         ga.name = "strongCryptoAlgorithms" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[7] = some (ga: GenericAttribute) {
         ga.name = "staticCodeAnalysis" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[8] = some (ga: GenericAttribute) {
         ga.name = "Sniffing_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[9] = some (ga: GenericAttribute) {
         ga.name = "secureBoot" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[10] = some (ga: GenericAttribute) {
         ga.name = "resourceIsolation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[11] = some (ga: GenericAttribute) {
         ga.name = "resourceAvailability" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[12] = some (ga: GenericAttribute) {
         ga.name = "removeIdentifyingInformation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[13] = some (ga: GenericAttribute) {
         ga.name = "RemoteAttestation" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[14] = some (ga: GenericAttribute) {
         ga.name = "physicalAccessControl" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[15] = some (ga: GenericAttribute) {
         ga.name = "Physical_Theft_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[16] = some (ga: GenericAttribute) {
         ga.name = "pedigree" &&
         ga.atype = String &&
         ga.value = "COTS"
         
      } &&
       ci.attributes.element[17] = some (ga: GenericAttribute) {
         ga.name = "memoryProtection" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[18] = some (ga: GenericAttribute) {
         ga.name = "logging" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[19] = some (ga: GenericAttribute) {
         ga.name = "Interception_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[20] = some (ga: GenericAttribute) {
         ga.name = "insideTrustedBoundary" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[21] = some (ga: GenericAttribute) {
         ga.name = "inputValidation" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[22] = some (ga: GenericAttribute) {
         ga.name = "Identity_Spoofing_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[23] = some (ga: GenericAttribute) {
         ga.name = "heterogeneity" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[24] = some (ga: GenericAttribute) {
         ga.name = "hasSensitiveInfo" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[25] = some (ga: GenericAttribute) {
         ga.name = "Hardware_Integrity_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[26] = some (ga: GenericAttribute) {
         ga.name = "Flooding_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[27] = some (ga: GenericAttribute) {
         ga.name = "Fault_Injection_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[28] = some (ga: GenericAttribute) {
         ga.name = "failsafe" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[29] = some (ga: GenericAttribute) {
         ga.name = "Excessive_Allocation_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[30] = some (ga: GenericAttribute) {
         ga.name = "encryptedStorage" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[31] = some (ga: GenericAttribute) {
         ga.name = "dosProtection" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[32] = some (ga: GenericAttribute) {
         ga.name = "Configuration_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[33] = some (ga: GenericAttribute) {
         ga.name = "componentType" &&
         ga.atype = String &&
         ga.value = "Software"
         
      } &&
       ci.attributes.element[34] = some (ga: GenericAttribute) {
         ga.name = "category" &&
         ga.atype = String &&
         ga.value = "Unknown"
         
      } &&
       ci.attributes.element[35] = some (ga: GenericAttribute) {
         ga.name = "canReceiveSWUpdate" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[36] = some (ga: GenericAttribute) {
         ga.name = "canReceiveConfigUpdate" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[37] = some (ga: GenericAttribute) {
         ga.name = "Buffer_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[38] = some (ga: GenericAttribute) {
         ga.name = "Brute_Force_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[39] = some (ga: GenericAttribute) {
         ga.name = "auditMessageResponses" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[40] = some (ga: GenericAttribute) {
         ga.name = "antiJamming" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[41] = some (ga: GenericAttribute) {
         ga.name = "adversariallyTestedForTrojanOrLogicBomb" &&
         ga.atype = Int &&
         ga.value = "0"
         
      }
    } &&
    imp.subcomponents.element[3] = some (ci: ComponentInstance) {
      ci.name = "navigation" &&
      ci.kind = ComponentInstanceKind.Specification &&
      ci.specification = m.component_types.element[4] &&
      ci.attributes.length = 42 &&
       ci.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "zeroize" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "userAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "tamperProtection" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "systemAccessControl" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[4] = some (ga: GenericAttribute) {
         ga.name = "supplyChainSecurity" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[5] = some (ga: GenericAttribute) {
         ga.name = "Supply_Chain_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[6] = some (ga: GenericAttribute) {
         ga.name = "strongCryptoAlgorithms" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[7] = some (ga: GenericAttribute) {
         ga.name = "staticCodeAnalysis" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[8] = some (ga: GenericAttribute) {
         ga.name = "Sniffing_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[9] = some (ga: GenericAttribute) {
         ga.name = "secureBoot" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[10] = some (ga: GenericAttribute) {
         ga.name = "resourceIsolation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[11] = some (ga: GenericAttribute) {
         ga.name = "resourceAvailability" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[12] = some (ga: GenericAttribute) {
         ga.name = "removeIdentifyingInformation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[13] = some (ga: GenericAttribute) {
         ga.name = "remoteAttestation" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[14] = some (ga: GenericAttribute) {
         ga.name = "physicalAccessControl" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[15] = some (ga: GenericAttribute) {
         ga.name = "Physical_Theft_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[16] = some (ga: GenericAttribute) {
         ga.name = "pedigree" &&
         ga.atype = String &&
         ga.value = "InternallyDeveloped"
         
      } &&
       ci.attributes.element[17] = some (ga: GenericAttribute) {
         ga.name = "memoryProtection" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[18] = some (ga: GenericAttribute) {
         ga.name = "logging" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[19] = some (ga: GenericAttribute) {
         ga.name = "Interception_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[20] = some (ga: GenericAttribute) {
         ga.name = "insideTrustedBoundary" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[21] = some (ga: GenericAttribute) {
         ga.name = "inputValidation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[22] = some (ga: GenericAttribute) {
         ga.name = "Identity_Spoofing_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[23] = some (ga: GenericAttribute) {
         ga.name = "heterogeneity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[24] = some (ga: GenericAttribute) {
         ga.name = "hasSensitiveInfo" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[25] = some (ga: GenericAttribute) {
         ga.name = "Hardware_Integrity_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[26] = some (ga: GenericAttribute) {
         ga.name = "Flooding_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[27] = some (ga: GenericAttribute) {
         ga.name = "Fault_Injection_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[28] = some (ga: GenericAttribute) {
         ga.name = "failSafe" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[29] = some (ga: GenericAttribute) {
         ga.name = "Excessive_Allocation_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[30] = some (ga: GenericAttribute) {
         ga.name = "encryptedStorage" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[31] = some (ga: GenericAttribute) {
         ga.name = "dosProtection" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[32] = some (ga: GenericAttribute) {
         ga.name = "Configuration_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[33] = some (ga: GenericAttribute) {
         ga.name = "componentType" &&
         ga.atype = String &&
         ga.value = "Software"
         
      } &&
       ci.attributes.element[34] = some (ga: GenericAttribute) {
         ga.name = "category" &&
         ga.atype = String &&
         ga.value = "Unknown"
         
      } &&
       ci.attributes.element[35] = some (ga: GenericAttribute) {
         ga.name = "canReceiveSWUpdate" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[36] = some (ga: GenericAttribute) {
         ga.name = "canReceiveConfigUpdate" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[37] = some (ga: GenericAttribute) {
         ga.name = "Buffer_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[38] = some (ga: GenericAttribute) {
         ga.name = "Brute_Force_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[39] = some (ga: GenericAttribute) {
         ga.name = "auditMessageResponses" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[40] = some (ga: GenericAttribute) {
         ga.name = "antiJamming" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[41] = some (ga: GenericAttribute) {
         ga.name = "adversariallyTestedForTrojanOrLogicBomb" &&
         ga.atype = Int &&
         ga.value = "0"
         
      }
    } &&
    imp.subcomponents.element[4] = some (ci: ComponentInstance) {
      ci.name = "fc" &&
      ci.kind = ComponentInstanceKind.Specification &&
      ci.specification = m.component_types.element[5] &&
      ci.attributes.length = 42 &&
       ci.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "zeroize" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "userAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "tamperProtection" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "systemAccessControl" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[4] = some (ga: GenericAttribute) {
         ga.name = "supplyChainSecurity" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[5] = some (ga: GenericAttribute) {
         ga.name = "Supply_Chain_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[6] = some (ga: GenericAttribute) {
         ga.name = "strongCryptoAlgorithms" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[7] = some (ga: GenericAttribute) {
         ga.name = "staticCodeAnalysis" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[8] = some (ga: GenericAttribute) {
         ga.name = "Sniffing_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[9] = some (ga: GenericAttribute) {
         ga.name = "secureBoot" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[10] = some (ga: GenericAttribute) {
         ga.name = "resourceIsolation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[11] = some (ga: GenericAttribute) {
         ga.name = "resourceAvailability" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[12] = some (ga: GenericAttribute) {
         ga.name = "removeIdentifyingInformation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[13] = some (ga: GenericAttribute) {
         ga.name = "remoteAttestation" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[14] = some (ga: GenericAttribute) {
         ga.name = "physicalAccessControl" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[15] = some (ga: GenericAttribute) {
         ga.name = "Physical_Theft_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[16] = some (ga: GenericAttribute) {
         ga.name = "pedigree" &&
         ga.atype = String &&
         ga.value = "InternallyDeveloped"
         
      } &&
       ci.attributes.element[17] = some (ga: GenericAttribute) {
         ga.name = "memoryProtection" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[18] = some (ga: GenericAttribute) {
         ga.name = "logging" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[19] = some (ga: GenericAttribute) {
         ga.name = "Interception_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[20] = some (ga: GenericAttribute) {
         ga.name = "insideTrustedBoundary" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[21] = some (ga: GenericAttribute) {
         ga.name = "inputValidation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[22] = some (ga: GenericAttribute) {
         ga.name = "Identity_Spoofing_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[23] = some (ga: GenericAttribute) {
         ga.name = "heterogeneity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[24] = some (ga: GenericAttribute) {
         ga.name = "hasSensitiveInfo" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[25] = some (ga: GenericAttribute) {
         ga.name = "Hardware_Integrity_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[26] = some (ga: GenericAttribute) {
         ga.name = "Flooding_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[27] = some (ga: GenericAttribute) {
         ga.name = "Fault_Injection_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[28] = some (ga: GenericAttribute) {
         ga.name = "failSafe" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[29] = some (ga: GenericAttribute) {
         ga.name = "Excessive_Allocation_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[30] = some (ga: GenericAttribute) {
         ga.name = "encryptedStorage" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[31] = some (ga: GenericAttribute) {
         ga.name = "dosProtection" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[32] = some (ga: GenericAttribute) {
         ga.name = "Configuration_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[33] = some (ga: GenericAttribute) {
         ga.name = "componentType" &&
         ga.atype = String &&
         ga.value = "Software"
         
      } &&
       ci.attributes.element[34] = some (ga: GenericAttribute) {
         ga.name = "category" &&
         ga.atype = String &&
         ga.value = "Unknown"
         
      } &&
       ci.attributes.element[35] = some (ga: GenericAttribute) {
         ga.name = "canReceiveSWUpdate" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[36] = some (ga: GenericAttribute) {
         ga.name = "canReceiveConfigUpdate" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[37] = some (ga: GenericAttribute) {
         ga.name = "Buffer_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[38] = some (ga: GenericAttribute) {
         ga.name = "Brute_Force_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[39] = some (ga: GenericAttribute) {
         ga.name = "auditMessageResponses" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[40] = some (ga: GenericAttribute) {
         ga.name = "antiJamming" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[41] = some (ga: GenericAttribute) {
         ga.name = "adversariallyTestedForTrojanOrLogicBomb" &&
         ga.atype = Int &&
         ga.value = "0"
         
      }
    } &&
    imp.subcomponents.element[5] = some (ci: ComponentInstance) {
      ci.name = "actuation" &&
      ci.kind = ComponentInstanceKind.Specification &&
      ci.specification = m.component_types.element[6] &&
      ci.attributes.length = 42 &&
       ci.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "zeroize" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "userAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "tamperProtection" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "systemAccessControl" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[4] = some (ga: GenericAttribute) {
         ga.name = "supplyChainSecurity" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[5] = some (ga: GenericAttribute) {
         ga.name = "Supply_Chain_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[6] = some (ga: GenericAttribute) {
         ga.name = "strongCryptoAlgorithms" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[7] = some (ga: GenericAttribute) {
         ga.name = "staticCodeAnalysis" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[8] = some (ga: GenericAttribute) {
         ga.name = "Sniffing_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[9] = some (ga: GenericAttribute) {
         ga.name = "secureBoot" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[10] = some (ga: GenericAttribute) {
         ga.name = "resourceIsolation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[11] = some (ga: GenericAttribute) {
         ga.name = "resourceAvailability" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[12] = some (ga: GenericAttribute) {
         ga.name = "removeIdentifyingInformation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[13] = some (ga: GenericAttribute) {
         ga.name = "remoteAttestation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[14] = some (ga: GenericAttribute) {
         ga.name = "physicalAccessControl" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[15] = some (ga: GenericAttribute) {
         ga.name = "Physical_Theft_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[16] = some (ga: GenericAttribute) {
         ga.name = "pedigree" &&
         ga.atype = String &&
         ga.value = "InternallyDeveloped"
         
      } &&
       ci.attributes.element[17] = some (ga: GenericAttribute) {
         ga.name = "memoryProtection" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[18] = some (ga: GenericAttribute) {
         ga.name = "logging" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[19] = some (ga: GenericAttribute) {
         ga.name = "Interception_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[20] = some (ga: GenericAttribute) {
         ga.name = "insideTrustedBoundary" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[21] = some (ga: GenericAttribute) {
         ga.name = "inputValidation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[22] = some (ga: GenericAttribute) {
         ga.name = "Identity_Spoofing_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[23] = some (ga: GenericAttribute) {
         ga.name = "heterogeneity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[24] = some (ga: GenericAttribute) {
         ga.name = "hasSensitiveInfo" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[25] = some (ga: GenericAttribute) {
         ga.name = "Hardware_Integrity_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[26] = some (ga: GenericAttribute) {
         ga.name = "Flooding_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[27] = some (ga: GenericAttribute) {
         ga.name = "Fault_Injection_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[28] = some (ga: GenericAttribute) {
         ga.name = "failSafe" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[29] = some (ga: GenericAttribute) {
         ga.name = "Excessive_Allocation_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[30] = some (ga: GenericAttribute) {
         ga.name = "encryptedStorage" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[31] = some (ga: GenericAttribute) {
         ga.name = "dosProtection" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[32] = some (ga: GenericAttribute) {
         ga.name = "Configuration_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[33] = some (ga: GenericAttribute) {
         ga.name = "componentType" &&
         ga.atype = String &&
         ga.value = "Hardware"
         
      } &&
       ci.attributes.element[34] = some (ga: GenericAttribute) {
         ga.name = "category" &&
         ga.atype = String &&
         ga.value = "Unknown"
         
      } &&
       ci.attributes.element[35] = some (ga: GenericAttribute) {
         ga.name = "canReceiveSWUpdate" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[36] = some (ga: GenericAttribute) {
         ga.name = "canReceiveConfigUpdate" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[37] = some (ga: GenericAttribute) {
         ga.name = "Buffer_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[38] = some (ga: GenericAttribute) {
         ga.name = "Brute_Force_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[39] = some (ga: GenericAttribute) {
         ga.name = "auditMessageResponses" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[40] = some (ga: GenericAttribute) {
         ga.name = "antiJamming" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[41] = some (ga: GenericAttribute) {
         ga.name = "adversariallyTestedForTrojanOrLogicBomb" &&
         ga.atype = Int &&
         ga.value = "0"
         
      }
    } &&
    imp.subcomponents.element[6] = some (ci: ComponentInstance) {
      ci.name = "deliveryPlanner" &&
      ci.kind = ComponentInstanceKind.Specification &&
      ci.specification = m.component_types.element[7] &&
      ci.attributes.length = 42 &&
       ci.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "zeroize" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "userAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "tamperProtection" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "systemAccessControl" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[4] = some (ga: GenericAttribute) {
         ga.name = "supplyChainSecurity" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[5] = some (ga: GenericAttribute) {
         ga.name = "Supply_Chain_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[6] = some (ga: GenericAttribute) {
         ga.name = "strongCryptoAlgorithms" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[7] = some (ga: GenericAttribute) {
         ga.name = "staticCodeAnalysis" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[8] = some (ga: GenericAttribute) {
         ga.name = "Sniffing_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[9] = some (ga: GenericAttribute) {
         ga.name = "secureBoot" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[10] = some (ga: GenericAttribute) {
         ga.name = "resourceIsolation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[11] = some (ga: GenericAttribute) {
         ga.name = "resourceAvailability" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[12] = some (ga: GenericAttribute) {
         ga.name = "removeIdentifyingInformation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[13] = some (ga: GenericAttribute) {
         ga.name = "RemoteAttestation" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[14] = some (ga: GenericAttribute) {
         ga.name = "physicalAccessControl" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[15] = some (ga: GenericAttribute) {
         ga.name = "Physical_Theft_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[16] = some (ga: GenericAttribute) {
         ga.name = "pedigree" &&
         ga.atype = String &&
         ga.value = "Sourced"
         
      } &&
       ci.attributes.element[17] = some (ga: GenericAttribute) {
         ga.name = "memoryProtection" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[18] = some (ga: GenericAttribute) {
         ga.name = "logging" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[19] = some (ga: GenericAttribute) {
         ga.name = "Interception_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[20] = some (ga: GenericAttribute) {
         ga.name = "insideTrustedBoundary" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[21] = some (ga: GenericAttribute) {
         ga.name = "inputValidation" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[22] = some (ga: GenericAttribute) {
         ga.name = "Identity_Spoofing_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[23] = some (ga: GenericAttribute) {
         ga.name = "Heterogeneity" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[24] = some (ga: GenericAttribute) {
         ga.name = "hasSensitiveInfo" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[25] = some (ga: GenericAttribute) {
         ga.name = "Hardware_Integrity_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[26] = some (ga: GenericAttribute) {
         ga.name = "Flooding_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[27] = some (ga: GenericAttribute) {
         ga.name = "Fault_Injection_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[28] = some (ga: GenericAttribute) {
         ga.name = "failSafe" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[29] = some (ga: GenericAttribute) {
         ga.name = "Excessive_Allocation_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[30] = some (ga: GenericAttribute) {
         ga.name = "encryptedStorage" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[31] = some (ga: GenericAttribute) {
         ga.name = "dosProtection" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[32] = some (ga: GenericAttribute) {
         ga.name = "Configuration_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[33] = some (ga: GenericAttribute) {
         ga.name = "componentType" &&
         ga.atype = String &&
         ga.value = "Software"
         
      } &&
       ci.attributes.element[34] = some (ga: GenericAttribute) {
         ga.name = "category" &&
         ga.atype = String &&
         ga.value = "Unknown"
         
      } &&
       ci.attributes.element[35] = some (ga: GenericAttribute) {
         ga.name = "canReceiveSWUpdate" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[36] = some (ga: GenericAttribute) {
         ga.name = "canReceiveConfigUpdate" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[37] = some (ga: GenericAttribute) {
         ga.name = "Buffer_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[38] = some (ga: GenericAttribute) {
         ga.name = "Brute_Force_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[39] = some (ga: GenericAttribute) {
         ga.name = "auditMessageResponses" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[40] = some (ga: GenericAttribute) {
         ga.name = "antiJamming" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[41] = some (ga: GenericAttribute) {
         ga.name = "adversariallyTestedForTrojanOrLogicBomb" &&
         ga.atype = Int &&
         ga.value = "0"
         
      }
    } &&
    imp.subcomponents.element[7] = some (ci: ComponentInstance) {
      ci.name = "deliveryItemMechanism" &&
      ci.kind = ComponentInstanceKind.Specification &&
      ci.specification = m.component_types.element[9] &&
      ci.attributes.length = 42 &&
       ci.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "zeroize" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "userAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "tamperProtection" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "systemAccessControl" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[4] = some (ga: GenericAttribute) {
         ga.name = "supplyChainSecurity" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[5] = some (ga: GenericAttribute) {
         ga.name = "Supply_Chain_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[6] = some (ga: GenericAttribute) {
         ga.name = "strongCryptoAlgorithms" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[7] = some (ga: GenericAttribute) {
         ga.name = "staticCodeAnalysis" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[8] = some (ga: GenericAttribute) {
         ga.name = "Sniffing_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[9] = some (ga: GenericAttribute) {
         ga.name = "secureBoot" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[10] = some (ga: GenericAttribute) {
         ga.name = "resourceIsolation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[11] = some (ga: GenericAttribute) {
         ga.name = "resourceAvailability" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[12] = some (ga: GenericAttribute) {
         ga.name = "removeIdentifyingInformation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[13] = some (ga: GenericAttribute) {
         ga.name = "remoteAttestation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[14] = some (ga: GenericAttribute) {
         ga.name = "physicalAccessControl" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[15] = some (ga: GenericAttribute) {
         ga.name = "Physical_Theft_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[16] = some (ga: GenericAttribute) {
         ga.name = "pedigree" &&
         ga.atype = String &&
         ga.value = "InternallyDeveloped"
         
      } &&
       ci.attributes.element[17] = some (ga: GenericAttribute) {
         ga.name = "memoryProtection" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[18] = some (ga: GenericAttribute) {
         ga.name = "logging" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[19] = some (ga: GenericAttribute) {
         ga.name = "Interception_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[20] = some (ga: GenericAttribute) {
         ga.name = "insideTrustedBoundary" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[21] = some (ga: GenericAttribute) {
         ga.name = "inputValidation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[22] = some (ga: GenericAttribute) {
         ga.name = "Identity_Spoofing_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[23] = some (ga: GenericAttribute) {
         ga.name = "heterogeneity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[24] = some (ga: GenericAttribute) {
         ga.name = "hasSensitiveInfo" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[25] = some (ga: GenericAttribute) {
         ga.name = "Hardware_Integrity_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[26] = some (ga: GenericAttribute) {
         ga.name = "Flooding_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[27] = some (ga: GenericAttribute) {
         ga.name = "Fault_Injection_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[28] = some (ga: GenericAttribute) {
         ga.name = "failSafe" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[29] = some (ga: GenericAttribute) {
         ga.name = "Excessive_Allocation_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[30] = some (ga: GenericAttribute) {
         ga.name = "encryptedStorage" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[31] = some (ga: GenericAttribute) {
         ga.name = "dosProtection" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[32] = some (ga: GenericAttribute) {
         ga.name = "Configuration_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[33] = some (ga: GenericAttribute) {
         ga.name = "componentType" &&
         ga.atype = String &&
         ga.value = "Hardware"
         
      } &&
       ci.attributes.element[34] = some (ga: GenericAttribute) {
         ga.name = "category" &&
         ga.atype = String &&
         ga.value = "Unknown"
         
      } &&
       ci.attributes.element[35] = some (ga: GenericAttribute) {
         ga.name = "canReceiveSWUpdate" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[36] = some (ga: GenericAttribute) {
         ga.name = "canReceiveConfigUpdate" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[37] = some (ga: GenericAttribute) {
         ga.name = "Buffer_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[38] = some (ga: GenericAttribute) {
         ga.name = "Brute_Force_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[39] = some (ga: GenericAttribute) {
         ga.name = "auditMessageResponses" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[40] = some (ga: GenericAttribute) {
         ga.name = "antiJamming" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[41] = some (ga: GenericAttribute) {
         ga.name = "adversariallyTestedForTrojanOrLogicBomb" &&
         ga.atype = Int &&
         ga.value = "0"
         
      }
    } &&
    imp.subcomponents.element[8] = some (ci: ComponentInstance) {
      ci.name = "camera" &&
      ci.kind = ComponentInstanceKind.Specification &&
      ci.specification = m.component_types.element[10] &&
      ci.attributes.length = 42 &&
       ci.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "zeroize" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "userAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "tamperProtection" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "systemAccessControl" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[4] = some (ga: GenericAttribute) {
         ga.name = "supplyChainSecurity" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[5] = some (ga: GenericAttribute) {
         ga.name = "Supply_Chain_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[6] = some (ga: GenericAttribute) {
         ga.name = "strongCryptoAlgorithms" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[7] = some (ga: GenericAttribute) {
         ga.name = "staticCodeAnalysis" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[8] = some (ga: GenericAttribute) {
         ga.name = "Sniffing_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[9] = some (ga: GenericAttribute) {
         ga.name = "secureBoot" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[10] = some (ga: GenericAttribute) {
         ga.name = "resourceIsolation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[11] = some (ga: GenericAttribute) {
         ga.name = "resourceAvailability" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[12] = some (ga: GenericAttribute) {
         ga.name = "removeIdentifyingInformation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[13] = some (ga: GenericAttribute) {
         ga.name = "remoteAttestation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[14] = some (ga: GenericAttribute) {
         ga.name = "physicalAccessControl" &&
         ga.atype = Int &&
         ga.value = "7"
         
      } &&
       ci.attributes.element[15] = some (ga: GenericAttribute) {
         ga.name = "Physical_Theft_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[16] = some (ga: GenericAttribute) {
         ga.name = "pedigree" &&
         ga.atype = String &&
         ga.value = "InternallyDeveloped"
         
      } &&
       ci.attributes.element[17] = some (ga: GenericAttribute) {
         ga.name = "memoryProtection" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[18] = some (ga: GenericAttribute) {
         ga.name = "logging" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[19] = some (ga: GenericAttribute) {
         ga.name = "Interception_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[20] = some (ga: GenericAttribute) {
         ga.name = "insideTrustedBoundary" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[21] = some (ga: GenericAttribute) {
         ga.name = "inputValidation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[22] = some (ga: GenericAttribute) {
         ga.name = "Identity_Spoofing_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[23] = some (ga: GenericAttribute) {
         ga.name = "heterogeneity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[24] = some (ga: GenericAttribute) {
         ga.name = "hasSensitiveInfo" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[25] = some (ga: GenericAttribute) {
         ga.name = "Hardware_Integrity_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[26] = some (ga: GenericAttribute) {
         ga.name = "Flooding_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[27] = some (ga: GenericAttribute) {
         ga.name = "Fault_Injection_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[28] = some (ga: GenericAttribute) {
         ga.name = "failSafe" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[29] = some (ga: GenericAttribute) {
         ga.name = "Excessive_Allocation_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[30] = some (ga: GenericAttribute) {
         ga.name = "encryptedStorage" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[31] = some (ga: GenericAttribute) {
         ga.name = "dosProtection" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[32] = some (ga: GenericAttribute) {
         ga.name = "Configuration_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[33] = some (ga: GenericAttribute) {
         ga.name = "componentType" &&
         ga.atype = String &&
         ga.value = "Hardware"
         
      } &&
       ci.attributes.element[34] = some (ga: GenericAttribute) {
         ga.name = "category" &&
         ga.atype = String &&
         ga.value = "Unknown"
         
      } &&
       ci.attributes.element[35] = some (ga: GenericAttribute) {
         ga.name = "canReceiveSWUpdate" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[36] = some (ga: GenericAttribute) {
         ga.name = "canReceiveConfigUpdate" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[37] = some (ga: GenericAttribute) {
         ga.name = "Buffer_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[38] = some (ga: GenericAttribute) {
         ga.name = "Brute_Force_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[39] = some (ga: GenericAttribute) {
         ga.name = "auditMessageResponses" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[40] = some (ga: GenericAttribute) {
         ga.name = "antiJamming" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[41] = some (ga: GenericAttribute) {
         ga.name = "adversariallyTestedForTrojanOrLogicBomb" &&
         ga.atype = Int &&
         ga.value = "0"
         
      }
    } &&
    imp.subcomponents.element[9] = some (ci: ComponentInstance) {
      ci.name = "connector" &&
      ci.kind = ComponentInstanceKind.Specification &&
      ci.specification = m.component_types.element[11] &&
      ci.attributes.length = 42 &&
       ci.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "zeroize" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "userAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "tamperProtection" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "systemAccessControl" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[4] = some (ga: GenericAttribute) {
         ga.name = "supplyChainSecurity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[5] = some (ga: GenericAttribute) {
         ga.name = "Supply_Chain_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[6] = some (ga: GenericAttribute) {
         ga.name = "strongCryptoAlgorithms" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[7] = some (ga: GenericAttribute) {
         ga.name = "staticCodeAnalysis" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[8] = some (ga: GenericAttribute) {
         ga.name = "Sniffing_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[9] = some (ga: GenericAttribute) {
         ga.name = "secureBoot" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[10] = some (ga: GenericAttribute) {
         ga.name = "resourceIsolation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[11] = some (ga: GenericAttribute) {
         ga.name = "resourceAvailability" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[12] = some (ga: GenericAttribute) {
         ga.name = "removeIdentifyingInformation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[13] = some (ga: GenericAttribute) {
         ga.name = "remoteAttestation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[14] = some (ga: GenericAttribute) {
         ga.name = "physicalAccessControl" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[15] = some (ga: GenericAttribute) {
         ga.name = "Physical_Theft_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[16] = some (ga: GenericAttribute) {
         ga.name = "pedigree" &&
         ga.atype = String &&
         ga.value = "COTS"
         
      } &&
       ci.attributes.element[17] = some (ga: GenericAttribute) {
         ga.name = "memoryProtection" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[18] = some (ga: GenericAttribute) {
         ga.name = "logging" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[19] = some (ga: GenericAttribute) {
         ga.name = "Interception_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[20] = some (ga: GenericAttribute) {
         ga.name = "insideTrustedBoundary" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[21] = some (ga: GenericAttribute) {
         ga.name = "inputValidation" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[22] = some (ga: GenericAttribute) {
         ga.name = "Identity_Spoofing_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[23] = some (ga: GenericAttribute) {
         ga.name = "heterogeneity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[24] = some (ga: GenericAttribute) {
         ga.name = "hasSensitiveInfo" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[25] = some (ga: GenericAttribute) {
         ga.name = "Hardware_Integrity_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[26] = some (ga: GenericAttribute) {
         ga.name = "Flooding_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[27] = some (ga: GenericAttribute) {
         ga.name = "Fault_Injection_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[28] = some (ga: GenericAttribute) {
         ga.name = "failSafe" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[29] = some (ga: GenericAttribute) {
         ga.name = "Excessive_Allocation_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[30] = some (ga: GenericAttribute) {
         ga.name = "encryptedStorage" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[31] = some (ga: GenericAttribute) {
         ga.name = "dosProtection" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[32] = some (ga: GenericAttribute) {
         ga.name = "Configuration_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[33] = some (ga: GenericAttribute) {
         ga.name = "componentType" &&
         ga.atype = String &&
         ga.value = "Hybrid"
         
      } &&
       ci.attributes.element[34] = some (ga: GenericAttribute) {
         ga.name = "category" &&
         ga.atype = String &&
         ga.value = "Unknown"
         
      } &&
       ci.attributes.element[35] = some (ga: GenericAttribute) {
         ga.name = "canReceiveSWUpdate" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[36] = some (ga: GenericAttribute) {
         ga.name = "canReceiveConfigUpdate" &&
         ga.atype = Bool &&
         ga.value = "true"
         
      } &&
       ci.attributes.element[37] = some (ga: GenericAttribute) {
         ga.name = "Buffer_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[38] = some (ga: GenericAttribute) {
         ga.name = "Brute_Force_Attack" &&
         ga.atype = Bool &&
         ga.value = "false"
         
      } &&
       ci.attributes.element[39] = some (ga: GenericAttribute) {
         ga.name = "auditMessageResponses" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[40] = some (ga: GenericAttribute) {
         ga.name = "antiJamming" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       ci.attributes.element[41] = some (ga: GenericAttribute) {
         ga.name = "adversariallyTestedForTrojanOrLogicBomb" &&
         ga.atype = Int &&
         ga.value = "0"
         
      }
    } &&
    imp.connections.length = 42 &&
    imp.connections.element[0] = some (c: Connection) {
      c.name = "c1" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "6"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[2] &&
          sp.port = m.component_types.element[3].ports.element[3]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[3] &&
          sp.port = m.component_types.element[4].ports.element[0]
        }
      }
    } &&
    imp.connections.element[1] = some (c: Connection) {
      c.name = "c1b" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[6] &&
          sp.port = m.component_types.element[7].ports.element[18]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[0] &&
          sp.port = m.component_types.element[2].ports.element[3]
        }
      }
    } &&
    imp.connections.element[2] = some (c: Connection) {
      c.name = "c2" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[3] &&
          sp.port = m.component_types.element[4].ports.element[4]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[4] &&
          sp.port = m.component_types.element[5].ports.element[1]
        }
      }
    } &&
    imp.connections.element[3] = some (c: Connection) {
      c.name = "c3" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[4] &&
          sp.port = m.component_types.element[5].ports.element[3]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[3] &&
          sp.port = m.component_types.element[4].ports.element[3]
        }
      }
    } &&
    imp.connections.element[4] = some (c: Connection) {
      c.name = "c4" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[6] &&
          sp.port = m.component_types.element[7].ports.element[12]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[3] &&
          sp.port = m.component_types.element[4].ports.element[1]
        }
      }
    } &&
    imp.connections.element[5] = some (c: Connection) {
      c.name = "c5" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[3] &&
          sp.port = m.component_types.element[4].ports.element[5]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[6] &&
          sp.port = m.component_types.element[7].ports.element[1]
        }
      }
    } &&
    imp.connections.element[6] = some (c: Connection) {
      c.name = "c7" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[7] &&
          sp.port = m.component_types.element[9].ports.element[1]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[6] &&
          sp.port = m.component_types.element[7].ports.element[2]
        }
      }
    } &&
    imp.connections.element[7] = some (c: Connection) {
      c.name = "c9" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[8] &&
          sp.port = m.component_types.element[10].ports.element[1]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[6] &&
          sp.port = m.component_types.element[7].ports.element[4]
        }
      }
    } &&
    imp.connections.element[8] = some (c: Connection) {
      c.name = "c10" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[6] &&
          sp.port = m.component_types.element[7].ports.element[10]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[1] &&
          sp.port = m.component_types.element[8].ports.element[1]
        }
      }
    } &&
    imp.connections.element[9] = some (c: Connection) {
      c.name = "c11" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[1] &&
          sp.port = m.component_types.element[8].ports.element[3]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[6] &&
          sp.port = m.component_types.element[7].ports.element[3]
        }
      }
    } &&
    imp.connections.element[10] = some (c: Connection) {
      c.name = "c12" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[0] &&
          sp.port = m.component_types.element[2].ports.element[4]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[2] &&
          sp.port = m.component_types.element[3].ports.element[0]
        }
      }
    } &&
    imp.connections.element[11] = some (c: Connection) {
      c.name = "c14a" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Untrusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.ComponentCE &&
        src.component_port = m.component_types.element[12].ports.element[2]
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[9] &&
          sp.port = m.component_types.element[11].ports.element[0]
        }
      }
    } &&
    imp.connections.element[12] = some (c: Connection) {
      c.name = "c14b" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[9] &&
          sp.port = m.component_types.element[11].ports.element[1]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[6] &&
          sp.port = m.component_types.element[7].ports.element[0]
        }
      }
    } &&
    imp.connections.element[13] = some (c: Connection) {
      c.name = "c15" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[6] &&
          sp.port = m.component_types.element[7].ports.element[13]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.ComponentCE &&
        dst.component_port = m.component_types.element[12].ports.element[5]
      }
    } &&
    imp.connections.element[14] = some (c: Connection) {
      c.name = "c16" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "9"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "9"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.ComponentCE &&
        src.component_port = m.component_types.element[12].ports.element[3]
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[1] &&
          sp.port = m.component_types.element[8].ports.element[0]
        }
      }
    } &&
    imp.connections.element[15] = some (c: Connection) {
      c.name = "c17" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[1] &&
          sp.port = m.component_types.element[8].ports.element[2]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.ComponentCE &&
        dst.component_port = m.component_types.element[12].ports.element[4]
      }
    } &&
    imp.connections.element[16] = some (c: Connection) {
      c.name = "c18a" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[0] &&
          sp.port = m.component_types.element[2].ports.element[7]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[2] &&
          sp.port = m.component_types.element[3].ports.element[1]
        }
      }
    } &&
    imp.connections.element[17] = some (c: Connection) {
      c.name = "c19" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[4] &&
          sp.port = m.component_types.element[5].ports.element[2]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[5] &&
          sp.port = m.component_types.element[6].ports.element[0]
        }
      }
    } &&
    imp.connections.element[18] = some (c: Connection) {
      c.name = "c20" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[5] &&
          sp.port = m.component_types.element[6].ports.element[1]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[4] &&
          sp.port = m.component_types.element[5].ports.element[0]
        }
      }
    } &&
    imp.connections.element[19] = some (c: Connection) {
      c.name = "c22" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.ComponentCE &&
        src.component_port = m.component_types.element[12].ports.element[0]
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[0] &&
          sp.port = m.component_types.element[2].ports.element[1]
        }
      }
    } &&
    imp.connections.element[20] = some (c: Connection) {
      c.name = "c23" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.ComponentCE &&
        src.component_port = m.component_types.element[12].ports.element[1]
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[0] &&
          sp.port = m.component_types.element[2].ports.element[2]
        }
      }
    } &&
    imp.connections.element[21] = some (c: Connection) {
      c.name = "c24" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[3] &&
          sp.port = m.component_types.element[4].ports.element[6]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[2] &&
          sp.port = m.component_types.element[3].ports.element[2]
        }
      }
    } &&
    imp.connections.element[22] = some (c: Connection) {
      c.name = "c25" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[6] &&
          sp.port = m.component_types.element[7].ports.element[11]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[7] &&
          sp.port = m.component_types.element[9].ports.element[0]
        }
      }
    } &&
    imp.connections.element[23] = some (c: Connection) {
      c.name = "c26" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[6] &&
          sp.port = m.component_types.element[7].ports.element[14]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[3] &&
          sp.port = m.component_types.element[4].ports.element[2]
        }
      }
    } &&
    imp.connections.element[24] = some (c: Connection) {
      c.name = "c27" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[6] &&
          sp.port = m.component_types.element[7].ports.element[15]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[8] &&
          sp.port = m.component_types.element[10].ports.element[0]
        }
      }
    } &&
    imp.connections.element[25] = some (c: Connection) {
      c.name = "c28" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[6] &&
          sp.port = m.component_types.element[7].ports.element[10]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.ComponentCE &&
        dst.component_port = m.component_types.element[12].ports.element[6]
      }
    } &&
    imp.connections.element[26] = some (c: Connection) {
      c.name = "c29" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[1] &&
          sp.port = m.component_types.element[8].ports.element[3]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.ComponentCE &&
        dst.component_port = m.component_types.element[12].ports.element[7]
      }
    } &&
    imp.connections.element[27] = some (c: Connection) {
      c.name = "c30" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[7] &&
          sp.port = m.component_types.element[9].ports.element[1]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.ComponentCE &&
        dst.component_port = m.component_types.element[12].ports.element[8]
      }
    } &&
    imp.connections.element[28] = some (c: Connection) {
      c.name = "c31" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[6] &&
          sp.port = m.component_types.element[7].ports.element[11]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.ComponentCE &&
        dst.component_port = m.component_types.element[12].ports.element[12]
      }
    } &&
    imp.connections.element[29] = some (c: Connection) {
      c.name = "c32" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[5] &&
          sp.port = m.component_types.element[6].ports.element[1]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.ComponentCE &&
        dst.component_port = m.component_types.element[12].ports.element[9]
      }
    } &&
    imp.connections.element[30] = some (c: Connection) {
      c.name = "c33" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[6] &&
          sp.port = m.component_types.element[7].ports.element[17]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[0] &&
          sp.port = m.component_types.element[2].ports.element[0]
        }
      }
    } &&
    imp.connections.element[31] = some (c: Connection) {
      c.name = "c34" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[0] &&
          sp.port = m.component_types.element[2].ports.element[5]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[6] &&
          sp.port = m.component_types.element[7].ports.element[5]
        }
      }
    } &&
    imp.connections.element[32] = some (c: Connection) {
      c.name = "c35" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[0] &&
          sp.port = m.component_types.element[2].ports.element[8]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[6] &&
          sp.port = m.component_types.element[7].ports.element[6]
        }
      }
    } &&
    imp.connections.element[33] = some (c: Connection) {
      c.name = "c36" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[1] &&
          sp.port = m.component_types.element[8].ports.element[4]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[6] &&
          sp.port = m.component_types.element[7].ports.element[7]
        }
      }
    } &&
    imp.connections.element[34] = some (c: Connection) {
      c.name = "c37" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[8] &&
          sp.port = m.component_types.element[10].ports.element[2]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[6] &&
          sp.port = m.component_types.element[7].ports.element[8]
        }
      }
    } &&
    imp.connections.element[35] = some (c: Connection) {
      c.name = "c38" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[0] &&
          sp.port = m.component_types.element[2].ports.element[6]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.ComponentCE &&
        dst.component_port = m.component_types.element[12].ports.element[13]
      }
    } &&
    imp.connections.element[36] = some (c: Connection) {
      c.name = "c39" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[6] &&
          sp.port = m.component_types.element[7].ports.element[19]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.ComponentCE &&
        dst.component_port = m.component_types.element[12].ports.element[10]
      }
    } &&
    imp.connections.element[37] = some (c: Connection) {
      c.name = "c40" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[0] &&
          sp.port = m.component_types.element[2].ports.element[9]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.ComponentCE &&
        dst.component_port = m.component_types.element[12].ports.element[14]
      }
    } &&
    imp.connections.element[38] = some (c: Connection) {
      c.name = "c41" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[3] &&
          sp.port = m.component_types.element[4].ports.element[7]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.ComponentCE &&
        dst.component_port = m.component_types.element[12].ports.element[15]
      }
    } &&
    imp.connections.element[39] = some (c: Connection) {
      c.name = "c42" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[7] &&
          sp.port = m.component_types.element[9].ports.element[2]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.SubcomponentCE &&
        dst.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[6] &&
          sp.port = m.component_types.element[7].ports.element[9]
        }
      }
    } &&
    imp.connections.element[40] = some (c: Connection) {
      c.name = "c43" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[6] &&
          sp.port = m.component_types.element[7].ports.element[14]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.ComponentCE &&
        dst.component_port = m.component_types.element[12].ports.element[16]
      }
    } &&
    imp.connections.element[41] = some (c: Connection) {
      c.name = "c44" &&
      c.attributes.length = 4 &&
       c.attributes.element[0] = some (ga: GenericAttribute) {
         ga.name = "sessionAuthenticity" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[1] = some (ga: GenericAttribute) {
         ga.name = "encryptedTransmission" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[2] = some (ga: GenericAttribute) {
         ga.name = "deviceAuthentication" &&
         ga.atype = Int &&
         ga.value = "0"
         
      } &&
       c.attributes.element[3] = some (ga: GenericAttribute) {
         ga.name = "connectionType" &&
         ga.atype = String &&
         ga.value = "Trusted"
         
      } &&
      c.source = some (src: ConnectionEnd) {
        src.kind = ConnectionEndKind.SubcomponentCE &&
        src.subcomponent_port = some (sp: CompInstPort) {
          sp.subcomponent = imp.subcomponents.element[6] &&
          sp.port = m.component_types.element[7].ports.element[20]
        }
      } &&
      c.destination = some (dst: ConnectionEnd) {
        dst.kind = ConnectionEndKind.ComponentCE &&
        dst.component_port = m.component_types.element[12].ports.element[11]
      }
    }
  }} && m.cyber_requirements.length = 2 &&
m.cyber_requirements.element[0] = some (req: CyberReq) {
  req.id = "CyberReq02" &&
  req.severity = Severity.Hazardous &&
  req.condition = some (expr: CyberExpr) {
    expr.kind = CyberExprKind.Port &&
    expr.port = some (port: CIAPort) {
      port.name = "delivery_status" &&
      port.cia = CIA.Integrity
      }
    }
     &&
  req.comment = "" &&
  req.description = "The drone shall be resilient to maliciously commanded improper delivery of a package" &&
  req.phases = "" &&
  req.extern = ""
  && req.cia = CIA.Integrity
  } &&
m.cyber_requirements.element[1] = some (req: CyberReq) {
  req.id = "CyberReq01" &&
  req.severity = Severity.Hazardous &&
  req.condition = some (expr: CyberExpr) {
    expr.kind = CyberExprKind.Or &&
    expr.or.length = 4 &&
    expr.or.element[0] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "actuation_out" &&
        port.cia = CIA.Integrity
        }
      }
       &&
    expr.or.element[1] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "actuation_out" &&
        port.cia = CIA.Availability
        }
      }
       &&
    expr.or.element[2] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "delivery_status" &&
        port.cia = CIA.Integrity
        }
      }
       &&
    expr.or.element[3] = some (expr: CyberExpr) {
      expr.kind = CyberExprKind.Port &&
      expr.port = some (port: CIAPort) {
        port.name = "delivery_status" &&
        port.cia = CIA.Availability
        }
      }
      }
     &&
  req.comment = "" &&
  req.description = "The drone shall be resilient to loss of ability to deliver a package to 
			              the appropriate consumer location" &&
  req.phases = "" &&
  req.extern = ""
  && req.cia = CIA.Integrity
  } && m.safety_requirements.length = 2 &&
m.safety_requirements.element[0] = some (req: SafetyReq) {
  req.id = "SafetyReq02" &&
  req.targetProbability = "1e-07" &&
  req.condition = some (expr: SafetyExpr) {
    expr.kind = SafetyExprKind.Port &&
    expr.port = some (port: IAPort) {
      port.name = "delivery_status" &&
      port.ia = IA.Integrity
      }
    }
     &&
  req.comment = "" &&
  req.description = "Delivery Item Mechanism is reliable, where an undetected erroneous command shall be less than 1e-7 pfh"
  } &&
m.safety_requirements.element[1] = some (req: SafetyReq) {
  req.id = "SafetyReq01" &&
  req.targetProbability = "1e-07" &&
  req.condition = some (expr: SafetyExpr) {
    expr.kind = SafetyExprKind.Port &&
    expr.port = some (port: IAPort) {
      port.name = "actuation_out" &&
      port.ia = IA.Availability
      }
    }
     &&
  req.comment = "" &&
  req.description = "Loss of actuation shall be less than 1e-7 pfh"
  } && m.missions.length = 2 &&
m.missions.element[0] = some (mi: Mission) {
  mi.id = "MReq02" && 
  mi.description = mk_some<String>("Reliability ") && 
  mi.comment = mk_none<String> && 
  mi.reqs.length = 1
  && mi.reqs.element[0] = "SafetyReq02"
  } &&
m.missions.element[1] = some (mi: Mission) {
  mi.id = "MReq01" && 
  mi.description = mk_some<String>("Deliver a package to the intended location.") && 
  mi.comment = mk_none<String> && 
  mi.reqs.length = 3
  && mi.reqs.element[0] = "CyberReq01"
  && mi.reqs.element[1] = "CyberReq02"
  && mi.reqs.element[2] = "SafetyReq01"
  }
};
