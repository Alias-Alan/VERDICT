<rdf:RDF
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns:sadlbasemodel="http://sadl.org/sadlbasemodel"
    xmlns:owl="http://www.w3.org/2002/07/owl#"
    xmlns:sadlimplicitmodel="http://sadl.org/sadlimplicitmodel"
    xmlns:builtinfunctions="http://sadl.org/builtinfunctions"
    xmlns:stemr="http://sadl.org/STEM/STEMRules"
    xmlns:j.0="http://sadl.org/sadlimplicitmodel#"
    xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
    xmlns:queries="http://sadl.org/STEM/Queries#"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema#"
  xml:base="http://sadl.org/STEM/Queries">
  <owl:Ontology rdf:about="">
    <owl:imports rdf:resource="STEMRules"/>
    <owl:imports rdf:resource="/builtinfunctions"/>
    <owl:imports rdf:resource="/sadlimplicitmodel"/>
    <owl:imports rdf:resource="/sadlbasemodel"/>
    <rdfs:comment xml:lang="en">This ontology was created from a SADL file 'Queries.sadl' and should not be directly edited.</rdfs:comment>
  </owl:Ontology>
  <j.0:NamedQuery rdf:ID="Defenses2NIST">
    <rdfs:isDefinedBy rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >
select distinct (?m1 as ?DefenseProperty)
(?ApplicableDefense1 as ?NISTProfile) (?DefenseDescription1 as ?DefenseDescription)
where {#?m1 &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://sadl.org/STEM/BaseModel#Mitigation&gt;
# get NIST controls and their names for mitigation m1
{select distinct ?m1 (group_concat(distinct ?nc;separator=';') as ?ApplicableDefense1)
    (group_concat(distinct ?ncd;separator=';') as ?DefenseDescription1) where
   {?m1 &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://sadl.org/STEM/BaseModel#Mitigation&gt; . ?m1 &lt;http://sadl.org/STEM/BaseModel#nistControl&gt; ?yy2
    . ?yy2 &lt;http://sadl.org/STEM/BaseModel#nistId&gt; ?yy3 . LET(?nc := replace(str(?yy3),'http.*#',''))
    . ?yy2 &lt;http://sadl.org/STEM/BaseModel#nistDesc&gt; ?yy4 . LET(?ncd := replace(str(?yy4),'http.*#',''))
   } group by ?m1}
} order by ?m1 ?ApplicableDefense1
</rdfs:isDefinedBy>
  </j.0:NamedQuery>
  <j.0:NamedQuery rdf:ID="STEMgraph">
    <rdfs:isDefinedBy rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >
select distinct ?N1 ?link ?N2 ?N1_style ?N1_fillcolor ?N2_style ?N2_fillcolor (?finallist as ?N1_tooltip) where
{  ?conn &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://sadl.org/STEM/BaseModel#Connection&gt;
 . ?conn &lt;http://sadl.org/STEM/BaseModel#connectionSource&gt; ?src . ?conn &lt;http://sadl.org/STEM/BaseModel#connectionDestination&gt; ?dest
 . ?conn &lt;http://sadl.org/STEM/BaseModel#outPort&gt; ?oport . ?conn &lt;http://sadl.org/STEM/BaseModel#inPort&gt; ?iport
 . LET(?N1 := replace(str(?src),'^.*#','')) . LET(?N2 := replace(str(?dest),'^.*#','')) #strip ?src and ?dest to get ?N1 and ?n2 resp.
 . LET(?N1_style := 'filled') . LET(?N2_style := 'filled')
 . OPTIONAL{?src &lt;http://sadl.org/STEM/BaseModel#applicableCM&gt; ?acm . LET(?N1_fillcolor := 'red')}
 . OPTIONAL{?dest &lt;http://sadl.org/STEM/BaseModel#applicableCM&gt; ?acm2 . LET(?N2_fillcolor := 'red')}
 . ?conn &lt;http://sadl.org/STEM/BaseModel#connectionName&gt; ?connname # connection name
 . LET(?strippedcname := replace(str(?connname),'^.*#',''))
# select what we want to show on links - so comment all but one LET(?link...
# . LET(?link := concat(concat(str(?oport),':'),str(?iport)))  # if we want to show port names at both ends
# . LET(?link := ' ') 										   # if we want to show nothing
 . LET(?link := ?strippedcname) 								# if we want to show connection name
# now get list of CAPECs
 .  OPTIONAL {{select distinct ?src (group_concat(distinct ?capec;separator='; &amp;#10;') as ?capeclist) where # use &amp;#10; for newline in tooltip
      {?src &lt;http://sadl.org/STEM/BaseModel#applicableCM&gt; ?longcapec
       . ?longcapec &lt;http://sadl.org/STEM/BaseModel#id&gt; ?id . ?longcapec &lt;http://sadl.org/STEM/BaseModel#capecDesc&gt; ?desc
       . LET(?capec := concat(concat(concat('CAPEC-',str(?id)),':'),?desc))
      } group by ?src}
   }

# now get the list of properties (note we have simple properties and ImplProperties and they have different structures)
# using OPTIONAL as the 'generated' object does not have capecs or properties on it
 . OPTIONAL{{select distinct ?src (group_concat(distinct ?c6;separator='; &amp;#10;') as ?plist) where
    { {  #target: ?src is component instance, ?prop is property, ?prop_val is whether the property is true or false
         ?src ?prop ?z3 		
       . ?prop &lt;http://sadl.org/STEM/BaseModel#tooltipProp&gt; ?r2 . ?z3 &lt;http://sadl.org/STEM/BaseModel#dal&gt; ?prop_val
       . LET(?c3 := concat(str(?prop),concat(' DAL ',str(?prop_val)))) 
      }
    UNION
    { # this get properties, not implementation properties
      OPTIONAL{?src ?prop ?prop_val . ?prop &lt;http://sadl.org/STEM/BaseModel#tooltipProp&gt; ?r2 . FILTER(regex(str(?prop_val),'true') || regex(str(?prop_val),'false'))}
      . LET(?c3 := concat(str(?prop_val),str(?prop)))
    }
   
   . LET(?c4 := replace(str(?c3),'http.*#',''))
   . LET(?c5 := replace(str(?c4),'^true',''))
   . LET(?c6 := replace(str(?c5),'^false','NOT_')) # had wanted it to be NOT(...) but was having trouble gettting that working
   } group by ?src}}
# now concat capec list and property list
 . LET(?clist     := COALESCE(?capeclist,''))
 . LET(?tempplist := COALESCE(?plist,''))
 . LET(?templist  := concat(concat(?clist,'; &amp;#10;'),?tempplist))
 . LET(?templist2 := replace(?templist,'^; ',''))  # get rid of initial ';'
 . LET(?templist3 := replace(?templist2,';','; ')) # having a space ensures that we get quotes around in .dot file
 . LET(?cplist    := replace(?templist3,'  ',' ')) # do not need 2 spaces
 . LET(?finallist     := COALESCE(?cplist,''))
}
</rdfs:isDefinedBy>
  </j.0:NamedQuery>
  <j.0:NamedQuery rdf:ID="ArchMitigation">
    <rdfs:isDefinedBy rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >
select distinct ?ConnectionName ?SrcCompInstance ?DestCompInstance ('Bind to different bus' as ?Mitigation) 
where {?c &lt;http://sadl.org/STEM/BaseModel#bindingVulnerability&gt; true . ?c &lt;http://sadl.org/STEM/BaseModel#connectionName&gt; ?ConnectionName
. ?c &lt;http://sadl.org/STEM/BaseModel#connectionSource&gt; ?SrcCompInstance . ?c &lt;http://sadl.org/STEM/BaseModel#connectionDestination&gt; ?DestCompInstance}
</rdfs:isDefinedBy>
  </j.0:NamedQuery>
  <j.0:NamedQuery rdf:ID="CAPEC">
    <rdfs:isDefinedBy rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >
select distinct ?CompType ?CompInst ?CAPEC ?CAPECDescription
(?ic as ?Confidentiality) (?ii as ?Integrity) (?ia as ?Availability) ?LikelihoodOfSuccess
where {?CompInst &lt;http://sadl.org/STEM/BaseModel#applicableCM&gt; ?x
. ?x &lt;http://sadl.org/STEM/BaseModel#id&gt; ?id . LET(?CAPEC := concat('CAPEC-',str(?id)))
. ?x &lt;http://sadl.org/STEM/BaseModel#capecDesc&gt; ?CAPECDescription
. ?x &lt;http://sadl.org/STEM/BaseModel#likelihoodOfSuccess&gt; ?LikelihoodOfSuccess
. ?CompInst &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; ?CompType
. FILTER(!regex(str(?CompType), 'Class')) #needed if CompInst and CompType have same name
. FILTER NOT EXISTS {?CompInst &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; ?a1 . ?a1 &lt;http://www.w3.org/2000/01/rdf-schema#subClassOf&gt; ?CompType }
. OPTIONAL{?x &lt;http://sadl.org/STEM/BaseModel#ciaIssue&gt; ?ic . FILTER(regex(str(?ic),'Confidentiality'))}
. OPTIONAL{?x &lt;http://sadl.org/STEM/BaseModel#ciaIssue&gt; ?ii . FILTER(regex(str(?ii),'Integrity'))}
. OPTIONAL{?x &lt;http://sadl.org/STEM/BaseModel#ciaIssue&gt; ?ia . FILTER(regex(str(?ia),'Availability'))}
} order by ?CompType ?CompInst ?CAPEC
</rdfs:isDefinedBy>
  </j.0:NamedQuery>
  <j.0:NamedQuery rdf:ID="Defenses">
    <rdfs:isDefinedBy rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >
select ?CompType ?CompInst ?CAPEC (?ic as ?Confidentiality) (?ii as ?Integrity) (?ia as ?Availability) 
             (?ADP as ?ApplicableDefenseProperties) (?Prop as ?ImplProperties) (?DALx as ?DAL) where 
    {{{ select ?CompType ?CompInst ?CAPEC ?ii ?ia ?ic ?ADP ?x (count(*) as ?num) where 
      {?CompInst &lt;http://sadl.org/STEM/BaseModel#applicableCM&gt; ?x
      . ?x &lt;http://sadl.org/STEM/BaseModel#id&gt; ?id . LET(?CAPEC := concat('CAPEC-',str(?id)))
      . ?x &lt;http://sadl.org/STEM/BaseModel#capecDesc&gt; ?CAPECDescription
      . ?CompInst &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; ?CompType
      . FILTER(!regex(str(?CompType), 'Class')) #needed if CompInst and CompType have same name
      . FILTER NOT EXISTS {?CompInst &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; ?a1 . ?a1 &lt;http://www.w3.org/2000/01/rdf-schema#subClassOf&gt; ?CompType }
      . OPTIONAL{?x &lt;http://sadl.org/STEM/BaseModel#ciaIssue&gt; ?ic . FILTER(regex(str(?ic),'Confidentiality'))}
      . OPTIONAL{?x &lt;http://sadl.org/STEM/BaseModel#ciaIssue&gt; ?ii . FILTER(regex(str(?ii),'Integrity'))}
      . OPTIONAL{?x &lt;http://sadl.org/STEM/BaseModel#ciaIssue&gt; ?ia . FILTER(regex(str(?ia),'Availability'))}
      . ?x &lt;http://sadl.org/STEM/BaseModel#mitigation&gt; ?m0 
     } group by ?CompType ?CompInst ?CAPEC ?ii ?ia ?ic ?ADP ?x having (?num=1) order by ?CompInst ?x}
     ?x &lt;http://sadl.org/STEM/BaseModel#mitigation&gt; ?m1
    . LET(?nullstr1 := 'null')
    . LET(?ADP1 := replace(str(?m1),'http.*#',''))
    . LET(?ADP := concat(?ADP1,concat(';',concat(?nullstr1,concat(';',?nullstr1))))) 

    . LET(?temp1 := lcase(str(?m1)))
    . LET(?q2 := replace(str(?temp1),'http.*#','')) # strip out prefix
    . OPTIONAL{?CompInst ?y2 ?z4 . LET(?temp2 := lcase(str(?y2)))
               . FILTER(?temp1 = ?temp2) . ?z4 &lt;http://sadl.org/STEM/BaseModel#val&gt; true . ?z4 &lt;http://sadl.org/STEM/BaseModel#dal&gt; ?dal1
               . LET(?Prop1 := ?y2)}
    . LET(?Prop11 := coalesce(?Prop1,?nullstr1)) . LET(?dal11 := coalesce(?dal1,?nullstr1)) 
    . LET(?strippedProp1 := replace(str(?Prop11),'http.*#',''))
    . LET(?strippedDal1 := str(?dal11)) 
    . LET(?Prop := concat(?strippedProp1,concat(';',concat(?nullstr1,concat(';',?nullstr1)))))
    . LET(?DALx := concat(?strippedDal1,concat(';',concat(?nullstr1,concat(';',?nullstr1)))))
  }
UNION # now for cases with exactly 2 mitigations for a capec (i.e. m1 and m2)
    {{ select ?CompType ?CompInst ?CAPEC ?ii ?ia ?ic ?ADP ?x (count(*) as ?num) where 
      {?CompInst &lt;http://sadl.org/STEM/BaseModel#applicableCM&gt; ?x
      . ?x &lt;http://sadl.org/STEM/BaseModel#id&gt; ?id . LET(?CAPEC := concat('CAPEC-',str(?id)))
      . ?x &lt;http://sadl.org/STEM/BaseModel#capecDesc&gt; ?CAPECDescription
      . ?CompInst &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; ?CompType
      . FILTER(!regex(str(?CompType), 'Class')) #needed if CompInst and CompType have same name
      . FILTER NOT EXISTS {?CompInst &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; ?a1 . ?a1 &lt;http://www.w3.org/2000/01/rdf-schema#subClassOf&gt; ?CompType }
      . OPTIONAL{?x &lt;http://sadl.org/STEM/BaseModel#ciaIssue&gt; ?ic . FILTER(regex(str(?ic),'Confidentiality'))}
      . OPTIONAL{?x &lt;http://sadl.org/STEM/BaseModel#ciaIssue&gt; ?ii . FILTER(regex(str(?ii),'Integrity'))}
      . OPTIONAL{?x &lt;http://sadl.org/STEM/BaseModel#ciaIssue&gt; ?ia . FILTER(regex(str(?ia),'Availability'))}
      . ?x &lt;http://sadl.org/STEM/BaseModel#mitigation&gt; ?m0 
     } group by ?CompType ?CompInst ?CAPEC ?ii ?ia ?ic ?ADP ?x having (?num=2) order by ?CompInst ?x}
      # now get applicable defenses, implementation properties and their DALs
     ?x &lt;http://sadl.org/STEM/BaseModel#mitigation&gt; ?m1 #ensure that ?m1 matches with tail of ?x so that we do not go twice through this for 2 mitigations
    . LET(?strippedm1 := replace(str(?m1),'http.*#',''))
      # ensure that ?x ends with ?strippedm1
    . LET(?strippedx := replace(str(?x),'http.*#',''))
    . LET(?tail := substr(?strippedx,strlen(?strippedx) - strlen(?strippedm1)+1 ,strlen(?strippedm1)))
    . FILTER(?tail = ?strippedm1)

    . LET(?nullstr2 := 'null')
    . ?x &lt;http://sadl.org/STEM/BaseModel#mitigation&gt; ?m2 . FILTER(?m1 != ?m2)
    . LET(?ADP1 := replace(str(?m1),'http.*#','')) 
    . LET(?ADP2 := replace(str(?m2),'http.*#',''))
    . LET(?ADP := concat(?ADP1, concat(';',concat(?ADP2,concat(';',?nullstr2)))))

    # looking for implementation property corresponding to ?m1
    . LET(?temp11 := lcase(str(?m1)))
    . LET(?q12 := replace(str(?temp11),'http.*#','')) # strip out prefix
    . OPTIONAL{?CompInst ?y12 ?z14 . LET(?temp12 := lcase(str(?y12)))
              . FILTER(?temp11 = ?temp12) . ?z14 &lt;http://sadl.org/STEM/BaseModel#val&gt; true . ?z14 &lt;http://sadl.org/STEM/BaseModel#dal&gt; ?dal11
              . LET(?Prop1 := ?y12)}
    . LET(?Prop11 := coalesce(?Prop1,?nullstr2)) . LET(?dal111 := coalesce(?dal11,?nullstr2))
    . LET(?strippedProp1 := replace(str(?Prop11),'http.*#',''))
    . LET(?strippedDal1 := str(?dal111)) 

    # looking for implementation property corresponding to ?m2
    . LET(?temp21 := lcase(str(?m2)))
    . LET(?q22 := replace(str(?temp21),'http.*#','')) # strip out prefix
    . OPTIONAL{?CompInst ?y22 ?z24 . LET(?temp22 := lcase(str(?y22)))
              . FILTER(?temp21 = ?temp22) . ?z24 &lt;http://sadl.org/STEM/BaseModel#val&gt; true . ?z24 &lt;http://sadl.org/STEM/BaseModel#dal&gt; ?dal21
              . LET(?Prop2 := ?y22)}
    . LET(?Prop21 := coalesce(?Prop2,?nullstr2)) . LET(?dal212 := coalesce(?dal21,?nullstr2))
    . LET(?strippedProp2 := replace(str(?Prop21),'http.*#',''))
    . LET(?strippedDal2 := str(?dal212)) 

    . LET(?Prop := concat(?strippedProp1, concat(';',concat(?strippedProp2,concat(';',?nullstr2)))))
    . LET(?DALx := concat(?strippedDal1,concat(';',concat(?strippedDal2,concat(';',?nullstr2)))))
  }
UNION # now where there are 3 mitigations for a capec
    {{ select ?CompType ?CompInst ?CAPEC ?ii ?ia ?ic ?ADP ?x (count(*) as ?num) where 
      {?CompInst &lt;http://sadl.org/STEM/BaseModel#applicableCM&gt; ?x
      . ?x &lt;http://sadl.org/STEM/BaseModel#id&gt; ?id . LET(?CAPEC := concat('CAPEC-',str(?id)))
      . ?x &lt;http://sadl.org/STEM/BaseModel#capecDesc&gt; ?CAPECDescription
      . ?CompInst &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; ?CompType
      . FILTER(!regex(str(?CompType), 'Class')) #needed if CompInst and CompType have same name
      . FILTER NOT EXISTS {?CompInst &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; ?a1 . ?a1 &lt;http://www.w3.org/2000/01/rdf-schema#subClassOf&gt; ?CompType }
      . OPTIONAL{?x &lt;http://sadl.org/STEM/BaseModel#ciaIssue&gt; ?ic . FILTER(regex(str(?ic),'Confidentiality'))}
      . OPTIONAL{?x &lt;http://sadl.org/STEM/BaseModel#ciaIssue&gt; ?ii . FILTER(regex(str(?ii),'Integrity'))}
      . OPTIONAL{?x &lt;http://sadl.org/STEM/BaseModel#ciaIssue&gt; ?ia . FILTER(regex(str(?ia),'Availability'))}
      . ?x &lt;http://sadl.org/STEM/BaseModel#mitigation&gt; ?m0 
     } group by ?CompType ?CompInst ?CAPEC ?ii ?ia ?ic ?ADP ?x having (?num=3) order by ?CompInst ?x}
     # now get applicable defenses, implementation properties and their DALs
     ?x &lt;http://sadl.org/STEM/BaseModel#mitigation&gt; ?m1 #ensure that ?m1 matches with tail of ?x so that we do not go twice through this for 2 mitigations
    . LET(?strippedm1 := replace(str(?m1),'http.*#',''))
      # ensure that ?x ends with ?strippedm1
    . LET(?strippedx := replace(str(?x),'http.*#',''))
    . LET(?tail := substr(?strippedx,strlen(?strippedx) - strlen(?strippedm1)+1 ,strlen(?strippedm1)))
    . FILTER(?tail = ?strippedm1)

    . ?x &lt;http://sadl.org/STEM/BaseModel#mitigation&gt; ?m2 . FILTER(?m1 != ?m2)
      # ensure that ?x ends with ?m2 concat with ?m1 (with '-' separation)
    . LET(?strippedm2 := replace(str(?m2),'http.*#',''))
    . LET(?strippedm2m1 := concat(?strippedm2, concat('-',?strippedm1)))
    . LET(?tail2 := substr(?strippedx,strlen(?strippedx) - strlen(?strippedm2m1)+1 ,strlen(?strippedm2m1)))
    . FILTER(?tail2 = ?strippedm2m1)

    . ?x &lt;http://sadl.org/STEM/BaseModel#mitigation&gt; ?m3 . FILTER(?m1 != ?m3) . FILTER(?m2 != ?m3)
    . LET(?ADP1 := replace(str(?m1),'http.*#','')) 
    . LET(?ADP2 := replace(str(?m2),'http.*#',''))
    . LET(?ADP3 := replace(str(?m3),'http.*#',''))
    . LET(?ADP := concat(?ADP1, concat(';',concat(?ADP2, concat(';',?ADP3)))))
    . LET(?nullstr3 := 'null')

    # looking for implementation property corresponding to ?m1
    . LET(?temp11 := lcase(str(?m1)))
    . LET(?q12 := replace(str(?temp11),'http.*#','')) # strip out prefix; DO I NEED IT?
    . OPTIONAL{?CompInst ?y12 ?z14 . LET(?temp12 := lcase(str(?y12)))
              . FILTER(?temp11 = ?temp12) . ?z14 &lt;http://sadl.org/STEM/BaseModel#val&gt; true . ?z14 &lt;http://sadl.org/STEM/BaseModel#dal&gt; ?dal11
              . LET(?Prop1 := ?y12)}
    . LET(?Prop11 := coalesce(?Prop1,?nullstr3)) . LET(?dal111 := coalesce(?dal11,?nullstr3))
    . LET(?strippedProp1 := replace(str(?Prop11),'http.*#',''))
    . LET(?strippedDal1 := str(?dal111)) 

    # looking for implementation property corresponding to ?m2
    . LET(?temp21 := lcase(str(?m2)))
    . LET(?q22 := replace(str(?temp21),'http.*#','')) # strip out prefix
    . OPTIONAL{?CompInst ?y22 ?z24 . LET(?temp22 := lcase(str(?y22)))
              . FILTER(?temp21 = ?temp22) . ?z24 &lt;http://sadl.org/STEM/BaseModel#val&gt; true . ?z24 &lt;http://sadl.org/STEM/BaseModel#dal&gt; ?dal21
              . LET(?Prop2 := ?y22)}
    . LET(?Prop21 := coalesce(?Prop2,?nullstr3)) . LET(?dal211 := coalesce(?dal21,?nullstr3))
    . LET(?strippedProp2 := replace(str(?Prop21),'http.*#',''))
    . LET(?strippedDal2 := str(?dal211)) 

    # looking for implementation property corresponding to ?m3
    . LET(?temp31 := lcase(str(?m3)))
    . LET(?q32 := replace(str(?temp31),'http.*#','')) # strip out prefix
    . OPTIONAL{?CompInst ?y32 ?z34 . LET(?temp32 := lcase(str(?y32)))
              . FILTER(?temp31 = ?temp32) . ?z34 &lt;http://sadl.org/STEM/BaseModel#val&gt; true . ?z34 &lt;http://sadl.org/STEM/BaseModel#dal&gt; ?dal31
              . LET(?Prop3 := ?y32)}
    . LET(?Prop31 := coalesce(?Prop3,?nullstr3)) . LET(?dal311 := coalesce(?dal31,?nullstr3))
    . LET(?strippedProp3 := replace(str(?Prop31),'http.*#',''))
    . LET(?strippedDal3 := str(?dal311)) #replace(str(?dal31),'http.*#',''))

    . LET(?Prop := concat(?strippedProp1, concat(';',concat(?strippedProp2, concat(';',?strippedProp3)))))
    . LET(?DALx := concat(?strippedDal1,concat(';',concat(?strippedDal2,concat(';',?strippedDal3)))))
  }
} order by ?CompInst ?CAPEC ?ic ?ii ?ia ?ADP
</rdfs:isDefinedBy>
  </j.0:NamedQuery>
</rdf:RDF>
